
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001cd  00800062  00800062  00000b78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac3  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b84  00000000  00000000  00002e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000039fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004167  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ee       	ldi	r30, 0xE2	; 226
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 32       	cpi	r26, 0x2F	; 47
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	35 d0       	rcall	.+106    	; 0xc4 <main>
  5a:	41 c5       	rjmp	.+2690   	; 0xade <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  5e:	e1 99       	sbic	0x1c, 1	; 28
  60:	fe cf       	rjmp	.-4      	; 0x5e <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  62:	9f bb       	out	0x1f, r25	; 31
  64:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  66:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
  68:	8d b3       	in	r24, 0x1d	; 29
}
  6a:	08 95       	ret

0000006c <__vector_6>:


  //----------------Работа прерывателя таймера------------------------------------

 ISR (TIMER1_COMPA_vect)
 {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
	  timing++;
  8e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timing>
  92:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timing+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <timing+0x1>
  9c:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timing>
	  Omega_slave(); 
  a0:	a3 d3       	rcall	.+1862   	; 0x7e8 <Omega_slave>
  }
  a2:	ff 91       	pop	r31
  a4:	ef 91       	pop	r30
  a6:	bf 91       	pop	r27
  a8:	af 91       	pop	r26
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	7f 91       	pop	r23
  b0:	6f 91       	pop	r22
  b2:	5f 91       	pop	r21
  b4:	4f 91       	pop	r20
  b6:	3f 91       	pop	r19
  b8:	2f 91       	pop	r18
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
  c4:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем опорное напряжение
  ca:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8f 6d       	ori	r24, 0xDF	; 223
  d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADFR); //частота предделителя
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	86 62       	ori	r24, 0x26	; 38
  d6:	86 b9       	out	0x06, r24	; 6
    ACSR |= (1 << ACD);//отключаем аналоговый компаратор
  d8:	47 9a       	sbi	0x08, 7	; 8
    // Настройка портов ввода/вывода
    DDRC = 0b00000000;
  da:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00111010;
  dc:	8a e3       	ldi	r24, 0x3A	; 58
  de:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
  e0:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	81 bb       	out	0x11, r24	; 17
	PORTC= 0b00000000;
  e6:	15 ba       	out	0x15, r1	; 21
	PORTD= 0b00000000;
  e8:	12 ba       	out	0x12, r1	; 18
//_________________________________________________________________________________________________
    
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  f0:	89 b7       	in	r24, 0x39	; 57
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	89 bf       	out	0x39, r24	; 57
	OCR1A = 100;  //записываем в регистр число для сравнения
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9b bd       	out	0x2b, r25	; 43
  fc:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	
	adress=19;
 104:	83 e1       	ldi	r24, 0x13	; 19
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <adress+0x1>
 10c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <adress>
	device_ID=157;// 157-блок коммутации ,89-СПРА ,108-БСА
 110:	8d e9       	ldi	r24, 0x9D	; 157
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <device_ID+0x1>
 118:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <device_ID>
//===================================================================================================================================================	
 
 interval=EEPROM_read(0x02);   // Время ВЫХОДА НА РЕЖИМ
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9e df       	rcall	.-196    	; 0x5e <EEPROM_read>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <interval+0x1>
 128:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <interval>
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	96 df       	rcall	.-212    	; 0x5e <EEPROM_read>
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 138:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 
 delta_U=EEPROM_read(0x08);	 
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	8e df       	rcall	.-228    	; 0x5e <EEPROM_read>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <delta_U+0x1>
 148:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
 14c:	8b 97       	sbiw	r24, 0x2b	; 43
 14e:	34 f0       	brlt	.+12     	; 0x15c <main+0x98>
 150:	89 e2       	ldi	r24, 0x29	; 41
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <delta_U+0x1>
 158:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <delta_U>
 delta_F=EEPROM_read(0x09);
 15c:	89 e0       	ldi	r24, 0x09	; 9
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	7e df       	rcall	.-260    	; 0x5e <EEPROM_read>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <delta_F+0x1>
 168:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <delta_F>
 if(delta_F>42){delta_F=41;}
 16c:	8b 97       	sbiw	r24, 0x2b	; 43
 16e:	34 f0       	brlt	.+12     	; 0x17c <main+0xb8>
 170:	89 e2       	ldi	r24, 0x29	; 41
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <delta_F+0x1>
 178:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <delta_F>
 adress=EEPROM_read(0x10);
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	6e df       	rcall	.-292    	; 0x5e <EEPROM_read>
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <adress+0x1>
 188:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <adress>
 if(adress>128){adress=0;}
 18c:	81 38       	cpi	r24, 0x81	; 129
 18e:	91 05       	cpc	r25, r1
 190:	24 f0       	brlt	.+8      	; 0x19a <main+0xd6>
 192:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <adress+0x1>
 196:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <adress>
 //fire=read_adc(0); //Чтение состояния входа ПОЖАР
// preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ



  sei();
 19a:	78 94       	sei
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0xd8>

0000019e <protocol>:
	 PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 
	 }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
	 void protocol(void)
	 {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
		 if (tct==13)
 1a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 1a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 1aa:	8d 30       	cpi	r24, 0x0D	; 13
 1ac:	91 05       	cpc	r25, r1
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <protocol+0x14>
 1b0:	0c c3       	rjmp	.+1560   	; 0x7ca <__stack+0x36b>
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
 1b2:	cf ef       	ldi	r28, 0xFF	; 255
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1b8:	3b 8d       	ldd	r19, Y+27	; 0x1b
 1ba:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <directive>
 1be:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <directive+0x1>
 1c2:	82 2b       	or	r24, r18
 1c4:	93 2b       	or	r25, r19
 1c6:	2c 89       	ldd	r18, Y+20	; 0x14
 1c8:	3d 89       	ldd	r19, Y+21	; 0x15
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	82 2b       	or	r24, r18
 1d8:	93 2b       	or	r25, r19
 1da:	2e 89       	ldd	r18, Y+22	; 0x16
 1dc:	3f 89       	ldd	r19, Y+23	; 0x17
 1de:	22 0f       	add	r18, r18
 1e0:	33 1f       	adc	r19, r19
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	82 2b       	or	r24, r18
 1e8:	93 2b       	or	r25, r19
 1ea:	28 8d       	ldd	r18, Y+24	; 0x18
 1ec:	39 8d       	ldd	r19, Y+25	; 0x19
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	82 2b       	or	r24, r18
 1f4:	93 2b       	or	r25, r19
 1f6:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <directive+0x1>
 1fa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <directive>
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <protocol+0x72>
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 200:	c1 9a       	sbi	0x18, 1	; 24
 202:	ad 9a       	sbi	0x15, 5	; 21
		if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от программатора/ППКП
 204:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 208:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 20c:	0d 97       	sbiw	r24, 0x0d	; 13
 20e:	11 f4       	brne	.+4      	; 0x214 <protocol+0x76>
 210:	c1 9a       	sbi	0x18, 1	; 24
 212:	ad 9a       	sbi	0x15, 5	; 21
		if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ 
 214:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 218:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 21c:	0e 97       	sbiw	r24, 0x0e	; 14
 21e:	61 f4       	brne	.+24     	; 0x238 <protocol+0x9a>
 220:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <stat>
 224:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <stat+0x1>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	21 f0       	breq	.+8      	; 0x234 <protocol+0x96>
 22c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	b1 f4       	brne	.+44     	; 0x260 <protocol+0xc2>
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	ad 9a       	sbi	0x15, 5	; 21
		 
		 
		if(tct>=13)
 238:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 23c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 240:	8d 30       	cpi	r24, 0x0D	; 13
 242:	91 05       	cpc	r25, r1
 244:	0c f4       	brge	.+2      	; 0x248 <protocol+0xaa>
 246:	cd c2       	rjmp	.+1434   	; 0x7e2 <__stack+0x383>
		{ 
			
			if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 248:	46 97       	sbiw	r24, 0x16	; 22
 24a:	11 f4       	brne	.+4      	; 0x250 <protocol+0xb2>
 24c:	c1 9a       	sbi	0x18, 1	; 24
 24e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 250:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 254:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 258:	4f 97       	sbiw	r24, 0x1f	; 31
 25a:	11 f4       	brne	.+4      	; 0x260 <protocol+0xc2>
 25c:	c1 9a       	sbi	0x18, 1	; 24
 25e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 260:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 264:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 268:	88 97       	sbiw	r24, 0x28	; 40
 26a:	11 f4       	brne	.+4      	; 0x270 <protocol+0xd2>
 26c:	c1 9a       	sbi	0x18, 1	; 24
 26e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 270:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 274:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 278:	c1 97       	sbiw	r24, 0x31	; 49
 27a:	11 f4       	brne	.+4      	; 0x280 <protocol+0xe2>
 27c:	c1 9a       	sbi	0x18, 1	; 24
 27e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 280:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 284:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 288:	ca 97       	sbiw	r24, 0x3a	; 58
 28a:	11 f4       	brne	.+4      	; 0x290 <protocol+0xf2>
 28c:	c1 9a       	sbi	0x18, 1	; 24
 28e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 290:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 294:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 298:	83 34       	cpi	r24, 0x43	; 67
 29a:	91 05       	cpc	r25, r1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <protocol+0x104>
 29e:	c1 9a       	sbi	0x18, 1	; 24
 2a0:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 2a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 2aa:	8c 34       	cpi	r24, 0x4C	; 76
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <protocol+0x116>
 2b0:	c1 9a       	sbi	0x18, 1	; 24
 2b2:	ad 9a       	sbi	0x15, 5	; 21
				
				
		  switch(directive)
 2b4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <directive>
 2b8:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <directive+0x1>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <protocol+0x126>
 2c2:	6a c0       	rjmp	.+212    	; 0x398 <protocol+0x1fa>
 2c4:	1c f4       	brge	.+6      	; 0x2cc <protocol+0x12e>
 2c6:	89 2b       	or	r24, r25
 2c8:	49 f0       	breq	.+18     	; 0x2dc <protocol+0x13e>
 2ca:	8b c2       	rjmp	.+1302   	; 0x7e2 <__stack+0x383>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	91 05       	cpc	r25, r1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <protocol+0x136>
 2d2:	7f c0       	rjmp	.+254    	; 0x3d2 <protocol+0x234>
 2d4:	0e 97       	sbiw	r24, 0x0e	; 14
 2d6:	09 f4       	brne	.+2      	; 0x2da <protocol+0x13c>
 2d8:	1f c2       	rjmp	.+1086   	; 0x718 <__stack+0x2b9>
 2da:	83 c2       	rjmp	.+1286   	; 0x7e2 <__stack+0x383>
		   {
			   
		   case 0 :
		   if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                 //OWR в активном состоянии при запросе от ППКП
 2dc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 2e0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 2e4:	09 97       	sbiw	r24, 0x09	; 9
 2e6:	11 f4       	brne	.+4      	; 0x2ec <protocol+0x14e>
 2e8:	c1 9a       	sbi	0x18, 1	; 24
 2ea:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП   
 2ec:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 2f0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 2f4:	0d 97       	sbiw	r24, 0x0d	; 13
 2f6:	11 f4       	brne	.+4      	; 0x2fc <protocol+0x15e>
 2f8:	c1 9a       	sbi	0x18, 1	; 24
 2fa:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 2fc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 300:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 304:	0e 97       	sbiw	r24, 0x0e	; 14
 306:	61 f4       	brne	.+24     	; 0x320 <protocol+0x182>
 308:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <stat>
 30c:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <stat+0x1>
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	21 f0       	breq	.+8      	; 0x31c <protocol+0x17e>
 314:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	91 f4       	brne	.+36     	; 0x340 <protocol+0x1a2>
 31c:	c1 9a       	sbi	0x18, 1	; 24
 31e:	ad 9a       	sbi	0x15, 5	; 21
			   
			   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 320:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 324:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 328:	46 97       	sbiw	r24, 0x16	; 22
 32a:	11 f4       	brne	.+4      	; 0x330 <protocol+0x192>
 32c:	c1 9a       	sbi	0x18, 1	; 24
 32e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 330:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 334:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 338:	4f 97       	sbiw	r24, 0x1f	; 31
 33a:	11 f4       	brne	.+4      	; 0x340 <protocol+0x1a2>
 33c:	c1 9a       	sbi	0x18, 1	; 24
 33e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 340:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 344:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 348:	88 97       	sbiw	r24, 0x28	; 40
 34a:	11 f4       	brne	.+4      	; 0x350 <protocol+0x1b2>
 34c:	c1 9a       	sbi	0x18, 1	; 24
 34e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 350:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 354:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 358:	c1 97       	sbiw	r24, 0x31	; 49
 35a:	11 f4       	brne	.+4      	; 0x360 <protocol+0x1c2>
 35c:	c1 9a       	sbi	0x18, 1	; 24
 35e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 360:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 364:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 368:	ca 97       	sbiw	r24, 0x3a	; 58
 36a:	11 f4       	brne	.+4      	; 0x370 <protocol+0x1d2>
 36c:	c1 9a       	sbi	0x18, 1	; 24
 36e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 370:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 374:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 378:	83 34       	cpi	r24, 0x43	; 67
 37a:	91 05       	cpc	r25, r1
 37c:	11 f4       	brne	.+4      	; 0x382 <protocol+0x1e4>
 37e:	c1 9a       	sbi	0x18, 1	; 24
 380:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 382:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 386:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 38a:	8c 34       	cpi	r24, 0x4C	; 76
 38c:	91 05       	cpc	r25, r1
 38e:	09 f0       	breq	.+2      	; 0x392 <protocol+0x1f4>
 390:	28 c2       	rjmp	.+1104   	; 0x7e2 <__stack+0x383>
 392:	c1 9a       	sbi	0x18, 1	; 24
 394:	ad 9a       	sbi	0x15, 5	; 21
 396:	25 c2       	rjmp	.+1098   	; 0x7e2 <__stack+0x383>
			   
		   break;
		   
		   case 2 :
		  
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 398:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 39c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3a0:	0d 97       	sbiw	r24, 0x0d	; 13
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <protocol+0x20a>
 3a4:	c1 9a       	sbi	0x18, 1	; 24
 3a6:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 3a8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3ac:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3b0:	0e 97       	sbiw	r24, 0x0e	; 14
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <protocol+0x218>
 3b4:	16 c2       	rjmp	.+1068   	; 0x7e2 <__stack+0x383>
 3b6:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <stat>
 3ba:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <stat+0x1>
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	29 f0       	breq	.+10     	; 0x3cc <protocol+0x22e>
 3c2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	09 f0       	breq	.+2      	; 0x3cc <protocol+0x22e>
 3ca:	0b c2       	rjmp	.+1046   	; 0x7e2 <__stack+0x383>
 3cc:	c1 9a       	sbi	0x18, 1	; 24
 3ce:	ad 9a       	sbi	0x15, 5	; 21
 3d0:	08 c2       	rjmp	.+1040   	; 0x7e2 <__stack+0x383>
		   break;
		   
		   case 3 :
		 
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 3d2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3d6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3da:	0d 97       	sbiw	r24, 0x0d	; 13
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <protocol+0x244>
 3de:	c1 9a       	sbi	0x18, 1	; 24
 3e0:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 3e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3e6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3ea:	0e 97       	sbiw	r24, 0x0e	; 14
 3ec:	61 f4       	brne	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ee:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <stat>
 3f2:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <stat+0x1>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	21 f0       	breq	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	91 f4       	brne	.+36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 402:	c1 9a       	sbi	0x18, 1	; 24
 404:	ad 9a       	sbi	0x15, 5	; 21
		
		   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации 
 406:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 40a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 40e:	46 97       	sbiw	r24, 0x16	; 22
 410:	11 f4       	brne	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	c1 9a       	sbi	0x18, 1	; 24
 414:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 416:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 41a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 41e:	4f 97       	sbiw	r24, 0x1f	; 31
 420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	c1 9a       	sbi	0x18, 1	; 24
 424:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 426:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 42a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 42e:	88 97       	sbiw	r24, 0x28	; 40
 430:	11 f4       	brne	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	c1 9a       	sbi	0x18, 1	; 24
 434:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 436:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 43a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 43e:	c1 97       	sbiw	r24, 0x31	; 49
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	c1 9a       	sbi	0x18, 1	; 24
 444:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 446:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 44a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 44e:	ca 97       	sbiw	r24, 0x3a	; 58
 450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	c1 9a       	sbi	0x18, 1	; 24
 454:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 456:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 45a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 45e:	83 34       	cpi	r24, 0x43	; 67
 460:	91 05       	cpc	r25, r1
 462:	11 f4       	brne	.+4      	; 0x468 <__stack+0x9>
 464:	c1 9a       	sbi	0x18, 1	; 24
 466:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 468:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 46c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 470:	8c 34       	cpi	r24, 0x4C	; 76
 472:	91 05       	cpc	r25, r1
 474:	11 f4       	brne	.+4      	; 0x47a <__stack+0x1b>
 476:	c1 9a       	sbi	0x18, 1	; 24
 478:	ad 9a       	sbi	0x15, 5	; 21
		
	   	   if((tct>=14)&&(tct<22))   //индентификатор устройства
 47a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 47e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 482:	9c 01       	movw	r18, r24
 484:	2e 50       	subi	r18, 0x0E	; 14
 486:	31 09       	sbc	r19, r1
 488:	28 30       	cpi	r18, 0x08	; 8
 48a:	31 05       	cpc	r19, r1
 48c:	20 f5       	brcc	.+72     	; 0x4d6 <__stack+0x77>
			    {
				 temp_ID|=(device_ID>>(21-tct))&(0b1);
 48e:	25 e1       	ldi	r18, 0x15	; 21
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	28 1b       	sub	r18, r24
 494:	39 0b       	sbc	r19, r25
 496:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <device_ID>
 49a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <device_ID+0x1>
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__stack+0x45>
 4a0:	95 95       	asr	r25
 4a2:	87 95       	ror	r24
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__stack+0x41>
 4a8:	81 70       	andi	r24, 0x01	; 1
 4aa:	99 27       	eor	r25, r25
 4ac:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <temp_ID>
 4b0:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <temp_ID+0x1>
 4b4:	82 2b       	or	r24, r18
 4b6:	93 2b       	or	r25, r19
 4b8:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <temp_ID+0x1>
 4bc:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__stack+0x69>
 4c4:	c1 9a       	sbi	0x18, 1	; 24
 4c6:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 4c8:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 4cc:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 4d0:	89 2b       	or	r24, r25
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__stack+0x77>
 4d4:	c1 98       	cbi	0x18, 1	; 24
			    }  
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
 4d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 4da:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 4de:	4e 97       	sbiw	r24, 0x1e	; 30
 4e0:	e1 f4       	brne	.+56     	; 0x51a <__stack+0xbb>
			{
				temp_ID|=((external)&(0b1));
 4e2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 4e6:	e8 2f       	mov	r30, r24
 4e8:	e1 70       	andi	r30, 0x01	; 1
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 4f0:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 4f4:	e8 2b       	or	r30, r24
 4f6:	f9 2b       	or	r31, r25
 4f8:	f0 93 88 00 	sts	0x0088, r31	; 0x800088 <temp_ID+0x1>
 4fc:	e0 93 87 00 	sts	0x0087, r30	; 0x800087 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 500:	e1 30       	cpi	r30, 0x01	; 1
 502:	f1 05       	cpc	r31, r1
 504:	09 f0       	breq	.+2      	; 0x508 <__stack+0xa9>
 506:	65 c1       	rjmp	.+714    	; 0x7d2 <__stack+0x373>
 508:	c1 9a       	sbi	0x18, 1	; 24
 50a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 50c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 510:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 514:	89 2b       	or	r24, r25
 516:	09 f4       	brne	.+2      	; 0x51a <__stack+0xbb>
 518:	c1 98       	cbi	0x18, 1	; 24
			}	
				
				
				
		   if((tct>=34)&&(tct<36))  //ручной режим (НЕ АВТО)
 51a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 51e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 522:	82 97       	sbiw	r24, 0x22	; 34
 524:	02 97       	sbiw	r24, 0x02	; 2
 526:	d0 f4       	brcc	.+52     	; 0x55c <__stack+0xfd>
			    {
				 temp_ID|=((mode)&(0b1));
 528:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <mode>
 52c:	a8 2f       	mov	r26, r24
 52e:	a1 70       	andi	r26, 0x01	; 1
 530:	b0 e0       	ldi	r27, 0x00	; 0
 532:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 536:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 53a:	a8 2b       	or	r26, r24
 53c:	b9 2b       	or	r27, r25
 53e:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <temp_ID+0x1>
 542:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	11 f4       	brne	.+4      	; 0x54e <__stack+0xef>
 54a:	c1 9a       	sbi	0x18, 1	; 24
 54c:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 54e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 552:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 556:	89 2b       	or	r24, r25
 558:	09 f4       	brne	.+2      	; 0x55c <__stack+0xfd>
 55a:	c1 98       	cbi	0x18, 1	; 24
			    }
       ///////////////////////////////////////////////////////////////////////////// 
			if((tct>=36)&&(tct<40))  //Активация выхода -тревога
 55c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 560:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 564:	84 97       	sbiw	r24, 0x24	; 36
 566:	04 97       	sbiw	r24, 0x04	; 4
 568:	d8 f4       	brcc	.+54     	; 0x5a0 <__stack+0x141>
			{
				temp_ID|=((external)&(0b1));
 56a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <external>
 56e:	48 2f       	mov	r20, r24
 570:	41 70       	andi	r20, 0x01	; 1
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 578:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 57c:	48 2b       	or	r20, r24
 57e:	59 2b       	or	r21, r25
 580:	50 93 88 00 	sts	0x0088, r21	; 0x800088 <temp_ID+0x1>
 584:	40 93 87 00 	sts	0x0087, r20	; 0x800087 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 588:	41 30       	cpi	r20, 0x01	; 1
 58a:	51 05       	cpc	r21, r1
 58c:	11 f4       	brne	.+4      	; 0x592 <__stack+0x133>
 58e:	c1 9a       	sbi	0x18, 1	; 24
 590:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 592:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 596:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 59a:	89 2b       	or	r24, r25
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__stack+0x141>
 59e:	c1 98       	cbi	0x18, 1	; 24
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
			}
		*/	
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
 5a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 5a4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 5a8:	87 97       	sbiw	r24, 0x27	; 39
 5aa:	e1 f4       	brne	.+56     	; 0x5e4 <__stack+0x185>
			    {
				 temp_ID|=((receivemode)&(0b1));
 5ac:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <receivemode>
 5b0:	68 2f       	mov	r22, r24
 5b2:	61 70       	andi	r22, 0x01	; 1
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 5ba:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 5be:	68 2b       	or	r22, r24
 5c0:	79 2b       	or	r23, r25
 5c2:	70 93 88 00 	sts	0x0088, r23	; 0x800088 <temp_ID+0x1>
 5c6:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 5ca:	61 30       	cpi	r22, 0x01	; 1
 5cc:	71 05       	cpc	r23, r1
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__stack+0x173>
 5d0:	04 c1       	rjmp	.+520    	; 0x7da <__stack+0x37b>
 5d2:	c1 9a       	sbi	0x18, 1	; 24
 5d4:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 5d6:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 5da:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 5de:	89 2b       	or	r24, r25
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <__stack+0x185>
 5e2:	c1 98       	cbi	0x18, 1	; 24
			    }   
			 
		   if((tct>=51)&&(tct<57))  //состояние АЦП входа AL
 5e4:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 5e8:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 5ec:	c9 01       	movw	r24, r18
 5ee:	c3 97       	sbiw	r24, 0x33	; 51
 5f0:	06 97       	sbiw	r24, 0x06	; 6
 5f2:	60 f5       	brcc	.+88     	; 0x64c <__stack+0x1ed>
			    {
				  temp_ID|=((fire/4)>>(57-tct))&(0b1);
 5f4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <fire>
 5f8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <fire+0x1>
 5fc:	99 23       	and	r25, r25
 5fe:	0c f4       	brge	.+2      	; 0x602 <__stack+0x1a3>
 600:	03 96       	adiw	r24, 0x03	; 3
 602:	95 95       	asr	r25
 604:	87 95       	ror	r24
 606:	95 95       	asr	r25
 608:	87 95       	ror	r24
 60a:	49 e3       	ldi	r20, 0x39	; 57
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	ba 01       	movw	r22, r20
 610:	62 1b       	sub	r22, r18
 612:	73 0b       	sbc	r23, r19
 614:	02 c0       	rjmp	.+4      	; 0x61a <__stack+0x1bb>
 616:	95 95       	asr	r25
 618:	87 95       	ror	r24
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <__stack+0x1b7>
 61e:	81 70       	andi	r24, 0x01	; 1
 620:	99 27       	eor	r25, r25
 622:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <temp_ID>
 626:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <temp_ID+0x1>
 62a:	82 2b       	or	r24, r18
 62c:	93 2b       	or	r25, r19
 62e:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <temp_ID+0x1>
 632:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	11 f4       	brne	.+4      	; 0x63e <__stack+0x1df>
 63a:	c1 9a       	sbi	0x18, 1	; 24
 63c:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}          
 63e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 642:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 646:	89 2b       	or	r24, r25
 648:	09 f4       	brne	.+2      	; 0x64c <__stack+0x1ed>
 64a:	c1 98       	cbi	0x18, 1	; 24
			    }
				
		   if((tct>=60)&&(tct<67)) // температура
 64c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 650:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 654:	9c 01       	movw	r18, r24
 656:	2c 53       	subi	r18, 0x3C	; 60
 658:	31 09       	sbc	r19, r1
 65a:	27 30       	cpi	r18, 0x07	; 7
 65c:	31 05       	cpc	r19, r1
 65e:	20 f5       	brcc	.+72     	; 0x6a8 <__stack+0x249>
				{
				  temp_ID|=(tmp>>(66-tct))&(0b1);
 660:	22 e4       	ldi	r18, 0x42	; 66
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	28 1b       	sub	r18, r24
 666:	39 0b       	sbc	r19, r25
 668:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <tmp>
 66c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <tmp+0x1>
 670:	02 c0       	rjmp	.+4      	; 0x676 <__stack+0x217>
 672:	95 95       	asr	r25
 674:	87 95       	ror	r24
 676:	2a 95       	dec	r18
 678:	e2 f7       	brpl	.-8      	; 0x672 <__stack+0x213>
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	99 27       	eor	r25, r25
 67e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <temp_ID>
 682:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <temp_ID+0x1>
 686:	82 2b       	or	r24, r18
 688:	93 2b       	or	r25, r19
 68a:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <temp_ID+0x1>
 68e:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	11 f4       	brne	.+4      	; 0x69a <__stack+0x23b>
 696:	c1 9a       	sbi	0x18, 1	; 24
 698:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}                
 69a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 69e:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 6a2:	89 2b       	or	r24, r25
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <__stack+0x249>
 6a6:	c1 98       	cbi	0x18, 1	; 24
				}
		   if((tct>=69)&&(tct<76))  //состояние АЦП входа PS
 6a8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 6ac:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 6b0:	c9 01       	movw	r24, r18
 6b2:	85 54       	subi	r24, 0x45	; 69
 6b4:	91 09       	sbc	r25, r1
 6b6:	07 97       	sbiw	r24, 0x07	; 7
 6b8:	08 f0       	brcs	.+2      	; 0x6bc <__stack+0x25d>
 6ba:	93 c0       	rjmp	.+294    	; 0x7e2 <__stack+0x383>
			    {
				temp_ID|=((preasure/4)>>(75-tct))&(0b1);
 6bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 6c0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 6c4:	99 23       	and	r25, r25
 6c6:	0c f4       	brge	.+2      	; 0x6ca <__stack+0x26b>
 6c8:	03 96       	adiw	r24, 0x03	; 3
 6ca:	95 95       	asr	r25
 6cc:	87 95       	ror	r24
 6ce:	95 95       	asr	r25
 6d0:	87 95       	ror	r24
 6d2:	4b e4       	ldi	r20, 0x4B	; 75
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	ba 01       	movw	r22, r20
 6d8:	62 1b       	sub	r22, r18
 6da:	73 0b       	sbc	r23, r19
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__stack+0x283>
 6de:	95 95       	asr	r25
 6e0:	87 95       	ror	r24
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <__stack+0x27f>
 6e6:	81 70       	andi	r24, 0x01	; 1
 6e8:	99 27       	eor	r25, r25
 6ea:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <temp_ID>
 6ee:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <temp_ID+0x1>
 6f2:	82 2b       	or	r24, r18
 6f4:	93 2b       	or	r25, r19
 6f6:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <temp_ID+0x1>
 6fa:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	11 f4       	brne	.+4      	; 0x706 <__stack+0x2a7>
 702:	c1 9a       	sbi	0x18, 1	; 24
 704:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~ (1 <<PB1);}               
 706:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <temp_ID>
 70a:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <temp_ID+0x1>
 70e:	89 2b       	or	r24, r25
 710:	09 f0       	breq	.+2      	; 0x714 <__stack+0x2b5>
 712:	67 c0       	rjmp	.+206    	; 0x7e2 <__stack+0x383>
 714:	c1 98       	cbi	0x18, 1	; 24
 716:	65 c0       	rjmp	.+202    	; 0x7e2 <__stack+0x383>
			    } 
			   
		   break;
		   
		   case 14 :
		   if(tct==13){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                 
 718:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 71c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 720:	0d 97       	sbiw	r24, 0x0d	; 13
 722:	11 f4       	brne	.+4      	; 0x728 <__stack+0x2c9>
 724:	c1 9a       	sbi	0x18, 1	; 24
 726:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==30){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 728:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 72c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 730:	4e 97       	sbiw	r24, 0x1e	; 30
 732:	11 f4       	brne	.+4      	; 0x738 <__stack+0x2d9>
 734:	c1 9a       	sbi	0x18, 1	; 24
 736:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==45){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 738:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 73c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 740:	8d 97       	sbiw	r24, 0x2d	; 45
 742:	11 f4       	brne	.+4      	; 0x748 <__stack+0x2e9>
 744:	c1 9a       	sbi	0x18, 1	; 24
 746:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==46)
 748:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 74c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 750:	8e 97       	sbiw	r24, 0x2e	; 46
 752:	09 f0       	breq	.+2      	; 0x756 <__stack+0x2f7>
 754:	46 c0       	rjmp	.+140    	; 0x7e2 <__stack+0x383>
		   {
			   if((detect[35]==1)&&(detect[42]==1)) {external=0;}
 756:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <detect+0x46>
 75a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <detect+0x47>
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	41 f4       	brne	.+16     	; 0x772 <__stack+0x313>
 762:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <detect+0x54>
 766:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <detect+0x55>
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	11 f4       	brne	.+4      	; 0x772 <__stack+0x313>
 76e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <external>
			   if((detect[36]==1)&&(detect[43]==1)) {external=0;}
 772:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <detect+0x48>
 776:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <detect+0x49>
 77a:	01 97       	sbiw	r24, 0x01	; 1
 77c:	41 f4       	brne	.+16     	; 0x78e <__stack+0x32f>
 77e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <detect+0x56>
 782:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <detect+0x57>
 786:	01 97       	sbiw	r24, 0x01	; 1
 788:	11 f4       	brne	.+4      	; 0x78e <__stack+0x32f>
 78a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <external>
			   if((detect[38]==1)&&(detect[45]==1)) {external=1;}
 78e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <detect+0x4c>
 792:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <detect+0x4d>
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	49 f4       	brne	.+18     	; 0x7ac <__stack+0x34d>
 79a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <detect+0x5a>
 79e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <detect+0x5b>
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	19 f4       	brne	.+6      	; 0x7ac <__stack+0x34d>
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <external>
			   if((detect[37]==1)&&(detect[44]==1)) {external=0;}
 7ac:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <detect+0x4a>
 7b0:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <detect+0x4b>
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	a9 f4       	brne	.+42     	; 0x7e2 <__stack+0x383>
 7b8:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <detect+0x58>
 7bc:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <detect+0x59>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	79 f4       	brne	.+30     	; 0x7e2 <__stack+0x383>
 7c4:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <external>
		   break;
		   
		 }
	  }
		 
 7c8:	0c c0       	rjmp	.+24     	; 0x7e2 <__stack+0x383>
		 if (tct==13)
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 7ca:	09 97       	sbiw	r24, 0x09	; 9
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <__stack+0x371>
 7ce:	22 cd       	rjmp	.-1468   	; 0x214 <protocol+0x76>
 7d0:	17 cd       	rjmp	.-1490   	; 0x200 <protocol+0x62>
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
			{
				temp_ID|=((external)&(0b1));
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 7d2:	ef 2b       	or	r30, r31
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__stack+0x379>
 7d6:	a0 ce       	rjmp	.-704    	; 0x518 <__stack+0xb9>
 7d8:	e3 ce       	rjmp	.-570    	; 0x5a0 <__stack+0x141>
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
			    {
				 temp_ID|=((receivemode)&(0b1));
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 7da:	67 2b       	or	r22, r23
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <__stack+0x381>
 7de:	01 cf       	rjmp	.-510    	; 0x5e2 <__stack+0x183>
 7e0:	63 cf       	rjmp	.-314    	; 0x6a8 <__stack+0x249>
		   break;
		   
		 }
	  }
		 
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <Omega_slave>:

 #include "Omega.h"
 void Omega_slave() {
 
 
 PORTD|= (1 <<PD0); // Вспомогательная строб-индикация состояния 
 7e8:	90 9a       	sbi	0x12, 0	; 18
 stats= (PINB & 0b0000001); //Чтение состояния входа
 7ea:	86 b3       	in	r24, 0x16	; 22
 7ec:	28 2f       	mov	r18, r24
 7ee:	21 70       	andi	r18, 0x01	; 1
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	30 93 e6 00 	sts	0x00E6, r19	; 0x8000e6 <stats+0x1>
 7f6:	20 93 e5 00 	sts	0x00E5, r18	; 0x8000e5 <stats>
 stats1=(PINB & 0b0000100);
 7fa:	86 b3       	in	r24, 0x16	; 22
 7fc:	84 70       	andi	r24, 0x04	; 4
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <stats1+0x1>
 804:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <stats1>
 if (( stats ==1)&&(bit_flag==0))
 808:	21 30       	cpi	r18, 0x01	; 1
 80a:	31 05       	cpc	r19, r1
 80c:	09 f0       	breq	.+2      	; 0x810 <Omega_slave+0x28>
 80e:	29 c1       	rjmp	.+594    	; 0xa62 <Omega_slave+0x27a>
 810:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <bit_flag>
 814:	81 11       	cpse	r24, r1
 816:	5d c1       	rjmp	.+698    	; 0xad2 <Omega_slave+0x2ea>
 {
	 
	 if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
 818:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <low>
 81c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <low+0x1>
 820:	9c 01       	movw	r18, r24
 822:	29 50       	subi	r18, 0x09	; 9
 824:	31 09       	sbc	r19, r1
 826:	22 30       	cpi	r18, 0x02	; 2
 828:	31 05       	cpc	r19, r1
 82a:	28 f4       	brcc	.+10     	; 0x836 <Omega_slave+0x4e>
 82c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <low+0x1>
 830:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <low>
 834:	2e c0       	rjmp	.+92     	; 0x892 <Omega_slave+0xaa>
	 if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
 836:	42 97       	sbiw	r24, 0x12	; 18
 838:	03 97       	sbiw	r24, 0x03	; 3
 83a:	38 f4       	brcc	.+14     	; 0x84a <Omega_slave+0x62>
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <low+0x1>
 844:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <low>
 848:	42 c0       	rjmp	.+132    	; 0x8ce <Omega_slave+0xe6>
	 if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
 84a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <low>
 84e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <low+0x1>
 852:	4b 97       	sbiw	r24, 0x1b	; 27
 854:	08 97       	sbiw	r24, 0x08	; 8
 856:	e8 f4       	brcc	.+58     	; 0x892 <Omega_slave+0xaa>
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <low+0x1>
 860:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <low>
 864:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tct+0x1>
 868:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <tct>
 86c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <input_bit+0x1>
 870:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <input_bit>
 874:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <adress_t+0x1>
 878:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <adress_t>
 87c:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <directive+0x1>
 880:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <directive>
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
	 detect[tct]=low;
 884:	20 e0       	ldi	r18, 0x00	; 0
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <detect+0x1>
 88c:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <detect>
 890:	82 c0       	rjmp	.+260    	; 0x996 <Omega_slave+0x1ae>
 {
	 
	 if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
	 if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
	 if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
 892:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <low>
 896:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <low+0x1>
 89a:	89 3e       	cpi	r24, 0xE9	; 233
 89c:	93 40       	sbci	r25, 0x03	; 3
 89e:	bc f0       	brlt	.+46     	; 0x8ce <Omega_slave+0xe6>
 8a0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tct+0x1>
 8a4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <tct>
 8a8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <input_bit+0x1>
 8ac:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <input_bit>
 8b0:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <adress_t+0x1>
 8b4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <adress_t>
 8b8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <directive+0x1>
 8bc:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <directive>
 8c0:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <external>
	 detect[tct]=low;
 8c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <detect+0x1>
 8c8:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <detect>
 8cc:	73 c0       	rjmp	.+230    	; 0x9b4 <Omega_slave+0x1cc>
 8ce:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 8d2:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 8d6:	f9 01       	movw	r30, r18
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	e1 50       	subi	r30, 0x01	; 1
 8de:	ff 4f       	sbci	r31, 0xFF	; 255
 8e0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <low>
 8e4:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <low+0x1>
 8e8:	91 83       	std	Z+1, r25	; 0x01
 8ea:	80 83       	st	Z, r24
	 
	 if (tct==8)
 8ec:	28 30       	cpi	r18, 0x08	; 8
 8ee:	31 05       	cpc	r19, r1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <Omega_slave+0x10c>
 8f2:	51 c0       	rjmp	.+162    	; 0x996 <Omega_slave+0x1ae>
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
 8f4:	ef ef       	ldi	r30, 0xFF	; 255
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	20 89       	ldd	r18, Z+16	; 0x10
 8fa:	31 89       	ldd	r19, Z+17	; 0x11
 8fc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <adress_t>
 900:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <adress_t+0x1>
 904:	82 2b       	or	r24, r18
 906:	93 2b       	or	r25, r19
 908:	24 81       	ldd	r18, Z+4	; 0x04
 90a:	35 81       	ldd	r19, Z+5	; 0x05
 90c:	00 24       	eor	r0, r0
 90e:	36 95       	lsr	r19
 910:	27 95       	ror	r18
 912:	07 94       	ror	r0
 914:	36 95       	lsr	r19
 916:	27 95       	ror	r18
 918:	07 94       	ror	r0
 91a:	32 2f       	mov	r19, r18
 91c:	20 2d       	mov	r18, r0
 91e:	82 2b       	or	r24, r18
 920:	93 2b       	or	r25, r19
 922:	26 81       	ldd	r18, Z+6	; 0x06
 924:	37 81       	ldd	r19, Z+7	; 0x07
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	22 95       	swap	r18
 92c:	32 95       	swap	r19
 92e:	30 7f       	andi	r19, 0xF0	; 240
 930:	32 27       	eor	r19, r18
 932:	20 7f       	andi	r18, 0xF0	; 240
 934:	32 27       	eor	r19, r18
 936:	82 2b       	or	r24, r18
 938:	93 2b       	or	r25, r19
 93a:	20 85       	ldd	r18, Z+8	; 0x08
 93c:	31 85       	ldd	r19, Z+9	; 0x09
 93e:	22 95       	swap	r18
 940:	32 95       	swap	r19
 942:	30 7f       	andi	r19, 0xF0	; 240
 944:	32 27       	eor	r19, r18
 946:	20 7f       	andi	r18, 0xF0	; 240
 948:	32 27       	eor	r19, r18
 94a:	82 2b       	or	r24, r18
 94c:	93 2b       	or	r25, r19
 94e:	22 85       	ldd	r18, Z+10	; 0x0a
 950:	33 85       	ldd	r19, Z+11	; 0x0b
 952:	22 0f       	add	r18, r18
 954:	33 1f       	adc	r19, r19
 956:	22 0f       	add	r18, r18
 958:	33 1f       	adc	r19, r19
 95a:	22 0f       	add	r18, r18
 95c:	33 1f       	adc	r19, r19
 95e:	82 2b       	or	r24, r18
 960:	93 2b       	or	r25, r19
 962:	24 85       	ldd	r18, Z+12	; 0x0c
 964:	35 85       	ldd	r19, Z+13	; 0x0d
 966:	22 0f       	add	r18, r18
 968:	33 1f       	adc	r19, r19
 96a:	22 0f       	add	r18, r18
 96c:	33 1f       	adc	r19, r19
 96e:	82 2b       	or	r24, r18
 970:	93 2b       	or	r25, r19
 972:	26 85       	ldd	r18, Z+14	; 0x0e
 974:	37 85       	ldd	r19, Z+15	; 0x0f
 976:	22 0f       	add	r18, r18
 978:	33 1f       	adc	r19, r19
 97a:	82 2b       	or	r24, r18
 97c:	93 2b       	or	r25, r19
 97e:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <adress_t+0x1>
 982:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <adress_t>
		 if(adress_t==0){adres_call=0;}
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	09 f0       	breq	.+2      	; 0x98c <Omega_slave+0x1a4>
 98a:	9a c0       	rjmp	.+308    	; 0xac0 <Omega_slave+0x2d8>
 98c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <adres_call+0x1>
 990:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <adres_call>
 994:	95 c0       	rjmp	.+298    	; 0xac0 <Omega_slave+0x2d8>
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 996:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <adress_t>
 99a:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <adress_t+0x1>
 99e:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <adress>
 9a2:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <adress+0x1>
 9a6:	48 17       	cp	r20, r24
 9a8:	59 07       	cpc	r21, r25
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <Omega_slave+0x1cc>
 9ac:	28 30       	cpi	r18, 0x08	; 8
 9ae:	31 05       	cpc	r19, r1
 9b0:	0c f0       	brlt	.+2      	; 0x9b4 <Omega_slave+0x1cc>
 9b2:	f5 db       	rcall	.-2070   	; 0x19e <protocol>
	 
	   
	 bit_flag=1;
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <bit_flag>
	 hi_flag=0;
 9ba:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <hi_flag>
	 low=0;
 9be:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <low+0x1>
 9c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <low>
	 temp_ID=0;
 9c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <temp_ID+0x1>
 9ca:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <temp_ID>
	 if((detect[1]==1)&&(detect[2]==0)&&(tct==2))
 9ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <detect+0x2>
 9d2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <detect+0x3>
 9d6:	01 97       	sbiw	r24, 0x01	; 1
 9d8:	11 f5       	brne	.+68     	; 0xa1e <Omega_slave+0x236>
 9da:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detect+0x4>
 9de:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <detect+0x5>
 9e2:	89 2b       	or	r24, r25
 9e4:	e1 f4       	brne	.+56     	; 0xa1e <Omega_slave+0x236>
 9e6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 9ea:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 9ee:	02 97       	sbiw	r24, 0x02	; 2
 9f0:	b1 f4       	brne	.+44     	; 0xa1e <Omega_slave+0x236>
	  {
		 adres_call=adres_call+1;
 9f2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <adres_call>
 9f6:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <adres_call+0x1>
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <adres_call+0x1>
 a00:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <adres_call>
		 if(adres_call==adress)
 a04:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <adress>
 a08:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <adress+0x1>
 a0c:	82 17       	cp	r24, r18
 a0e:	93 07       	cpc	r25, r19
 a10:	31 f4       	brne	.+12     	; 0xa1e <Omega_slave+0x236>
		    {
			 adress_t=adres_call;{  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);} 	          
 a12:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <adress_t+0x1>
 a16:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <adress_t>
 a1a:	c1 9a       	sbi	0x18, 1	; 24
 a1c:	ad 9a       	sbi	0x15, 5	; 21
		    }
	  }
		 tct=tct+1;
 a1e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 a22:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <tct+0x1>
 a2c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tct>
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 a30:	20 91 e5 00 	lds	r18, 0x00E5	; 0x8000e5 <stats>
 a34:	30 91 e6 00 	lds	r19, 0x00E6	; 0x8000e6 <stats+0x1>
 a38:	21 30       	cpi	r18, 0x01	; 1
 a3a:	31 05       	cpc	r19, r1
 a3c:	09 f4       	brne	.+2      	; 0xa40 <Omega_slave+0x258>
 a3e:	49 c0       	rjmp	.+146    	; 0xad2 <Omega_slave+0x2ea>
 a40:	10 c0       	rjmp	.+32     	; 0xa62 <Omega_slave+0x27a>
	 {
		 active =active+1;	 
 a42:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <active>
 a46:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <active+0x1>
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <active+0x1>
 a50:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <active>
		 bit_flag=0;
		 active=0;
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 a54:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <stats>
 a58:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <stats+0x1>
 a5c:	89 2b       	or	r24, r25
 a5e:	e9 f0       	breq	.+58     	; 0xa9a <Omega_slave+0x2b2>
 a60:	2d c0       	rjmp	.+90     	; 0xabc <Omega_slave+0x2d4>
	 {
		 active =active+1;	 
	 }
	 
	 
	 if (( stats ==0)&&(hi_flag==0))
 a62:	23 2b       	or	r18, r19
 a64:	59 f5       	brne	.+86     	; 0xabc <Omega_slave+0x2d4>
 a66:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <hi_flag>
 a6a:	81 11       	cpse	r24, r1
 a6c:	16 c0       	rjmp	.+44     	; 0xa9a <Omega_slave+0x2b2>
	 {
		  PORTB &=~ (1 <<PB1);                // digitalWrite(13,LOW);
 a6e:	c1 98       	cbi	0x18, 1	; 24
		  PORTC&=~ (1 <<PC5);
 a70:	ad 98       	cbi	0x15, 5	; 21
		 hi_flag=1;
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <hi_flag>
		 bit_flag=0;
 a78:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <bit_flag>
		 active=0;
 a7c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <active+0x1>
 a80:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <active>
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 a84:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <input_bit+0x1>
 a88:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <input_bit>
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 a8c:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <stats>
 a90:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <stats+0x1>
 a94:	89 2b       	or	r24, r25
 a96:	29 f0       	breq	.+10     	; 0xaa2 <Omega_slave+0x2ba>
 a98:	11 c0       	rjmp	.+34     	; 0xabc <Omega_slave+0x2d4>
 a9a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <hi_flag>
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	69 f4       	brne	.+26     	; 0xabc <Omega_slave+0x2d4>
	 {	 
		 active=0;
 aa2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <active+0x1>
 aa6:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <active>
		 low=low+1;
 aaa:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <low>
 aae:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <low+0x1>
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <low+0x1>
 ab8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <low>
	 }

	 PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
 abc:	90 98       	cbi	0x12, 0	; 18
	 
	 }
 abe:	08 95       	ret
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
		 if(adress_t==0){adres_call=0;}
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 ac0:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <adress>
 ac4:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <adress+0x1>
 ac8:	82 17       	cp	r24, r18
 aca:	93 07       	cpc	r25, r19
 acc:	09 f0       	breq	.+2      	; 0xad0 <Omega_slave+0x2e8>
 ace:	72 cf       	rjmp	.-284    	; 0x9b4 <Omega_slave+0x1cc>
 ad0:	70 cf       	rjmp	.-288    	; 0x9b2 <Omega_slave+0x1ca>
	  }
		 tct=tct+1;
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 ad2:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <bit_flag>
 ad6:	81 30       	cpi	r24, 0x01	; 1
 ad8:	09 f4       	brne	.+2      	; 0xadc <Omega_slave+0x2f4>
 ada:	b3 cf       	rjmp	.-154    	; 0xa42 <Omega_slave+0x25a>
 adc:	ef cf       	rjmp	.-34     	; 0xabc <Omega_slave+0x2d4>

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
