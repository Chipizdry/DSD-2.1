
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ae  00800062  00800062  00000baa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001897  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c20  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e1       	ldi	r30, 0x14	; 20
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 31       	cpi	r26, 0x10	; 16
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	42 d0       	rcall	.+132    	; 0xde <main>
  5a:	5a c5       	rjmp	.+2740   	; 0xb10 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_adc>:
#include "ADConverter.h"

// Функция чтения АЦП
int read_adc (unsigned char ch)
{
	ADMUX = ch; // Выбираем канал АЦП
  5e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // Запускаем преобразование
  60:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADSC))); // Ждем окончания преобразования
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <read_adc+0x4>
	ADC=(ADCL|ADCH<<8);
  66:	84 b1       	in	r24, 0x04	; 4
  68:	25 b1       	in	r18, 0x05	; 5
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	92 2b       	or	r25, r18
  6e:	95 b9       	out	0x05, r25	; 5
  70:	84 b9       	out	0x04, r24	; 4
	return(ADC); // Возвращаем значение АЦП
  72:	84 b1       	in	r24, 0x04	; 4
  74:	95 b1       	in	r25, 0x05	; 5
}
  76:	08 95       	ret

00000078 <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  78:	e1 99       	sbic	0x1c, 1	; 28
  7a:	fe cf       	rjmp	.-4      	; 0x78 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  7c:	9f bb       	out	0x1f, r25	; 31
  7e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  80:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
  82:	8d b3       	in	r24, 0x1d	; 29
}
  84:	08 95       	ret

00000086 <__vector_6>:


  //----------------Работа прерывателя таймера------------------------------------

 ISR (TIMER1_COMPA_vect)
 {
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	4f 93       	push	r20
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	  timing++;
  a8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timing>
  ac:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timing+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timing+0x1>
  b6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timing>
	  Omega_slave(); 
  ba:	b1 d3       	rcall	.+1890   	; 0x81e <Omega_slave>
  }
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
  de:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем внешнее  опорное напряжение
  e4:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8f 6d       	ori	r24, 0xDF	; 223
  ea:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(0<<ADFR); //частота предделителя
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	86 b9       	out	0x06, r24	; 6
   // ACSR |= (1 << ACD);//отключаем аналоговый компаратор
    // Настройка портов ввода/вывода
    DDRC = 0b00000000;
  f2:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00111010;
  f4:	8a e3       	ldi	r24, 0x3A	; 58
  f6:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
  f8:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 bb       	out	0x11, r24	; 17
	PORTC= 0b00000000;
  fe:	15 ba       	out	0x15, r1	; 21
	PORTD= 0b00000000;
 100:	12 ba       	out	0x12, r1	; 18
//_________________________________________________________________________________________________
    
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	88 60       	ori	r24, 0x08	; 8
 106:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 108:	89 b7       	in	r24, 0x39	; 57
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	89 bf       	out	0x39, r24	; 57
	OCR1A = 100;  //записываем в регистр число для сравнения
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9b bd       	out	0x2b, r25	; 43
 114:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
 116:	8e b5       	in	r24, 0x2e	; 46
 118:	82 60       	ori	r24, 0x02	; 2
 11a:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	
	adress=19;
 11c:	83 e1       	ldi	r24, 0x13	; 19
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <adress+0x1>
 124:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <adress>
	device_ID=25;// 157-блок коммутации ,89-СПРА ,108-БСА, 25 -СПДОТА
 128:	89 e1       	ldi	r24, 0x19	; 25
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <device_ID+0x1>
 130:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <device_ID>
//===================================================================================================================================================	
 
 
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9f df       	rcall	.-194    	; 0x78 <EEPROM_read>
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 
 delta_U=EEPROM_read(0x08);	 
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	97 df       	rcall	.-210    	; 0x78 <EEPROM_read>
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <delta_U+0x1>
 150:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
 154:	8b 97       	sbiw	r24, 0x2b	; 43
 156:	34 f0       	brlt	.+12     	; 0x164 <main+0x86>
 158:	89 e2       	ldi	r24, 0x29	; 41
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <delta_U+0x1>
 160:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <delta_U>
 delta_F=EEPROM_read(0x09);
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	87 df       	rcall	.-242    	; 0x78 <EEPROM_read>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <delta_F+0x1>
 170:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <delta_F>
 if(delta_F>42){delta_F=41;}
 174:	8b 97       	sbiw	r24, 0x2b	; 43
 176:	34 f0       	brlt	.+12     	; 0x184 <main+0xa6>
 178:	89 e2       	ldi	r24, 0x29	; 41
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <delta_F+0x1>
 180:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <delta_F>
  // fire=read_adc(0); //Чтение состояния входа ПОЖАР
// preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ



  sei();
 184:	78 94       	sei

    while (1) 
	
  {
	  
	PORTD|=(1<<PD1);
 186:	91 9a       	sbi	0x12, 1	; 18
	fire=read_adc(0); //Чтение состояния входа ПОЖАР
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	69 df       	rcall	.-302    	; 0x5e <read_adc>
 18c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <fire+0x1>
 190:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <fire>
	volts =read_adc(7); // Чтение напряжения питания 
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	63 df       	rcall	.-314    	; 0x5e <read_adc>
 198:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <volts+0x1>
 19c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <volts>
	current=read_adc(6); //Ток светодиода
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	5d df       	rcall	.-326    	; 0x5e <read_adc>
 1a4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 1a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	PORTD&=~(1<<PD1);
 1ac:	91 98       	cbi	0x12, 1	; 18
 1ae:	eb cf       	rjmp	.-42     	; 0x186 <main+0xa8>

000001b0 <protocol>:
	// PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 
	 }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
	 void protocol(void)
	 {
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
		 if (tct==13)
 1b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 1b8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 1bc:	8d 30       	cpi	r24, 0x0D	; 13
 1be:	91 05       	cpc	r25, r1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <protocol+0x14>
 1c2:	1e c3       	rjmp	.+1596   	; 0x800 <__stack+0x3a1>
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
 1c4:	c6 ee       	ldi	r28, 0xE6	; 230
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1ca:	3b 8d       	ldd	r19, Y+27	; 0x1b
 1cc:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <directive>
 1d0:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <directive+0x1>
 1d4:	82 2b       	or	r24, r18
 1d6:	93 2b       	or	r25, r19
 1d8:	2c 89       	ldd	r18, Y+20	; 0x14
 1da:	3d 89       	ldd	r19, Y+21	; 0x15
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	82 2b       	or	r24, r18
 1ea:	93 2b       	or	r25, r19
 1ec:	2e 89       	ldd	r18, Y+22	; 0x16
 1ee:	3f 89       	ldd	r19, Y+23	; 0x17
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	82 2b       	or	r24, r18
 1fa:	93 2b       	or	r25, r19
 1fc:	28 8d       	ldd	r18, Y+24	; 0x18
 1fe:	39 8d       	ldd	r19, Y+25	; 0x19
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	82 2b       	or	r24, r18
 206:	93 2b       	or	r25, r19
 208:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <directive+0x1>
 20c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <directive>
 210:	08 c0       	rjmp	.+16     	; 0x222 <protocol+0x72>
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 212:	c1 9a       	sbi	0x18, 1	; 24
 214:	ad 9a       	sbi	0x15, 5	; 21
		if(tct==13){  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}   //OWR в активном состоянии при запросе от программатора/ППКП
 216:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 21a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 21e:	0d 97       	sbiw	r24, 0x0d	; 13
 220:	11 f4       	brne	.+4      	; 0x226 <protocol+0x76>
 222:	c1 9a       	sbi	0x18, 1	; 24
 224:	c4 9a       	sbi	0x18, 4	; 24
		if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ 
 226:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 22a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 22e:	0e 97       	sbiw	r24, 0x0e	; 14
 230:	61 f4       	brne	.+24     	; 0x24a <protocol+0x9a>
 232:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stat>
 236:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stat+0x1>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	21 f0       	breq	.+8      	; 0x246 <protocol+0x96>
 23e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	b1 f4       	brne	.+44     	; 0x272 <protocol+0xc2>
 246:	c1 9a       	sbi	0x18, 1	; 24
 248:	ad 9a       	sbi	0x15, 5	; 21
		 
		 
		if(tct>=13)
 24a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 24e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 252:	8d 30       	cpi	r24, 0x0D	; 13
 254:	91 05       	cpc	r25, r1
 256:	0c f4       	brge	.+2      	; 0x25a <protocol+0xaa>
 258:	df c2       	rjmp	.+1470   	; 0x818 <__stack+0x3b9>
		{ 
			
			if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 25a:	46 97       	sbiw	r24, 0x16	; 22
 25c:	11 f4       	brne	.+4      	; 0x262 <protocol+0xb2>
 25e:	c1 9a       	sbi	0x18, 1	; 24
 260:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 262:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 266:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 26a:	4f 97       	sbiw	r24, 0x1f	; 31
 26c:	11 f4       	brne	.+4      	; 0x272 <protocol+0xc2>
 26e:	c1 9a       	sbi	0x18, 1	; 24
 270:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 272:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 276:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 27a:	88 97       	sbiw	r24, 0x28	; 40
 27c:	11 f4       	brne	.+4      	; 0x282 <protocol+0xd2>
 27e:	c1 9a       	sbi	0x18, 1	; 24
 280:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 282:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 286:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 28a:	c1 97       	sbiw	r24, 0x31	; 49
 28c:	11 f4       	brne	.+4      	; 0x292 <protocol+0xe2>
 28e:	c1 9a       	sbi	0x18, 1	; 24
 290:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 292:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 296:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 29a:	ca 97       	sbiw	r24, 0x3a	; 58
 29c:	11 f4       	brne	.+4      	; 0x2a2 <protocol+0xf2>
 29e:	c1 9a       	sbi	0x18, 1	; 24
 2a0:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2a2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2a6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2aa:	83 34       	cpi	r24, 0x43	; 67
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <protocol+0x104>
 2b0:	c1 9a       	sbi	0x18, 1	; 24
 2b2:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2b8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2bc:	8c 34       	cpi	r24, 0x4C	; 76
 2be:	91 05       	cpc	r25, r1
 2c0:	59 f4       	brne	.+22     	; 0x2d8 <protocol+0x128>
 2c2:	c1 9a       	sbi	0x18, 1	; 24
 2c4:	ad 9a       	sbi	0x15, 5	; 21
		    if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2c6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2ca:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2ce:	8c 34       	cpi	r24, 0x4C	; 76
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <protocol+0x128>
 2d4:	c1 9a       	sbi	0x18, 1	; 24
 2d6:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==85){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2dc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2e0:	85 35       	cpi	r24, 0x55	; 85
 2e2:	91 05       	cpc	r25, r1
 2e4:	11 f4       	brne	.+4      	; 0x2ea <protocol+0x13a>
 2e6:	c1 9a       	sbi	0x18, 1	; 24
 2e8:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==94){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2ee:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2f2:	8e 35       	cpi	r24, 0x5E	; 94
 2f4:	91 05       	cpc	r25, r1
 2f6:	11 f4       	brne	.+4      	; 0x2fc <protocol+0x14c>
 2f8:	c1 9a       	sbi	0x18, 1	; 24
 2fa:	ad 9a       	sbi	0x15, 5	; 21
						
							
				
		  switch(directive)
 2fc:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <directive>
 300:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <directive+0x1>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	91 05       	cpc	r25, r1
 308:	09 f4       	brne	.+2      	; 0x30c <protocol+0x15c>
 30a:	6a c0       	rjmp	.+212    	; 0x3e0 <protocol+0x230>
 30c:	1c f4       	brge	.+6      	; 0x314 <protocol+0x164>
 30e:	89 2b       	or	r24, r25
 310:	49 f0       	breq	.+18     	; 0x324 <protocol+0x174>
 312:	82 c2       	rjmp	.+1284   	; 0x818 <__stack+0x3b9>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	91 05       	cpc	r25, r1
 318:	09 f4       	brne	.+2      	; 0x31c <protocol+0x16c>
 31a:	7f c0       	rjmp	.+254    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 31c:	0e 97       	sbiw	r24, 0x0e	; 14
 31e:	09 f4       	brne	.+2      	; 0x322 <protocol+0x172>
 320:	16 c2       	rjmp	.+1068   	; 0x74e <__stack+0x2ef>
 322:	7a c2       	rjmp	.+1268   	; 0x818 <__stack+0x3b9>
		   {
			   
		   case 0 :
		   if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                 //OWR в активном состоянии при запросе от ППКП
 324:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 328:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 32c:	09 97       	sbiw	r24, 0x09	; 9
 32e:	11 f4       	brne	.+4      	; 0x334 <protocol+0x184>
 330:	c1 9a       	sbi	0x18, 1	; 24
 332:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП   
 334:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 338:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 33c:	0d 97       	sbiw	r24, 0x0d	; 13
 33e:	11 f4       	brne	.+4      	; 0x344 <protocol+0x194>
 340:	c1 9a       	sbi	0x18, 1	; 24
 342:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 344:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 348:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 34c:	0e 97       	sbiw	r24, 0x0e	; 14
 34e:	61 f4       	brne	.+24     	; 0x368 <protocol+0x1b8>
 350:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stat>
 354:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stat+0x1>
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	21 f0       	breq	.+8      	; 0x364 <protocol+0x1b4>
 35c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	91 f4       	brne	.+36     	; 0x388 <protocol+0x1d8>
 364:	c1 9a       	sbi	0x18, 1	; 24
 366:	ad 9a       	sbi	0x15, 5	; 21
			   
			   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 368:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 36c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 370:	46 97       	sbiw	r24, 0x16	; 22
 372:	11 f4       	brne	.+4      	; 0x378 <protocol+0x1c8>
 374:	c1 9a       	sbi	0x18, 1	; 24
 376:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 378:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 37c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 380:	4f 97       	sbiw	r24, 0x1f	; 31
 382:	11 f4       	brne	.+4      	; 0x388 <protocol+0x1d8>
 384:	c1 9a       	sbi	0x18, 1	; 24
 386:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 388:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 38c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 390:	88 97       	sbiw	r24, 0x28	; 40
 392:	11 f4       	brne	.+4      	; 0x398 <protocol+0x1e8>
 394:	c1 9a       	sbi	0x18, 1	; 24
 396:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 398:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 39c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3a0:	c1 97       	sbiw	r24, 0x31	; 49
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <protocol+0x1f8>
 3a4:	c1 9a       	sbi	0x18, 1	; 24
 3a6:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3ac:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3b0:	ca 97       	sbiw	r24, 0x3a	; 58
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <protocol+0x208>
 3b4:	c1 9a       	sbi	0x18, 1	; 24
 3b6:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3bc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3c0:	83 34       	cpi	r24, 0x43	; 67
 3c2:	91 05       	cpc	r25, r1
 3c4:	11 f4       	brne	.+4      	; 0x3ca <protocol+0x21a>
 3c6:	c1 9a       	sbi	0x18, 1	; 24
 3c8:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3ce:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3d2:	8c 34       	cpi	r24, 0x4C	; 76
 3d4:	91 05       	cpc	r25, r1
 3d6:	09 f0       	breq	.+2      	; 0x3da <protocol+0x22a>
 3d8:	1f c2       	rjmp	.+1086   	; 0x818 <__stack+0x3b9>
 3da:	c1 9a       	sbi	0x18, 1	; 24
 3dc:	ad 9a       	sbi	0x15, 5	; 21
 3de:	1c c2       	rjmp	.+1080   	; 0x818 <__stack+0x3b9>
			   
		   break;
		   
		   case 2 :
		  
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 3e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3e4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3e8:	0d 97       	sbiw	r24, 0x0d	; 13
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <protocol+0x240>
 3ec:	c1 9a       	sbi	0x18, 1	; 24
 3ee:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 3f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3f4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3f8:	0e 97       	sbiw	r24, 0x0e	; 14
 3fa:	09 f0       	breq	.+2      	; 0x3fe <protocol+0x24e>
 3fc:	0d c2       	rjmp	.+1050   	; 0x818 <__stack+0x3b9>
 3fe:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stat>
 402:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stat+0x1>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	29 f0       	breq	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	02 c2       	rjmp	.+1028   	; 0x818 <__stack+0x3b9>
 414:	c1 9a       	sbi	0x18, 1	; 24
 416:	ad 9a       	sbi	0x15, 5	; 21
 418:	ff c1       	rjmp	.+1022   	; 0x818 <__stack+0x3b9>
		   break;
		   
		   case 3 :
		 
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 41a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 41e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 422:	0d 97       	sbiw	r24, 0x0d	; 13
 424:	11 f4       	brne	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 426:	c1 9a       	sbi	0x18, 1	; 24
 428:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 42a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 42e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 432:	0e 97       	sbiw	r24, 0x0e	; 14
 434:	61 f4       	brne	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 436:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stat>
 43a:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stat+0x1>
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	21 f0       	breq	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 442:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 446:	82 30       	cpi	r24, 0x02	; 2
 448:	91 f4       	brne	.+36     	; 0x46e <__stack+0xf>
 44a:	c1 9a       	sbi	0x18, 1	; 24
 44c:	ad 9a       	sbi	0x15, 5	; 21
		
		   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации 
 44e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 452:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 456:	46 97       	sbiw	r24, 0x16	; 22
 458:	11 f4       	brne	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	c1 9a       	sbi	0x18, 1	; 24
 45c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 45e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 462:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 466:	4f 97       	sbiw	r24, 0x1f	; 31
 468:	11 f4       	brne	.+4      	; 0x46e <__stack+0xf>
 46a:	c1 9a       	sbi	0x18, 1	; 24
 46c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 46e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 472:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 476:	88 97       	sbiw	r24, 0x28	; 40
 478:	11 f4       	brne	.+4      	; 0x47e <__stack+0x1f>
 47a:	c1 9a       	sbi	0x18, 1	; 24
 47c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 47e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 482:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 486:	c1 97       	sbiw	r24, 0x31	; 49
 488:	11 f4       	brne	.+4      	; 0x48e <__stack+0x2f>
 48a:	c1 9a       	sbi	0x18, 1	; 24
 48c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 48e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 492:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 496:	ca 97       	sbiw	r24, 0x3a	; 58
 498:	11 f4       	brne	.+4      	; 0x49e <__stack+0x3f>
 49a:	c1 9a       	sbi	0x18, 1	; 24
 49c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 49e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4a2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4a6:	83 34       	cpi	r24, 0x43	; 67
 4a8:	91 05       	cpc	r25, r1
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__stack+0x51>
 4ac:	c1 9a       	sbi	0x18, 1	; 24
 4ae:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 4b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4b4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4b8:	8c 34       	cpi	r24, 0x4C	; 76
 4ba:	91 05       	cpc	r25, r1
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__stack+0x63>
 4be:	c1 9a       	sbi	0x18, 1	; 24
 4c0:	ad 9a       	sbi	0x15, 5	; 21
		
	   	   if((tct>=14)&&(tct<22))   //индентификатор устройства
 4c2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4c6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4ca:	9c 01       	movw	r18, r24
 4cc:	2e 50       	subi	r18, 0x0E	; 14
 4ce:	31 09       	sbc	r19, r1
 4d0:	28 30       	cpi	r18, 0x08	; 8
 4d2:	31 05       	cpc	r19, r1
 4d4:	20 f5       	brcc	.+72     	; 0x51e <__stack+0xbf>
			    {
				 temp_ID|=(device_ID>>(21-tct))&(0b1);
 4d6:	25 e1       	ldi	r18, 0x15	; 21
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	28 1b       	sub	r18, r24
 4dc:	39 0b       	sbc	r19, r25
 4de:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <device_ID>
 4e2:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <device_ID+0x1>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	95 95       	asr	r25
 4ea:	87 95       	ror	r24
 4ec:	2a 95       	dec	r18
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__stack+0x89>
 4f0:	81 70       	andi	r24, 0x01	; 1
 4f2:	99 27       	eor	r25, r25
 4f4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 4f8:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 4fc:	82 2b       	or	r24, r18
 4fe:	93 2b       	or	r25, r19
 500:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 504:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	11 f4       	brne	.+4      	; 0x510 <__stack+0xb1>
 50c:	c1 9a       	sbi	0x18, 1	; 24
 50e:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 510:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 514:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 518:	89 2b       	or	r24, r25
 51a:	09 f4       	brne	.+2      	; 0x51e <__stack+0xbf>
 51c:	c1 98       	cbi	0x18, 1	; 24
			    }  
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
 51e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 522:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 526:	4e 97       	sbiw	r24, 0x1e	; 30
 528:	e1 f4       	brne	.+56     	; 0x562 <__stack+0x103>
			{
				temp_ID|=((external)&(0b1));
 52a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 52e:	e8 2f       	mov	r30, r24
 530:	e1 70       	andi	r30, 0x01	; 1
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 538:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 53c:	e8 2b       	or	r30, r24
 53e:	f9 2b       	or	r31, r25
 540:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <temp_ID+0x1>
 544:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 548:	e1 30       	cpi	r30, 0x01	; 1
 54a:	f1 05       	cpc	r31, r1
 54c:	09 f0       	breq	.+2      	; 0x550 <__stack+0xf1>
 54e:	5c c1       	rjmp	.+696    	; 0x808 <__stack+0x3a9>
 550:	c1 9a       	sbi	0x18, 1	; 24
 552:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 554:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 558:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 55c:	89 2b       	or	r24, r25
 55e:	09 f4       	brne	.+2      	; 0x562 <__stack+0x103>
 560:	c1 98       	cbi	0x18, 1	; 24
			}	
				
				
				
		   if((tct>=34)&&(tct<36))  //ручной режим (НЕ АВТО)
 562:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 566:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 56a:	82 97       	sbiw	r24, 0x22	; 34
 56c:	02 97       	sbiw	r24, 0x02	; 2
 56e:	d0 f4       	brcc	.+52     	; 0x5a4 <__stack+0x145>
			    {
				 temp_ID|=((mode)&(0b1));
 570:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <mode>
 574:	a8 2f       	mov	r26, r24
 576:	a1 70       	andi	r26, 0x01	; 1
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 57e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 582:	a8 2b       	or	r26, r24
 584:	b9 2b       	or	r27, r25
 586:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <temp_ID+0x1>
 58a:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 58e:	11 97       	sbiw	r26, 0x01	; 1
 590:	11 f4       	brne	.+4      	; 0x596 <__stack+0x137>
 592:	c1 9a       	sbi	0x18, 1	; 24
 594:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 596:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 59a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 59e:	89 2b       	or	r24, r25
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <__stack+0x145>
 5a2:	c1 98       	cbi	0x18, 1	; 24
			    }
       ///////////////////////////////////////////////////////////////////////////// 
			if((tct>=36)&&(tct<40))  //Активация выхода -тревога
 5a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 5a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 5ac:	84 97       	sbiw	r24, 0x24	; 36
 5ae:	04 97       	sbiw	r24, 0x04	; 4
 5b0:	d8 f4       	brcc	.+54     	; 0x5e8 <__stack+0x189>
			{
				temp_ID|=((external)&(0b1));
 5b2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <external>
 5b6:	48 2f       	mov	r20, r24
 5b8:	41 70       	andi	r20, 0x01	; 1
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 5c0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 5c4:	48 2b       	or	r20, r24
 5c6:	59 2b       	or	r21, r25
 5c8:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <temp_ID+0x1>
 5cc:	40 93 79 00 	sts	0x0079, r20	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 5d0:	41 30       	cpi	r20, 0x01	; 1
 5d2:	51 05       	cpc	r21, r1
 5d4:	11 f4       	brne	.+4      	; 0x5da <__stack+0x17b>
 5d6:	c1 9a       	sbi	0x18, 1	; 24
 5d8:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 5da:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 5de:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 5e2:	89 2b       	or	r24, r25
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <__stack+0x189>
 5e6:	c1 98       	cbi	0x18, 1	; 24
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
			}
		*/	
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
 5e8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 5ec:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 5f0:	87 97       	sbiw	r24, 0x27	; 39
 5f2:	e1 f4       	brne	.+56     	; 0x62c <__stack+0x1cd>
			    {
				 temp_ID|=((receivemode)&(0b1));
 5f4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <receivemode>
 5f8:	68 2f       	mov	r22, r24
 5fa:	61 70       	andi	r22, 0x01	; 1
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 602:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 606:	68 2b       	or	r22, r24
 608:	79 2b       	or	r23, r25
 60a:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <temp_ID+0x1>
 60e:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 612:	61 30       	cpi	r22, 0x01	; 1
 614:	71 05       	cpc	r23, r1
 616:	09 f0       	breq	.+2      	; 0x61a <__stack+0x1bb>
 618:	fb c0       	rjmp	.+502    	; 0x810 <__stack+0x3b1>
 61a:	c1 9a       	sbi	0x18, 1	; 24
 61c:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 61e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 622:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 626:	89 2b       	or	r24, r25
 628:	09 f4       	brne	.+2      	; 0x62c <__stack+0x1cd>
 62a:	c1 98       	cbi	0x18, 1	; 24
			    }   
			 
		   if((tct>=51)&&(tct<57))  // Уровень фона датчика 
 62c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <tct>
 630:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <tct+0x1>
 634:	c9 01       	movw	r24, r18
 636:	c3 97       	sbiw	r24, 0x33	; 51
 638:	06 97       	sbiw	r24, 0x06	; 6
 63a:	60 f5       	brcc	.+88     	; 0x694 <__stack+0x235>
			    {
				  temp_ID|=((fire/4)>>(57-tct))&(0b1);
 63c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <fire>
 640:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <fire+0x1>
 644:	99 23       	and	r25, r25
 646:	0c f4       	brge	.+2      	; 0x64a <__stack+0x1eb>
 648:	03 96       	adiw	r24, 0x03	; 3
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	95 95       	asr	r25
 650:	87 95       	ror	r24
 652:	49 e3       	ldi	r20, 0x39	; 57
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	ba 01       	movw	r22, r20
 658:	62 1b       	sub	r22, r18
 65a:	73 0b       	sbc	r23, r19
 65c:	02 c0       	rjmp	.+4      	; 0x662 <__stack+0x203>
 65e:	95 95       	asr	r25
 660:	87 95       	ror	r24
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <__stack+0x1ff>
 666:	81 70       	andi	r24, 0x01	; 1
 668:	99 27       	eor	r25, r25
 66a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 66e:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 672:	82 2b       	or	r24, r18
 674:	93 2b       	or	r25, r19
 676:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 67a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	11 f4       	brne	.+4      	; 0x686 <__stack+0x227>
 682:	c1 9a       	sbi	0x18, 1	; 24
 684:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}          
 686:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 68a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 68e:	89 2b       	or	r24, r25
 690:	09 f4       	brne	.+2      	; 0x694 <__stack+0x235>
 692:	c1 98       	cbi	0x18, 1	; 24
			    }
				
		   if((tct>=60)&&(tct<67)) // Смещение (компенсатор)
 694:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 698:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 69c:	9c 01       	movw	r18, r24
 69e:	2c 53       	subi	r18, 0x3C	; 60
 6a0:	31 09       	sbc	r19, r1
 6a2:	27 30       	cpi	r18, 0x07	; 7
 6a4:	31 05       	cpc	r19, r1
 6a6:	20 f5       	brcc	.+72     	; 0x6f0 <__stack+0x291>
				{
				  temp_ID|=(tmp>>(66-tct))&(0b1);
 6a8:	22 e4       	ldi	r18, 0x42	; 66
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	28 1b       	sub	r18, r24
 6ae:	39 0b       	sbc	r19, r25
 6b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tmp>
 6b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tmp+0x1>
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <__stack+0x25f>
 6ba:	95 95       	asr	r25
 6bc:	87 95       	ror	r24
 6be:	2a 95       	dec	r18
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <__stack+0x25b>
 6c2:	81 70       	andi	r24, 0x01	; 1
 6c4:	99 27       	eor	r25, r25
 6c6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 6ca:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 6ce:	82 2b       	or	r24, r18
 6d0:	93 2b       	or	r25, r19
 6d2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 6d6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <__stack+0x283>
 6de:	c1 9a       	sbi	0x18, 1	; 24
 6e0:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}                
 6e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 6e6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 6ea:	89 2b       	or	r24, r25
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <__stack+0x291>
 6ee:	c1 98       	cbi	0x18, 1	; 24
				}
		   if((tct>=69)&&(tct<76))  //Температура 
 6f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 6f4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 6f8:	9c 01       	movw	r18, r24
 6fa:	25 54       	subi	r18, 0x45	; 69
 6fc:	31 09       	sbc	r19, r1
 6fe:	27 30       	cpi	r18, 0x07	; 7
 700:	31 05       	cpc	r19, r1
 702:	08 f0       	brcs	.+2      	; 0x706 <__stack+0x2a7>
 704:	89 c0       	rjmp	.+274    	; 0x818 <__stack+0x3b9>
			    {
				temp_ID|=((25)>>(75-tct))&(0b1);
 706:	2b e4       	ldi	r18, 0x4B	; 75
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	28 1b       	sub	r18, r24
 70c:	39 0b       	sbc	r19, r25
 70e:	89 e1       	ldi	r24, 0x19	; 25
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <__stack+0x2b9>
 714:	95 95       	asr	r25
 716:	87 95       	ror	r24
 718:	2a 95       	dec	r18
 71a:	e2 f7       	brpl	.-8      	; 0x714 <__stack+0x2b5>
 71c:	81 70       	andi	r24, 0x01	; 1
 71e:	99 27       	eor	r25, r25
 720:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 724:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 728:	82 2b       	or	r24, r18
 72a:	93 2b       	or	r25, r19
 72c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 730:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	11 f4       	brne	.+4      	; 0x73c <__stack+0x2dd>
 738:	c1 9a       	sbi	0x18, 1	; 24
 73a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~ (1 <<PB1);}               
 73c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 740:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 744:	89 2b       	or	r24, r25
 746:	09 f0       	breq	.+2      	; 0x74a <__stack+0x2eb>
 748:	67 c0       	rjmp	.+206    	; 0x818 <__stack+0x3b9>
 74a:	c1 98       	cbi	0x18, 1	; 24
 74c:	65 c0       	rjmp	.+202    	; 0x818 <__stack+0x3b9>
			    } 
			   
		   break;
		   
		   case 14 :
		   if(tct==13){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                 
 74e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 752:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 756:	0d 97       	sbiw	r24, 0x0d	; 13
 758:	11 f4       	brne	.+4      	; 0x75e <__stack+0x2ff>
 75a:	c1 9a       	sbi	0x18, 1	; 24
 75c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==30){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 75e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 762:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 766:	4e 97       	sbiw	r24, 0x1e	; 30
 768:	11 f4       	brne	.+4      	; 0x76e <__stack+0x30f>
 76a:	c1 9a       	sbi	0x18, 1	; 24
 76c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==45){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 76e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 772:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 776:	8d 97       	sbiw	r24, 0x2d	; 45
 778:	11 f4       	brne	.+4      	; 0x77e <__stack+0x31f>
 77a:	c1 9a       	sbi	0x18, 1	; 24
 77c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==46)
 77e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 782:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 786:	8e 97       	sbiw	r24, 0x2e	; 46
 788:	09 f0       	breq	.+2      	; 0x78c <__stack+0x32d>
 78a:	46 c0       	rjmp	.+140    	; 0x818 <__stack+0x3b9>
		   {
			   if((detect[35]==1)&&(detect[42]==1)) {external=0;}
 78c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <detect+0x46>
 790:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <detect+0x47>
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	41 f4       	brne	.+16     	; 0x7a8 <__stack+0x349>
 798:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <detect+0x54>
 79c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <detect+0x55>
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__stack+0x349>
 7a4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <external>
			   if((detect[36]==1)&&(detect[43]==1)) {external=0;}
 7a8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <detect+0x48>
 7ac:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <detect+0x49>
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	41 f4       	brne	.+16     	; 0x7c4 <__stack+0x365>
 7b4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <detect+0x56>
 7b8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <detect+0x57>
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__stack+0x365>
 7c0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <external>
			   if((detect[38]==1)&&(detect[45]==1)) {external=1;}
 7c4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <detect+0x4c>
 7c8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <detect+0x4d>
 7cc:	01 97       	sbiw	r24, 0x01	; 1
 7ce:	49 f4       	brne	.+18     	; 0x7e2 <__stack+0x383>
 7d0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <detect+0x5a>
 7d4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <detect+0x5b>
 7d8:	01 97       	sbiw	r24, 0x01	; 1
 7da:	19 f4       	brne	.+6      	; 0x7e2 <__stack+0x383>
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <external>
			   if((detect[37]==1)&&(detect[44]==1)) {external=0;}
 7e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <detect+0x4a>
 7e6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <detect+0x4b>
 7ea:	01 97       	sbiw	r24, 0x01	; 1
 7ec:	a9 f4       	brne	.+42     	; 0x818 <__stack+0x3b9>
 7ee:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <detect+0x58>
 7f2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <detect+0x59>
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	79 f4       	brne	.+30     	; 0x818 <__stack+0x3b9>
 7fa:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <external>
		   break;
		   
		 }
	  }
		 
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <__stack+0x3b9>
		 if (tct==13)
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 800:	09 97       	sbiw	r24, 0x09	; 9
 802:	09 f0       	breq	.+2      	; 0x806 <__stack+0x3a7>
 804:	10 cd       	rjmp	.-1504   	; 0x226 <protocol+0x76>
 806:	05 cd       	rjmp	.-1526   	; 0x212 <protocol+0x62>
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
			{
				temp_ID|=((external)&(0b1));
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 808:	ef 2b       	or	r30, r31
 80a:	09 f4       	brne	.+2      	; 0x80e <__stack+0x3af>
 80c:	a9 ce       	rjmp	.-686    	; 0x560 <__stack+0x101>
 80e:	ec ce       	rjmp	.-552    	; 0x5e8 <__stack+0x189>
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
			    {
				 temp_ID|=((receivemode)&(0b1));
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 810:	67 2b       	or	r22, r23
 812:	09 f4       	brne	.+2      	; 0x816 <__stack+0x3b7>
 814:	0a cf       	rjmp	.-492    	; 0x62a <__stack+0x1cb>
 816:	6c cf       	rjmp	.-296    	; 0x6f0 <__stack+0x291>
		   break;
		   
		 }
	  }
		 
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	08 95       	ret

0000081e <Omega_slave>:
 #include "Omega.h"
 void Omega_slave() {
 
 
// PORTD|= (1 <<PD0); // Вспомогательная строб-индикация состояния 
 stats= (PINB & 0b0000001); //Чтение состояния входа
 81e:	86 b3       	in	r24, 0x16	; 22
 820:	28 2f       	mov	r18, r24
 822:	21 70       	andi	r18, 0x01	; 1
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <stats+0x1>
 82a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <stats>
 stats1=(PINB & 0b0000100);
 82e:	86 b3       	in	r24, 0x16	; 22
 830:	84 70       	andi	r24, 0x04	; 4
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <stats1+0x1>
 838:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <stats1>
 if (( stats ==1)&&(bit_flag==0))
 83c:	21 30       	cpi	r18, 0x01	; 1
 83e:	31 05       	cpc	r19, r1
 840:	09 f0       	breq	.+2      	; 0x844 <Omega_slave+0x26>
 842:	29 c1       	rjmp	.+594    	; 0xa96 <Omega_slave+0x278>
 844:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <bit_flag>
 848:	81 11       	cpse	r24, r1
 84a:	5c c1       	rjmp	.+696    	; 0xb04 <Omega_slave+0x2e6>
	// if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
	// if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
	// if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
		 
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
 84c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <low>
 850:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <low+0x1>
 854:	9c 01       	movw	r18, r24
 856:	25 50       	subi	r18, 0x05	; 5
 858:	31 09       	sbc	r19, r1
 85a:	23 30       	cpi	r18, 0x03	; 3
 85c:	31 05       	cpc	r19, r1
 85e:	28 f4       	brcc	.+10     	; 0x86a <Omega_slave+0x4c>
 860:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <low+0x1>
 864:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <low>
 868:	2e c0       	rjmp	.+92     	; 0x8c6 <Omega_slave+0xa8>
	  if((10<=low)&& (low<12)){low=1;}   // интерпритация единицы
 86a:	0a 97       	sbiw	r24, 0x0a	; 10
 86c:	02 97       	sbiw	r24, 0x02	; 2
 86e:	38 f4       	brcc	.+14     	; 0x87e <Omega_slave+0x60>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <low+0x1>
 878:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <low>
 87c:	42 c0       	rjmp	.+132    	; 0x902 <Omega_slave+0xe4>
	  if((14<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
 87e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <low>
 882:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <low+0x1>
 886:	0f 97       	sbiw	r24, 0x0f	; 15
 888:	44 97       	sbiw	r24, 0x14	; 20
 88a:	e8 f4       	brcc	.+58     	; 0x8c6 <Omega_slave+0xa8>
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <low+0x1>
 894:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <low>
 898:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct+0x1>
 89c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tct>
 8a0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 8a4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
 8a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <adress_t+0x1>
 8ac:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <adress_t>
 8b0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <directive+0x1>
 8b4:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <directive>
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
	 detect[tct]=low;
 8b8:	20 e0       	ldi	r18, 0x00	; 0
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <detect+0x1>
 8c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <detect>
 8c4:	82 c0       	rjmp	.+260    	; 0x9ca <Omega_slave+0x1ac>
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
	  if((10<=low)&& (low<12)){low=1;}   // интерпритация единицы
	  if((14<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
 8c6:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <low>
 8ca:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <low+0x1>
 8ce:	89 3e       	cpi	r24, 0xE9	; 233
 8d0:	93 40       	sbci	r25, 0x03	; 3
 8d2:	bc f0       	brlt	.+46     	; 0x902 <Omega_slave+0xe4>
 8d4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct+0x1>
 8d8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tct>
 8dc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 8e0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
 8e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <adress_t+0x1>
 8e8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <adress_t>
 8ec:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <directive+0x1>
 8f0:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <directive>
 8f4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <external>
	 detect[tct]=low;
 8f8:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <detect+0x1>
 8fc:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <detect>
 900:	73 c0       	rjmp	.+230    	; 0x9e8 <Omega_slave+0x1ca>
 902:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <tct>
 906:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <tct+0x1>
 90a:	f9 01       	movw	r30, r18
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	ea 51       	subi	r30, 0x1A	; 26
 912:	ff 4f       	sbci	r31, 0xFF	; 255
 914:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <low>
 918:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <low+0x1>
 91c:	91 83       	std	Z+1, r25	; 0x01
 91e:	80 83       	st	Z, r24
	 
	 if (tct==8)
 920:	28 30       	cpi	r18, 0x08	; 8
 922:	31 05       	cpc	r19, r1
 924:	09 f0       	breq	.+2      	; 0x928 <Omega_slave+0x10a>
 926:	51 c0       	rjmp	.+162    	; 0x9ca <Omega_slave+0x1ac>
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
 928:	e6 ee       	ldi	r30, 0xE6	; 230
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	20 89       	ldd	r18, Z+16	; 0x10
 92e:	31 89       	ldd	r19, Z+17	; 0x11
 930:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <adress_t>
 934:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <adress_t+0x1>
 938:	82 2b       	or	r24, r18
 93a:	93 2b       	or	r25, r19
 93c:	24 81       	ldd	r18, Z+4	; 0x04
 93e:	35 81       	ldd	r19, Z+5	; 0x05
 940:	00 24       	eor	r0, r0
 942:	36 95       	lsr	r19
 944:	27 95       	ror	r18
 946:	07 94       	ror	r0
 948:	36 95       	lsr	r19
 94a:	27 95       	ror	r18
 94c:	07 94       	ror	r0
 94e:	32 2f       	mov	r19, r18
 950:	20 2d       	mov	r18, r0
 952:	82 2b       	or	r24, r18
 954:	93 2b       	or	r25, r19
 956:	26 81       	ldd	r18, Z+6	; 0x06
 958:	37 81       	ldd	r19, Z+7	; 0x07
 95a:	22 0f       	add	r18, r18
 95c:	33 1f       	adc	r19, r19
 95e:	22 95       	swap	r18
 960:	32 95       	swap	r19
 962:	30 7f       	andi	r19, 0xF0	; 240
 964:	32 27       	eor	r19, r18
 966:	20 7f       	andi	r18, 0xF0	; 240
 968:	32 27       	eor	r19, r18
 96a:	82 2b       	or	r24, r18
 96c:	93 2b       	or	r25, r19
 96e:	20 85       	ldd	r18, Z+8	; 0x08
 970:	31 85       	ldd	r19, Z+9	; 0x09
 972:	22 95       	swap	r18
 974:	32 95       	swap	r19
 976:	30 7f       	andi	r19, 0xF0	; 240
 978:	32 27       	eor	r19, r18
 97a:	20 7f       	andi	r18, 0xF0	; 240
 97c:	32 27       	eor	r19, r18
 97e:	82 2b       	or	r24, r18
 980:	93 2b       	or	r25, r19
 982:	22 85       	ldd	r18, Z+10	; 0x0a
 984:	33 85       	ldd	r19, Z+11	; 0x0b
 986:	22 0f       	add	r18, r18
 988:	33 1f       	adc	r19, r19
 98a:	22 0f       	add	r18, r18
 98c:	33 1f       	adc	r19, r19
 98e:	22 0f       	add	r18, r18
 990:	33 1f       	adc	r19, r19
 992:	82 2b       	or	r24, r18
 994:	93 2b       	or	r25, r19
 996:	24 85       	ldd	r18, Z+12	; 0x0c
 998:	35 85       	ldd	r19, Z+13	; 0x0d
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	22 0f       	add	r18, r18
 9a0:	33 1f       	adc	r19, r19
 9a2:	82 2b       	or	r24, r18
 9a4:	93 2b       	or	r25, r19
 9a6:	26 85       	ldd	r18, Z+14	; 0x0e
 9a8:	37 85       	ldd	r19, Z+15	; 0x0f
 9aa:	22 0f       	add	r18, r18
 9ac:	33 1f       	adc	r19, r19
 9ae:	82 2b       	or	r24, r18
 9b0:	93 2b       	or	r25, r19
 9b2:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <adress_t+0x1>
 9b6:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <adress_t>
		 if(adress_t==0){adres_call=0;}
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <Omega_slave+0x1a2>
 9be:	99 c0       	rjmp	.+306    	; 0xaf2 <Omega_slave+0x2d4>
 9c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <adres_call+0x1>
 9c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <adres_call>
 9c8:	94 c0       	rjmp	.+296    	; 0xaf2 <Omega_slave+0x2d4>
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 9ca:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <adress_t>
 9ce:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <adress_t+0x1>
 9d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <adress>
 9d6:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <adress+0x1>
 9da:	48 17       	cp	r20, r24
 9dc:	59 07       	cpc	r21, r25
 9de:	21 f4       	brne	.+8      	; 0x9e8 <Omega_slave+0x1ca>
 9e0:	28 30       	cpi	r18, 0x08	; 8
 9e2:	31 05       	cpc	r19, r1
 9e4:	0c f0       	brlt	.+2      	; 0x9e8 <Omega_slave+0x1ca>
 9e6:	e4 db       	rcall	.-2104   	; 0x1b0 <protocol>
	 
	   
	 bit_flag=1;
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <bit_flag>
	 hi_flag=0;
 9ee:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <hi_flag>
	 low=0;
 9f2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <low+0x1>
 9f6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <low>
	 temp_ID=0;
 9fa:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <temp_ID+0x1>
 9fe:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <temp_ID>
	 if((detect[1]==1)&&(detect[2]==0)&&(tct==2))
 a02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <detect+0x2>
 a06:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <detect+0x3>
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	11 f5       	brne	.+68     	; 0xa52 <Omega_slave+0x234>
 a0e:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <detect+0x4>
 a12:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <detect+0x5>
 a16:	89 2b       	or	r24, r25
 a18:	e1 f4       	brne	.+56     	; 0xa52 <Omega_slave+0x234>
 a1a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 a1e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 a22:	02 97       	sbiw	r24, 0x02	; 2
 a24:	b1 f4       	brne	.+44     	; 0xa52 <Omega_slave+0x234>
	  {
		 adres_call=adres_call+1;
 a26:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <adres_call>
 a2a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <adres_call+0x1>
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <adres_call+0x1>
 a34:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <adres_call>
		 if(adres_call==adress)
 a38:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <adress>
 a3c:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <adress+0x1>
 a40:	82 17       	cp	r24, r18
 a42:	93 07       	cpc	r25, r19
 a44:	31 f4       	brne	.+12     	; 0xa52 <Omega_slave+0x234>
		    {
			 adress_t=adres_call;{  PORTB |= (1 <<PB1); PORTB|= (1 <<PB4);} 	          
 a46:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <adress_t+0x1>
 a4a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <adress_t>
 a4e:	c1 9a       	sbi	0x18, 1	; 24
 a50:	c4 9a       	sbi	0x18, 4	; 24
		    }
	  }
		 tct=tct+1;
 a52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 a56:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <tct+0x1>
 a60:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tct>
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 a64:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <stats>
 a68:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <stats+0x1>
 a6c:	21 30       	cpi	r18, 0x01	; 1
 a6e:	31 05       	cpc	r19, r1
 a70:	09 f4       	brne	.+2      	; 0xa74 <Omega_slave+0x256>
 a72:	48 c0       	rjmp	.+144    	; 0xb04 <Omega_slave+0x2e6>
 a74:	10 c0       	rjmp	.+32     	; 0xa96 <Omega_slave+0x278>
	 {
		 active =active+1;	 
 a76:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <active>
 a7a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <active+0x1>
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <active+0x1>
 a84:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <active>
		 bit_flag=0;
		 active=0;
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 a88:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <stats>
 a8c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <stats+0x1>
 a90:	89 2b       	or	r24, r25
 a92:	e9 f0       	breq	.+58     	; 0xace <Omega_slave+0x2b0>
 a94:	08 95       	ret
	 {
		 active =active+1;	 
	 }
	 
	 
	 if (( stats ==0)&&(hi_flag==0))
 a96:	23 2b       	or	r18, r19
 a98:	d1 f5       	brne	.+116    	; 0xb0e <Omega_slave+0x2f0>
 a9a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <hi_flag>
 a9e:	81 11       	cpse	r24, r1
 aa0:	16 c0       	rjmp	.+44     	; 0xace <Omega_slave+0x2b0>
	 {
		  PORTB &=~ (1 <<PB1);                // digitalWrite(13,LOW);
 aa2:	c1 98       	cbi	0x18, 1	; 24
		  PORTB&=~ (1 <<PB4);
 aa4:	c4 98       	cbi	0x18, 4	; 24
		 hi_flag=1;
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <hi_flag>
		 bit_flag=0;
 aac:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <bit_flag>
		 active=0;
 ab0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <active+0x1>
 ab4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <active>
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ab8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 abc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 ac0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <stats>
 ac4:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <stats+0x1>
 ac8:	89 2b       	or	r24, r25
 aca:	29 f0       	breq	.+10     	; 0xad6 <Omega_slave+0x2b8>
 acc:	08 95       	ret
 ace:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <hi_flag>
 ad2:	81 30       	cpi	r24, 0x01	; 1
 ad4:	e1 f4       	brne	.+56     	; 0xb0e <Omega_slave+0x2f0>
	 {	 
		 active=0;
 ad6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <active+0x1>
 ada:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <active>
		 low=low+1;
 ade:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <low>
 ae2:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <low+0x1>
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <low+0x1>
 aec:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <low>
	 }

	// PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 
	 }
 af0:	08 95       	ret
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
		 if(adress_t==0){adres_call=0;}
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 af2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <adress>
 af6:	30 91 ba 00 	lds	r19, 0x00BA	; 0x8000ba <adress+0x1>
 afa:	82 17       	cp	r24, r18
 afc:	93 07       	cpc	r25, r19
 afe:	09 f0       	breq	.+2      	; 0xb02 <Omega_slave+0x2e4>
 b00:	73 cf       	rjmp	.-282    	; 0x9e8 <Omega_slave+0x1ca>
 b02:	71 cf       	rjmp	.-286    	; 0x9e6 <Omega_slave+0x1c8>
	  }
		 tct=tct+1;
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 b04:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <bit_flag>
 b08:	81 30       	cpi	r24, 0x01	; 1
 b0a:	09 f4       	brne	.+2      	; 0xb0e <Omega_slave+0x2f0>
 b0c:	b4 cf       	rjmp	.-152    	; 0xa76 <Omega_slave+0x258>
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
