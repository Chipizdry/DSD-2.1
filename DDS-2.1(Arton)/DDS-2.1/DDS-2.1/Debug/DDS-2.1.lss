
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ef  00800062  00800062  00001110  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021d7  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  000033f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbc  00000000  00000000  00003ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00004968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	3f c0       	rjmp	.+126    	; 0x86 <__vector_3>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	68 c0       	rjmp	.+208    	; 0xde <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ea e7       	ldi	r30, 0x7A	; 122
      3a:	f0 e1       	ldi	r31, 0x10	; 16
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a2 36       	cpi	r26, 0x62	; 98
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	22 e0       	ldi	r18, 0x02	; 2
      4a:	a2 e6       	ldi	r26, 0x62	; 98
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 35       	cpi	r26, 0x51	; 81
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	5b d0       	rcall	.+182    	; 0x110 <main>
      5a:	0d c8       	rjmp	.-4070   	; 0xfffff076 <__eeprom_end+0xff7ef076>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_adc>:
#include "ADConverter.h"

// Функция чтения АЦП
int read_adc (unsigned char ch)
{
	ADMUX = ch; // Выбираем канал АЦП
      5e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // Запускаем преобразование
      60:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADSC))); // Ждем окончания преобразования
      62:	36 99       	sbic	0x06, 6	; 6
      64:	fe cf       	rjmp	.-4      	; 0x62 <read_adc+0x4>
	ADC=(ADCL|ADCH<<8);
      66:	84 b1       	in	r24, 0x04	; 4
      68:	25 b1       	in	r18, 0x05	; 5
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	92 2b       	or	r25, r18
      6e:	95 b9       	out	0x05, r25	; 5
      70:	84 b9       	out	0x04, r24	; 4
	return(ADC); // Возвращаем значение АЦП
      72:	84 b1       	in	r24, 0x04	; 4
      74:	95 b1       	in	r25, 0x05	; 5
}
      76:	08 95       	ret

00000078 <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
      78:	e1 99       	sbic	0x1c, 1	; 28
      7a:	fe cf       	rjmp	.-4      	; 0x78 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
      7c:	9f bb       	out	0x1f, r25	; 31
      7e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
      80:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
      82:	8d b3       	in	r24, 0x1d	; 29
}
      84:	08 95       	ret

00000086 <__vector_3>:




  //----------------Работа прерывателя таймера------------------------------------
  ISR(TIMER2_COMP_vect){
      86:	1f 92       	push	r1
      88:	0f 92       	push	r0
      8a:	0f b6       	in	r0, 0x3f	; 63
      8c:	0f 92       	push	r0
      8e:	11 24       	eor	r1, r1
      90:	2f 93       	push	r18
      92:	3f 93       	push	r19
      94:	4f 93       	push	r20
      96:	5f 93       	push	r21
      98:	6f 93       	push	r22
      9a:	7f 93       	push	r23
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
      a0:	af 93       	push	r26
      a2:	bf 93       	push	r27
      a4:	ef 93       	push	r30
      a6:	ff 93       	push	r31
	 //  PORTD|= (1 <<PD1); // Вспомогательная строб-индикация состояния 
	  timing++;
      a8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <timing>
      ac:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <timing+0x1>
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <timing+0x1>
      b6:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <timing>
	  Omega_slave();  
      ba:	eb d4       	rcall	.+2518   	; 0xa92 <Omega_slave>
	// PORTD &=~ (1 <<PD1);  // Вспомогательная строб-индикация состояния  
  }
      bc:	ff 91       	pop	r31
      be:	ef 91       	pop	r30
      c0:	bf 91       	pop	r27
      c2:	af 91       	pop	r26
      c4:	9f 91       	pop	r25
      c6:	8f 91       	pop	r24
      c8:	7f 91       	pop	r23
      ca:	6f 91       	pop	r22
      cc:	5f 91       	pop	r21
      ce:	4f 91       	pop	r20
      d0:	3f 91       	pop	r19
      d2:	2f 91       	pop	r18
      d4:	0f 90       	pop	r0
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	0f 90       	pop	r0
      da:	1f 90       	pop	r1
      dc:	18 95       	reti

000000de <__vector_6>:
  
  ISR(TIMER1_COMPA_vect){
      de:	1f 92       	push	r1
      e0:	0f 92       	push	r0
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	0f 92       	push	r0
      e6:	11 24       	eor	r1, r1
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
	  PORTD|= (1 <<PD0); // Вспомогательная строб-индикация состояния 
      ec:	90 9a       	sbi	0x12, 0	; 18
	  milis++;	  
      ee:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <milis>
      f2:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <milis+0x1>
      f6:	01 96       	adiw	r24, 0x01	; 1
      f8:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <milis+0x1>
      fc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <milis>
	  PORTD &=~ (1 <<PD0);  // Вспомогательная строб-индикация состояния  
     100:	90 98       	cbi	0x12, 0	; 18
  }
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
     110:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
     112:	87 b1       	in	r24, 0x07	; 7
     114:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем опорное напряжение
     116:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
     118:	87 b1       	in	r24, 0x07	; 7
     11a:	8f 6d       	ori	r24, 0xDF	; 223
     11c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADFR); //частота предделителя
     11e:	86 b1       	in	r24, 0x06	; 6
     120:	86 62       	ori	r24, 0x26	; 38
     122:	86 b9       	out	0x06, r24	; 6
    ACSR |= (1 << ACD);//отключаем аналоговый компаратор
     124:	47 9a       	sbi	0x08, 7	; 8
    // Настройка портов ввода/вывода
    DDRC = 0b00000000;
     126:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00111010;
     128:	8a e3       	ldi	r24, 0x3A	; 58
     12a:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
     12c:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
     12e:	9f ef       	ldi	r25, 0xFF	; 255
     130:	91 bb       	out	0x11, r25	; 17
	PORTC= 0b00000000;
     132:	15 ba       	out	0x15, r1	; 21
//_________________________________________________________________________________________________

    
	TCCR1A = 0x00;
     134:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << CS12)|(0 << CS11)|(1 << CS10)|(1 << WGM12); //предделитель clk/32, режим таймера СТС
     136:	8e b5       	in	r24, 0x2e	; 46
     138:	8d 60       	ori	r24, 0x0D	; 13
     13a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
     13c:	1d bc       	out	0x2d, r1	; 45
     13e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 15625; // максимальный предел счета
     140:	29 e0       	ldi	r18, 0x09	; 9
     142:	3d e3       	ldi	r19, 0x3D	; 61
     144:	3b bd       	out	0x2b, r19	; 43
     146:	2a bd       	out	0x2a, r18	; 42
	TIMSK = (1 << OCIE1A); // разрешение прерывания по совпадению
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	89 bf       	out	0x39, r24	; 57
	
	TCCR2|=(0<<WGM20);
     14c:	85 b5       	in	r24, 0x25	; 37
     14e:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (0 << CS22)|(1 << CS21)|(0 << CS20)|(1 << WGM21); //предделитель clk/8, режим таймера СТС
     150:	85 b5       	in	r24, 0x25	; 37
     152:	8a 60       	ori	r24, 0x0A	; 10
     154:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0x00;
     156:	14 bc       	out	0x24, r1	; 36
	OCR2 = 255; // максимальный предел счета
     158:	93 bd       	out	0x23, r25	; 35
	TIMSK |= (1 << OCIE2); // разрешение прерывания по совпадению
     15a:	89 b7       	in	r24, 0x39	; 57
     15c:	80 68       	ori	r24, 0x80	; 128
     15e:	89 bf       	out	0x39, r24	; 57
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	83 ec       	ldi	r24, 0xC3	; 195
     164:	99 e0       	ldi	r25, 0x09	; 9
     166:	21 50       	subi	r18, 0x01	; 1
     168:	80 40       	sbci	r24, 0x00	; 0
     16a:	90 40       	sbci	r25, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x56>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x60>
     170:	00 00       	nop
	_delay_ms(200);
	
	
	//PIND|=0b01000000;//Подсветка дисплея 
	
	arm =0; 
     172:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <arm>
	interval=5;
     176:	85 e0       	ldi	r24, 0x05	; 5
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <interval+0x1>
     17e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <interval>
	milis=0;
     182:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <milis+0x1>
     186:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <milis>
	regim=3;      //режим работы ручной-авто
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <regim>
	flag1=0;
     190:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <flag1>
    flag2=0;
     194:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <flag2>
	flag3=0;
     198:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <flag3>
	delta_U=0;
     19c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <delta_U+0x1>
     1a0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <delta_U>
	delta_F=0;
     1a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <delta_F+0x1>
     1a8:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <delta_F>
	delta_T=0;
     1ac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <delta_T>
     1b0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <delta_T+0x1>
     1b4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <delta_T+0x2>
     1b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <delta_T+0x3>
	delta_H=0;
     1bc:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <delta_H>
     1c0:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <delta_H+0x1>
     1c4:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <delta_H+0x2>
     1c8:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <delta_H+0x3>
	pwr=0;
     1cc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <pwr+0x1>
     1d0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <pwr>
	timer_M=0;
     1d4:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <timer_M+0x1>
     1d8:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <timer_M>
	timer_U=0;
     1dc:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <timer_U+0x1>
     1e0:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <timer_U>
	test=0;
     1e4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <test+0x1>
     1e8:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <test>
	//faza_fall=0;
	revers=0;
     1ec:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <revers>
	regim_fall=0;
     1f0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <regim_fall>
	adress=19;
     1f4:	83 e1       	ldi	r24, 0x13	; 19
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <adress+0x1>
     1fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <adress>
	device_ID=157;// 157-блок коммутации ,89-СПРА ,108-БСА
     200:	8d e9       	ldi	r24, 0x9D	; 157
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <device_ID+0x1>
     208:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <device_ID>
//===================================================================================================================================================	
 regim=  EEPROM_read(0x01);    // Актуальный Рабочий режим
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	33 df       	rcall	.-410    	; 0x78 <EEPROM_read>
     212:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <regim>
 interval=EEPROM_read(0x02);   // Время ВЫХОДА НА РЕЖИМ
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2e df       	rcall	.-420    	; 0x78 <EEPROM_read>
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <interval+0x1>
     222:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <interval>
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	26 df       	rcall	.-436    	; 0x78 <EEPROM_read>
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     232:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 TypePS=EEPROM_read(0x06);     // Тип входа PS (NC/NO)
     236:	86 e0       	ldi	r24, 0x06	; 6
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	1e df       	rcall	.-452    	; 0x78 <EEPROM_read>
 if(TypePS>1){TypePS=1;}       // Определение значений по умолчанию 
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	18 f4       	brcc	.+6      	; 0x246 <main+0x136>
	device_ID=157;// 157-блок коммутации ,89-СПРА ,108-БСА
//===================================================================================================================================================	
 regim=  EEPROM_read(0x01);    // Актуальный Рабочий режим
 interval=EEPROM_read(0x02);   // Время ВЫХОДА НА РЕЖИМ
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 TypePS=EEPROM_read(0x06);     // Тип входа PS (NC/NO)
     240:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TypePS>
     244:	03 c0       	rjmp	.+6      	; 0x24c <main+0x13c>
 if(TypePS>1){TypePS=1;}       // Определение значений по умолчанию 
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TypePS>
 TypeAL=EEPROM_read(0x07);     // Тип входа AL (NC/NO)
     24c:	87 e0       	ldi	r24, 0x07	; 7
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	13 df       	rcall	.-474    	; 0x78 <EEPROM_read>
 if(TypeAL>1){TypeAL=1;}       // Определение значений по умолчанию
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	18 f4       	brcc	.+6      	; 0x25c <main+0x14c>
 regim=  EEPROM_read(0x01);    // Актуальный Рабочий режим
 interval=EEPROM_read(0x02);   // Время ВЫХОДА НА РЕЖИМ
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 TypePS=EEPROM_read(0x06);     // Тип входа PS (NC/NO)
 if(TypePS>1){TypePS=1;}       // Определение значений по умолчанию 
 TypeAL=EEPROM_read(0x07);     // Тип входа AL (NC/NO)
     256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     25a:	03 c0       	rjmp	.+6      	; 0x262 <main+0x152>
 if(TypeAL>1){TypeAL=1;}       // Определение значений по умолчанию
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 delta_U=EEPROM_read(0x08);	 
     262:	88 e0       	ldi	r24, 0x08	; 8
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	08 df       	rcall	.-496    	; 0x78 <EEPROM_read>
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <delta_U+0x1>
     26e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
     272:	8b 97       	sbiw	r24, 0x2b	; 43
     274:	34 f0       	brlt	.+12     	; 0x282 <main+0x172>
     276:	89 e2       	ldi	r24, 0x29	; 41
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <delta_U+0x1>
     27e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <delta_U>
 delta_F=EEPROM_read(0x09);
     282:	89 e0       	ldi	r24, 0x09	; 9
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	f8 de       	rcall	.-528    	; 0x78 <EEPROM_read>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <delta_F+0x1>
     28e:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <delta_F>
 if(delta_F>42){delta_F=41;}
     292:	8b 97       	sbiw	r24, 0x2b	; 43
     294:	34 f0       	brlt	.+12     	; 0x2a2 <main+0x192>
     296:	89 e2       	ldi	r24, 0x29	; 41
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <delta_F+0x1>
     29e:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <delta_F>
 adress=EEPROM_read(0x10);
     2a2:	80 e1       	ldi	r24, 0x10	; 16
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	e8 de       	rcall	.-560    	; 0x78 <EEPROM_read>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <adress+0x1>
     2ae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <adress>
 if(adress>128){adress=0;}
     2b2:	81 38       	cpi	r24, 0x81	; 129
     2b4:	91 05       	cpc	r25, r1
     2b6:	24 f0       	brlt	.+8      	; 0x2c0 <main+0x1b0>
     2b8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <adress+0x1>
     2bc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <adress>
 delta_T=EEPROM_read(0x11);
     2c0:	81 e1       	ldi	r24, 0x11	; 17
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	d9 de       	rcall	.-590    	; 0x78 <EEPROM_read>
     2c6:	68 2f       	mov	r22, r24
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	ba d5       	rcall	.+2932   	; 0xe44 <__floatunsisf>
     2d0:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <delta_T>
     2d4:	70 93 ef 00 	sts	0x00EF, r23	; 0x8000ef <delta_T+0x1>
     2d8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <delta_T+0x2>
     2dc:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <delta_T+0x3>
 if(delta_T>62){delta_T=61;}
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	48 e7       	ldi	r20, 0x78	; 120
     2e6:	52 e4       	ldi	r21, 0x42	; 66
     2e8:	3b d6       	rcall	.+3190   	; 0xf60 <__gesf2>
     2ea:	18 16       	cp	r1, r24
     2ec:	64 f4       	brge	.+24     	; 0x306 <main+0x1f6>
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	a4 e7       	ldi	r26, 0x74	; 116
     2f4:	b2 e4       	ldi	r27, 0x42	; 66
     2f6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <delta_T>
     2fa:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <delta_T+0x1>
     2fe:	a0 93 f0 00 	sts	0x00F0, r26	; 0x8000f0 <delta_T+0x2>
     302:	b0 93 f1 00 	sts	0x00F1, r27	; 0x8000f1 <delta_T+0x3>
 delta_H=EEPROM_read(0x12);
     306:	82 e1       	ldi	r24, 0x12	; 18
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	b6 de       	rcall	.-660    	; 0x78 <EEPROM_read>
     30c:	68 2f       	mov	r22, r24
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	97 d5       	rcall	.+2862   	; 0xe44 <__floatunsisf>
     316:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <delta_H>
     31a:	70 93 bc 00 	sts	0x00BC, r23	; 0x8000bc <delta_H+0x1>
     31e:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <delta_H+0x2>
     322:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <delta_H+0x3>
 if(delta_H>100){delta_T=100;}
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	48 ec       	ldi	r20, 0xC8	; 200
     32c:	52 e4       	ldi	r21, 0x42	; 66
     32e:	18 d6       	rcall	.+3120   	; 0xf60 <__gesf2>
     330:	18 16       	cp	r1, r24
     332:	64 f4       	brge	.+24     	; 0x34c <main+0x23c>
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	a8 ec       	ldi	r26, 0xC8	; 200
     33a:	b2 e4       	ldi	r27, 0x42	; 66
     33c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <delta_T>
     340:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <delta_T+0x1>
     344:	a0 93 f0 00 	sts	0x00F0, r26	; 0x8000f0 <delta_T+0x2>
     348:	b0 93 f1 00 	sts	0x00F1, r27	; 0x8000f1 <delta_T+0x3>
 dt1=EEPROM_read(0x13);//Гистерезис температуры целые градусы
     34c:	83 e1       	ldi	r24, 0x13	; 19
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	93 de       	rcall	.-730    	; 0x78 <EEPROM_read>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <dt1+0x1>
     358:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <dt1>
 dt2=EEPROM_read(0x14);//Гистерезис температуры десятые доли градуса	 
     35c:	84 e1       	ldi	r24, 0x14	; 20
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	8b de       	rcall	.-746    	; 0x78 <EEPROM_read>
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <dt2+0x1>
     368:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <dt2>
 dh1=EEPROM_read(0x15);//Гистерезис влажности целые проценты
     36c:	85 e1       	ldi	r24, 0x15	; 21
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	83 de       	rcall	.-762    	; 0x78 <EEPROM_read>
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <dh1+0x1>
     378:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <dh1>
 dh2=EEPROM_read(0x16);//Гистерезис влажности десятые проценты
     37c:	86 e1       	ldi	r24, 0x16	; 22
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	7b de       	rcall	.-778    	; 0x78 <EEPROM_read>
     382:	c8 2f       	mov	r28, r24
     384:	d0 e0       	ldi	r29, 0x00	; 0
     386:	d0 93 93 00 	sts	0x0093, r29	; 0x800093 <dh2+0x1>
     38a:	c0 93 92 00 	sts	0x0092, r28	; 0x800092 <dh2>
 dt=dt1+(dt2*0.1); 
     38e:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <dt2>
     392:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <dt2+0x1>
     396:	07 2e       	mov	r0, r23
     398:	00 0c       	add	r0, r0
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	54 d5       	rcall	.+2728   	; 0xe48 <__floatsisf>
     3a0:	2d ec       	ldi	r18, 0xCD	; 205
     3a2:	3c ec       	ldi	r19, 0xCC	; 204
     3a4:	4c ec       	ldi	r20, 0xCC	; 204
     3a6:	5d e3       	ldi	r21, 0x3D	; 61
     3a8:	df d5       	rcall	.+3006   	; 0xf68 <__mulsf3>
     3aa:	6b 01       	movw	r12, r22
     3ac:	7c 01       	movw	r14, r24
     3ae:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <dt1>
     3b2:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <dt1+0x1>
     3b6:	07 2e       	mov	r0, r23
     3b8:	00 0c       	add	r0, r0
     3ba:	88 0b       	sbc	r24, r24
     3bc:	99 0b       	sbc	r25, r25
     3be:	44 d5       	rcall	.+2696   	; 0xe48 <__floatsisf>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	d9 d4       	rcall	.+2482   	; 0xd7c <__addsf3>
     3ca:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <dt>
     3ce:	70 93 3a 02 	sts	0x023A, r23	; 0x80023a <dt+0x1>
     3d2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <dt+0x2>
     3d6:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <dt+0x3>
 dh=dh1+(dh2*0.1);
     3da:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <dh1>
     3de:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <dh1+0x1>
     3e2:	07 2e       	mov	r0, r23
     3e4:	00 0c       	add	r0, r0
     3e6:	88 0b       	sbc	r24, r24
     3e8:	99 0b       	sbc	r25, r25
     3ea:	2e d5       	rcall	.+2652   	; 0xe48 <__floatsisf>
     3ec:	6b 01       	movw	r12, r22
     3ee:	7c 01       	movw	r14, r24
     3f0:	be 01       	movw	r22, r28
     3f2:	dd 0f       	add	r29, r29
     3f4:	88 0b       	sbc	r24, r24
     3f6:	99 0b       	sbc	r25, r25
     3f8:	27 d5       	rcall	.+2638   	; 0xe48 <__floatsisf>
     3fa:	2d ec       	ldi	r18, 0xCD	; 205
     3fc:	3c ec       	ldi	r19, 0xCC	; 204
     3fe:	4c ec       	ldi	r20, 0xCC	; 204
     400:	5d e3       	ldi	r21, 0x3D	; 61
     402:	b2 d5       	rcall	.+2916   	; 0xf68 <__mulsf3>
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	b7 d4       	rcall	.+2414   	; 0xd7c <__addsf3>
     40e:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <dh>
     412:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <dh+0x1>
     416:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <dh+0x2>
     41a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <dh+0x3>
 service=0;
     41e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <service>
 fire=read_adc(0); //Чтение состояния входа ПОЖАР
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	1c de       	rcall	.-968    	; 0x5e <read_adc>
     426:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <fire+0x1>
     42a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <fire>
 preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	16 de       	rcall	.-980    	; 0x5e <read_adc>
     432:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <preasure+0x1>
     436:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <preasure>



sei();
     43a:	78 94       	sei
j=0;
     43c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <j+0x1>
     440:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <j>

    while (1) 
	
  {
	sei();
     444:	78 94       	sei
     446:	fe cf       	rjmp	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

00000448 <protocol>:
	 PORTD &=~(1 <<PD1);  // Вспомогательная строб-индикация состояния 
	 
	 }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
	 void protocol(void)
	 {
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
		 if (tct==13)
     44c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     450:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     454:	8d 30       	cpi	r24, 0x0D	; 13
     456:	91 05       	cpc	r25, r1
     458:	09 f0       	breq	.+2      	; 0x45c <protocol+0x14>
     45a:	0c c3       	rjmp	.+1560   	; 0xa74 <__stack+0x615>
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
     45c:	c7 e1       	ldi	r28, 0x17	; 23
     45e:	d1 e0       	ldi	r29, 0x01	; 1
     460:	2a 8d       	ldd	r18, Y+26	; 0x1a
     462:	3b 8d       	ldd	r19, Y+27	; 0x1b
     464:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <directive>
     468:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <directive+0x1>
     46c:	82 2b       	or	r24, r18
     46e:	93 2b       	or	r25, r19
     470:	2c 89       	ldd	r18, Y+20	; 0x14
     472:	3d 89       	ldd	r19, Y+21	; 0x15
     474:	22 0f       	add	r18, r18
     476:	33 1f       	adc	r19, r19
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	22 0f       	add	r18, r18
     47e:	33 1f       	adc	r19, r19
     480:	82 2b       	or	r24, r18
     482:	93 2b       	or	r25, r19
     484:	2e 89       	ldd	r18, Y+22	; 0x16
     486:	3f 89       	ldd	r19, Y+23	; 0x17
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	82 2b       	or	r24, r18
     492:	93 2b       	or	r25, r19
     494:	28 8d       	ldd	r18, Y+24	; 0x18
     496:	39 8d       	ldd	r19, Y+25	; 0x19
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	82 2b       	or	r24, r18
     49e:	93 2b       	or	r25, r19
     4a0:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <directive+0x1>
     4a4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <directive>
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <__stack+0x5b>
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
     4aa:	c1 9a       	sbi	0x18, 1	; 24
     4ac:	ad 9a       	sbi	0x15, 5	; 21
		if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от программатора/ППКП
     4ae:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     4b2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     4b6:	0d 97       	sbiw	r24, 0x0d	; 13
     4b8:	11 f4       	brne	.+4      	; 0x4be <__stack+0x5f>
     4ba:	c1 9a       	sbi	0x18, 1	; 24
     4bc:	ad 9a       	sbi	0x15, 5	; 21
		if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ 
     4be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     4c2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     4c6:	0e 97       	sbiw	r24, 0x0e	; 14
     4c8:	61 f4       	brne	.+24     	; 0x4e2 <__stack+0x83>
     4ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stat>
     4ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <stat+0x1>
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	21 f0       	breq	.+8      	; 0x4de <__stack+0x7f>
     4d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     4da:	82 30       	cpi	r24, 0x02	; 2
     4dc:	b1 f4       	brne	.+44     	; 0x50a <__stack+0xab>
     4de:	c1 9a       	sbi	0x18, 1	; 24
     4e0:	ad 9a       	sbi	0x15, 5	; 21
		 
		 
		if(tct>=13)
     4e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     4e6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     4ea:	8d 30       	cpi	r24, 0x0D	; 13
     4ec:	91 05       	cpc	r25, r1
     4ee:	0c f4       	brge	.+2      	; 0x4f2 <__stack+0x93>
     4f0:	cd c2       	rjmp	.+1434   	; 0xa8c <__stack+0x62d>
		{ 
			
			if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     4f2:	46 97       	sbiw	r24, 0x16	; 22
     4f4:	11 f4       	brne	.+4      	; 0x4fa <__stack+0x9b>
     4f6:	c1 9a       	sbi	0x18, 1	; 24
     4f8:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     4fa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     4fe:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     502:	4f 97       	sbiw	r24, 0x1f	; 31
     504:	11 f4       	brne	.+4      	; 0x50a <__stack+0xab>
     506:	c1 9a       	sbi	0x18, 1	; 24
     508:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     50a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     50e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     512:	88 97       	sbiw	r24, 0x28	; 40
     514:	11 f4       	brne	.+4      	; 0x51a <__stack+0xbb>
     516:	c1 9a       	sbi	0x18, 1	; 24
     518:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     51a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     51e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     522:	c1 97       	sbiw	r24, 0x31	; 49
     524:	11 f4       	brne	.+4      	; 0x52a <__stack+0xcb>
     526:	c1 9a       	sbi	0x18, 1	; 24
     528:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     52a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     52e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     532:	ca 97       	sbiw	r24, 0x3a	; 58
     534:	11 f4       	brne	.+4      	; 0x53a <__stack+0xdb>
     536:	c1 9a       	sbi	0x18, 1	; 24
     538:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     53a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     53e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     542:	83 34       	cpi	r24, 0x43	; 67
     544:	91 05       	cpc	r25, r1
     546:	11 f4       	brne	.+4      	; 0x54c <__stack+0xed>
     548:	c1 9a       	sbi	0x18, 1	; 24
     54a:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     54c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     550:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     554:	8c 34       	cpi	r24, 0x4C	; 76
     556:	91 05       	cpc	r25, r1
     558:	11 f4       	brne	.+4      	; 0x55e <__stack+0xff>
     55a:	c1 9a       	sbi	0x18, 1	; 24
     55c:	ad 9a       	sbi	0x15, 5	; 21
				
				
		  switch(directive)
     55e:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <directive>
     562:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <directive+0x1>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	91 05       	cpc	r25, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <__stack+0x10f>
     56c:	6a c0       	rjmp	.+212    	; 0x642 <__stack+0x1e3>
     56e:	1c f4       	brge	.+6      	; 0x576 <__stack+0x117>
     570:	89 2b       	or	r24, r25
     572:	49 f0       	breq	.+18     	; 0x586 <__stack+0x127>
     574:	8b c2       	rjmp	.+1302   	; 0xa8c <__stack+0x62d>
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	91 05       	cpc	r25, r1
     57a:	09 f4       	brne	.+2      	; 0x57e <__stack+0x11f>
     57c:	7f c0       	rjmp	.+254    	; 0x67c <__stack+0x21d>
     57e:	0e 97       	sbiw	r24, 0x0e	; 14
     580:	09 f4       	brne	.+2      	; 0x584 <__stack+0x125>
     582:	1f c2       	rjmp	.+1086   	; 0x9c2 <__stack+0x563>
     584:	83 c2       	rjmp	.+1286   	; 0xa8c <__stack+0x62d>
		   {
			   
		   case 0 :
		   if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                 //OWR в активном состоянии при запросе от ППКП
     586:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     58a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     58e:	09 97       	sbiw	r24, 0x09	; 9
     590:	11 f4       	brne	.+4      	; 0x596 <__stack+0x137>
     592:	c1 9a       	sbi	0x18, 1	; 24
     594:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП   
     596:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     59a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     59e:	0d 97       	sbiw	r24, 0x0d	; 13
     5a0:	11 f4       	brne	.+4      	; 0x5a6 <__stack+0x147>
     5a2:	c1 9a       	sbi	0x18, 1	; 24
     5a4:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
     5a6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     5aa:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     5ae:	0e 97       	sbiw	r24, 0x0e	; 14
     5b0:	61 f4       	brne	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stat>
     5b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <stat+0x1>
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <__stack+0x167>
     5be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 f4       	brne	.+36     	; 0x5ea <__stack+0x18b>
     5c6:	c1 9a       	sbi	0x18, 1	; 24
     5c8:	ad 9a       	sbi	0x15, 5	; 21
			   
			   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     5ca:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     5ce:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     5d2:	46 97       	sbiw	r24, 0x16	; 22
     5d4:	11 f4       	brne	.+4      	; 0x5da <__stack+0x17b>
     5d6:	c1 9a       	sbi	0x18, 1	; 24
     5d8:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     5da:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     5de:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     5e2:	4f 97       	sbiw	r24, 0x1f	; 31
     5e4:	11 f4       	brne	.+4      	; 0x5ea <__stack+0x18b>
     5e6:	c1 9a       	sbi	0x18, 1	; 24
     5e8:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     5ea:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     5ee:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     5f2:	88 97       	sbiw	r24, 0x28	; 40
     5f4:	11 f4       	brne	.+4      	; 0x5fa <__stack+0x19b>
     5f6:	c1 9a       	sbi	0x18, 1	; 24
     5f8:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     5fa:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     5fe:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     602:	c1 97       	sbiw	r24, 0x31	; 49
     604:	11 f4       	brne	.+4      	; 0x60a <__stack+0x1ab>
     606:	c1 9a       	sbi	0x18, 1	; 24
     608:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     60a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     60e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     612:	ca 97       	sbiw	r24, 0x3a	; 58
     614:	11 f4       	brne	.+4      	; 0x61a <__stack+0x1bb>
     616:	c1 9a       	sbi	0x18, 1	; 24
     618:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     61a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     61e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     622:	83 34       	cpi	r24, 0x43	; 67
     624:	91 05       	cpc	r25, r1
     626:	11 f4       	brne	.+4      	; 0x62c <__stack+0x1cd>
     628:	c1 9a       	sbi	0x18, 1	; 24
     62a:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     62c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     630:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     634:	8c 34       	cpi	r24, 0x4C	; 76
     636:	91 05       	cpc	r25, r1
     638:	09 f0       	breq	.+2      	; 0x63c <__stack+0x1dd>
     63a:	28 c2       	rjmp	.+1104   	; 0xa8c <__stack+0x62d>
     63c:	c1 9a       	sbi	0x18, 1	; 24
     63e:	ad 9a       	sbi	0x15, 5	; 21
     640:	25 c2       	rjmp	.+1098   	; 0xa8c <__stack+0x62d>
			   
		   break;
		   
		   case 2 :
		  
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
     642:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     646:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     64a:	0d 97       	sbiw	r24, 0x0d	; 13
     64c:	11 f4       	brne	.+4      	; 0x652 <__stack+0x1f3>
     64e:	c1 9a       	sbi	0x18, 1	; 24
     650:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
     652:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     656:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     65a:	0e 97       	sbiw	r24, 0x0e	; 14
     65c:	09 f0       	breq	.+2      	; 0x660 <__stack+0x201>
     65e:	16 c2       	rjmp	.+1068   	; 0xa8c <__stack+0x62d>
     660:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stat>
     664:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <stat+0x1>
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	29 f0       	breq	.+10     	; 0x676 <__stack+0x217>
     66c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     670:	82 30       	cpi	r24, 0x02	; 2
     672:	09 f0       	breq	.+2      	; 0x676 <__stack+0x217>
     674:	0b c2       	rjmp	.+1046   	; 0xa8c <__stack+0x62d>
     676:	c1 9a       	sbi	0x18, 1	; 24
     678:	ad 9a       	sbi	0x15, 5	; 21
     67a:	08 c2       	rjmp	.+1040   	; 0xa8c <__stack+0x62d>
		   break;
		   
		   case 3 :
		 
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
     67c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     680:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     684:	0d 97       	sbiw	r24, 0x0d	; 13
     686:	11 f4       	brne	.+4      	; 0x68c <__stack+0x22d>
     688:	c1 9a       	sbi	0x18, 1	; 24
     68a:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
     68c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     690:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     694:	0e 97       	sbiw	r24, 0x0e	; 14
     696:	61 f4       	brne	.+24     	; 0x6b0 <__stack+0x251>
     698:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <stat>
     69c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <stat+0x1>
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	21 f0       	breq	.+8      	; 0x6ac <__stack+0x24d>
     6a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	91 f4       	brne	.+36     	; 0x6d0 <__stack+0x271>
     6ac:	c1 9a       	sbi	0x18, 1	; 24
     6ae:	ad 9a       	sbi	0x15, 5	; 21
		
		   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации 
     6b0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     6b4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     6b8:	46 97       	sbiw	r24, 0x16	; 22
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <__stack+0x261>
     6bc:	c1 9a       	sbi	0x18, 1	; 24
     6be:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     6c0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     6c4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     6c8:	4f 97       	sbiw	r24, 0x1f	; 31
     6ca:	11 f4       	brne	.+4      	; 0x6d0 <__stack+0x271>
     6cc:	c1 9a       	sbi	0x18, 1	; 24
     6ce:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     6d0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     6d4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     6d8:	88 97       	sbiw	r24, 0x28	; 40
     6da:	11 f4       	brne	.+4      	; 0x6e0 <__stack+0x281>
     6dc:	c1 9a       	sbi	0x18, 1	; 24
     6de:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     6e0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     6e4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     6e8:	c1 97       	sbiw	r24, 0x31	; 49
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <__stack+0x291>
     6ec:	c1 9a       	sbi	0x18, 1	; 24
     6ee:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     6f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     6f4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     6f8:	ca 97       	sbiw	r24, 0x3a	; 58
     6fa:	11 f4       	brne	.+4      	; 0x700 <__stack+0x2a1>
     6fc:	c1 9a       	sbi	0x18, 1	; 24
     6fe:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     700:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     704:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     708:	83 34       	cpi	r24, 0x43	; 67
     70a:	91 05       	cpc	r25, r1
     70c:	11 f4       	brne	.+4      	; 0x712 <__stack+0x2b3>
     70e:	c1 9a       	sbi	0x18, 1	; 24
     710:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
     712:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     716:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     71a:	8c 34       	cpi	r24, 0x4C	; 76
     71c:	91 05       	cpc	r25, r1
     71e:	11 f4       	brne	.+4      	; 0x724 <__stack+0x2c5>
     720:	c1 9a       	sbi	0x18, 1	; 24
     722:	ad 9a       	sbi	0x15, 5	; 21
		
	   	   if((tct>=14)&&(tct<22))   //индентификатор устройства
     724:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     728:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     72c:	9c 01       	movw	r18, r24
     72e:	2e 50       	subi	r18, 0x0E	; 14
     730:	31 09       	sbc	r19, r1
     732:	28 30       	cpi	r18, 0x08	; 8
     734:	31 05       	cpc	r19, r1
     736:	20 f5       	brcc	.+72     	; 0x780 <__stack+0x321>
			    {
				 temp_ID|=(device_ID>>(21-tct))&(0b1);
     738:	25 e1       	ldi	r18, 0x15	; 21
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	28 1b       	sub	r18, r24
     73e:	39 0b       	sbc	r19, r25
     740:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <device_ID>
     744:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <device_ID+0x1>
     748:	02 c0       	rjmp	.+4      	; 0x74e <__stack+0x2ef>
     74a:	95 95       	asr	r25
     74c:	87 95       	ror	r24
     74e:	2a 95       	dec	r18
     750:	e2 f7       	brpl	.-8      	; 0x74a <__stack+0x2eb>
     752:	81 70       	andi	r24, 0x01	; 1
     754:	99 27       	eor	r25, r25
     756:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <temp_ID>
     75a:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <temp_ID+0x1>
     75e:	82 2b       	or	r24, r18
     760:	93 2b       	or	r25, r19
     762:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <temp_ID+0x1>
     766:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	11 f4       	brne	.+4      	; 0x772 <__stack+0x313>
     76e:	c1 9a       	sbi	0x18, 1	; 24
     770:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
     772:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     776:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     77a:	89 2b       	or	r24, r25
     77c:	09 f4       	brne	.+2      	; 0x780 <__stack+0x321>
     77e:	c1 98       	cbi	0x18, 1	; 24
			    }  
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
     780:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     784:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     788:	4e 97       	sbiw	r24, 0x1e	; 30
     78a:	e1 f4       	brne	.+56     	; 0x7c4 <__stack+0x365>
			{
				temp_ID|=((external)&(0b1));
     78c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     790:	e8 2f       	mov	r30, r24
     792:	e1 70       	andi	r30, 0x01	; 1
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     79a:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     79e:	e8 2b       	or	r30, r24
     7a0:	f9 2b       	or	r31, r25
     7a2:	f0 93 96 00 	sts	0x0096, r31	; 0x800096 <temp_ID+0x1>
     7a6:	e0 93 95 00 	sts	0x0095, r30	; 0x800095 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     7aa:	e1 30       	cpi	r30, 0x01	; 1
     7ac:	f1 05       	cpc	r31, r1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <__stack+0x353>
     7b0:	65 c1       	rjmp	.+714    	; 0xa7c <__stack+0x61d>
     7b2:	c1 9a       	sbi	0x18, 1	; 24
     7b4:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
     7b6:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     7ba:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     7be:	89 2b       	or	r24, r25
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <__stack+0x365>
     7c2:	c1 98       	cbi	0x18, 1	; 24
			}	
				
				
				
		   if((tct>=34)&&(tct<36))  //ручной режим (НЕ АВТО)
     7c4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     7c8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     7cc:	82 97       	sbiw	r24, 0x22	; 34
     7ce:	02 97       	sbiw	r24, 0x02	; 2
     7d0:	d0 f4       	brcc	.+52     	; 0x806 <__stack+0x3a7>
			    {
				 temp_ID|=((mode)&(0b1));
     7d2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <mode>
     7d6:	a8 2f       	mov	r26, r24
     7d8:	a1 70       	andi	r26, 0x01	; 1
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     7e0:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     7e4:	a8 2b       	or	r26, r24
     7e6:	b9 2b       	or	r27, r25
     7e8:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <temp_ID+0x1>
     7ec:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <__stack+0x399>
     7f4:	c1 9a       	sbi	0x18, 1	; 24
     7f6:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
     7f8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     7fc:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     800:	89 2b       	or	r24, r25
     802:	09 f4       	brne	.+2      	; 0x806 <__stack+0x3a7>
     804:	c1 98       	cbi	0x18, 1	; 24
			    }
       ///////////////////////////////////////////////////////////////////////////// 
			if((tct>=36)&&(tct<40))  //Активация выхода -тревога
     806:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     80a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     80e:	84 97       	sbiw	r24, 0x24	; 36
     810:	04 97       	sbiw	r24, 0x04	; 4
     812:	d8 f4       	brcc	.+54     	; 0x84a <__stack+0x3eb>
			{
				temp_ID|=((external)&(0b1));
     814:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <external>
     818:	48 2f       	mov	r20, r24
     81a:	41 70       	andi	r20, 0x01	; 1
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     822:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     826:	48 2b       	or	r20, r24
     828:	59 2b       	or	r21, r25
     82a:	50 93 96 00 	sts	0x0096, r21	; 0x800096 <temp_ID+0x1>
     82e:	40 93 95 00 	sts	0x0095, r20	; 0x800095 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     832:	41 30       	cpi	r20, 0x01	; 1
     834:	51 05       	cpc	r21, r1
     836:	11 f4       	brne	.+4      	; 0x83c <__stack+0x3dd>
     838:	c1 9a       	sbi	0x18, 1	; 24
     83a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
     83c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     840:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     844:	89 2b       	or	r24, r25
     846:	09 f4       	brne	.+2      	; 0x84a <__stack+0x3eb>
     848:	c1 98       	cbi	0x18, 1	; 24
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
			}
		*/	
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
     84a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     84e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     852:	87 97       	sbiw	r24, 0x27	; 39
     854:	e1 f4       	brne	.+56     	; 0x88e <__stack+0x42f>
			    {
				 temp_ID|=((receivemode)&(0b1));
     856:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <receivemode>
     85a:	68 2f       	mov	r22, r24
     85c:	61 70       	andi	r22, 0x01	; 1
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     864:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     868:	68 2b       	or	r22, r24
     86a:	79 2b       	or	r23, r25
     86c:	70 93 96 00 	sts	0x0096, r23	; 0x800096 <temp_ID+0x1>
     870:	60 93 95 00 	sts	0x0095, r22	; 0x800095 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     874:	61 30       	cpi	r22, 0x01	; 1
     876:	71 05       	cpc	r23, r1
     878:	09 f0       	breq	.+2      	; 0x87c <__stack+0x41d>
     87a:	04 c1       	rjmp	.+520    	; 0xa84 <__stack+0x625>
     87c:	c1 9a       	sbi	0x18, 1	; 24
     87e:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
     880:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     884:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     888:	89 2b       	or	r24, r25
     88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x42f>
     88c:	c1 98       	cbi	0x18, 1	; 24
			    }   
			 
		   if((tct>=51)&&(tct<57))  //состояние АЦП входа AL
     88e:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <tct>
     892:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <tct+0x1>
     896:	c9 01       	movw	r24, r18
     898:	c3 97       	sbiw	r24, 0x33	; 51
     89a:	06 97       	sbiw	r24, 0x06	; 6
     89c:	60 f5       	brcc	.+88     	; 0x8f6 <__stack+0x497>
			    {
				  temp_ID|=((fire/4)>>(57-tct))&(0b1);
     89e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <fire>
     8a2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <fire+0x1>
     8a6:	99 23       	and	r25, r25
     8a8:	0c f4       	brge	.+2      	; 0x8ac <__stack+0x44d>
     8aa:	03 96       	adiw	r24, 0x03	; 3
     8ac:	95 95       	asr	r25
     8ae:	87 95       	ror	r24
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	49 e3       	ldi	r20, 0x39	; 57
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	ba 01       	movw	r22, r20
     8ba:	62 1b       	sub	r22, r18
     8bc:	73 0b       	sbc	r23, r19
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x465>
     8c0:	95 95       	asr	r25
     8c2:	87 95       	ror	r24
     8c4:	6a 95       	dec	r22
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x461>
     8c8:	81 70       	andi	r24, 0x01	; 1
     8ca:	99 27       	eor	r25, r25
     8cc:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <temp_ID>
     8d0:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <temp_ID+0x1>
     8d4:	82 2b       	or	r24, r18
     8d6:	93 2b       	or	r25, r19
     8d8:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <temp_ID+0x1>
     8dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <__stack+0x489>
     8e4:	c1 9a       	sbi	0x18, 1	; 24
     8e6:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}          
     8e8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     8ec:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     8f0:	89 2b       	or	r24, r25
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <__stack+0x497>
     8f4:	c1 98       	cbi	0x18, 1	; 24
			    }
				
		   if((tct>=60)&&(tct<67)) // температура
     8f6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     8fa:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     8fe:	9c 01       	movw	r18, r24
     900:	2c 53       	subi	r18, 0x3C	; 60
     902:	31 09       	sbc	r19, r1
     904:	27 30       	cpi	r18, 0x07	; 7
     906:	31 05       	cpc	r19, r1
     908:	20 f5       	brcc	.+72     	; 0x952 <__stack+0x4f3>
				{
				  temp_ID|=(tmp>>(66-tct))&(0b1);
     90a:	22 e4       	ldi	r18, 0x42	; 66
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	28 1b       	sub	r18, r24
     910:	39 0b       	sbc	r19, r25
     912:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tmp>
     916:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <tmp+0x1>
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x4c1>
     91c:	95 95       	asr	r25
     91e:	87 95       	ror	r24
     920:	2a 95       	dec	r18
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0x4bd>
     924:	81 70       	andi	r24, 0x01	; 1
     926:	99 27       	eor	r25, r25
     928:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <temp_ID>
     92c:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <temp_ID+0x1>
     930:	82 2b       	or	r24, r18
     932:	93 2b       	or	r25, r19
     934:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <temp_ID+0x1>
     938:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	11 f4       	brne	.+4      	; 0x944 <__stack+0x4e5>
     940:	c1 9a       	sbi	0x18, 1	; 24
     942:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}                
     944:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     948:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     94c:	89 2b       	or	r24, r25
     94e:	09 f4       	brne	.+2      	; 0x952 <__stack+0x4f3>
     950:	c1 98       	cbi	0x18, 1	; 24
				}
		   if((tct>=69)&&(tct<76))  //состояние АЦП входа PS
     952:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <tct>
     956:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <tct+0x1>
     95a:	c9 01       	movw	r24, r18
     95c:	85 54       	subi	r24, 0x45	; 69
     95e:	91 09       	sbc	r25, r1
     960:	07 97       	sbiw	r24, 0x07	; 7
     962:	08 f0       	brcs	.+2      	; 0x966 <__stack+0x507>
     964:	93 c0       	rjmp	.+294    	; 0xa8c <__stack+0x62d>
			    {
				temp_ID|=((preasure/4)>>(75-tct))&(0b1);
     966:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <preasure>
     96a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <preasure+0x1>
     96e:	99 23       	and	r25, r25
     970:	0c f4       	brge	.+2      	; 0x974 <__stack+0x515>
     972:	03 96       	adiw	r24, 0x03	; 3
     974:	95 95       	asr	r25
     976:	87 95       	ror	r24
     978:	95 95       	asr	r25
     97a:	87 95       	ror	r24
     97c:	4b e4       	ldi	r20, 0x4B	; 75
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	ba 01       	movw	r22, r20
     982:	62 1b       	sub	r22, r18
     984:	73 0b       	sbc	r23, r19
     986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x52d>
     988:	95 95       	asr	r25
     98a:	87 95       	ror	r24
     98c:	6a 95       	dec	r22
     98e:	e2 f7       	brpl	.-8      	; 0x988 <__stack+0x529>
     990:	81 70       	andi	r24, 0x01	; 1
     992:	99 27       	eor	r25, r25
     994:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <temp_ID>
     998:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <temp_ID+0x1>
     99c:	82 2b       	or	r24, r18
     99e:	93 2b       	or	r25, r19
     9a0:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <temp_ID+0x1>
     9a4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <__stack+0x551>
     9ac:	c1 9a       	sbi	0x18, 1	; 24
     9ae:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~ (1 <<PB1);}               
     9b0:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <temp_ID>
     9b4:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <temp_ID+0x1>
     9b8:	89 2b       	or	r24, r25
     9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0x55f>
     9bc:	67 c0       	rjmp	.+206    	; 0xa8c <__stack+0x62d>
     9be:	c1 98       	cbi	0x18, 1	; 24
     9c0:	65 c0       	rjmp	.+202    	; 0xa8c <__stack+0x62d>
			    } 
			   
		   break;
		   
		   case 14 :
		   if(tct==13){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                 
     9c2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     9c6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     9ca:	0d 97       	sbiw	r24, 0x0d	; 13
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <__stack+0x573>
     9ce:	c1 9a       	sbi	0x18, 1	; 24
     9d0:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==30){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     9d2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     9d6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     9da:	4e 97       	sbiw	r24, 0x1e	; 30
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <__stack+0x583>
     9de:	c1 9a       	sbi	0x18, 1	; 24
     9e0:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==45){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
     9e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     9e6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     9ea:	8d 97       	sbiw	r24, 0x2d	; 45
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <__stack+0x593>
     9ee:	c1 9a       	sbi	0x18, 1	; 24
     9f0:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==46)
     9f2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     9f6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     9fa:	8e 97       	sbiw	r24, 0x2e	; 46
     9fc:	09 f0       	breq	.+2      	; 0xa00 <__stack+0x5a1>
     9fe:	46 c0       	rjmp	.+140    	; 0xa8c <__stack+0x62d>
		   {
			   if((detect[35]==1)&&(detect[42]==1)) {external=0;}
     a00:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <detect+0x46>
     a04:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <detect+0x47>
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	41 f4       	brne	.+16     	; 0xa1c <__stack+0x5bd>
     a0c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <detect+0x54>
     a10:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <detect+0x55>
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	11 f4       	brne	.+4      	; 0xa1c <__stack+0x5bd>
     a18:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <external>
			   if((detect[36]==1)&&(detect[43]==1)) {external=0;}
     a1c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <detect+0x48>
     a20:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <detect+0x49>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	41 f4       	brne	.+16     	; 0xa38 <__stack+0x5d9>
     a28:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <detect+0x56>
     a2c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <detect+0x57>
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	11 f4       	brne	.+4      	; 0xa38 <__stack+0x5d9>
     a34:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <external>
			   if((detect[38]==1)&&(detect[45]==1)) {external=1;}
     a38:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <detect+0x4c>
     a3c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <detect+0x4d>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	49 f4       	brne	.+18     	; 0xa56 <__stack+0x5f7>
     a44:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <detect+0x5a>
     a48:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <detect+0x5b>
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	19 f4       	brne	.+6      	; 0xa56 <__stack+0x5f7>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <external>
			   if((detect[37]==1)&&(detect[44]==1)) {external=0;}
     a56:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <detect+0x4a>
     a5a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <detect+0x4b>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	a9 f4       	brne	.+42     	; 0xa8c <__stack+0x62d>
     a62:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <detect+0x58>
     a66:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <detect+0x59>
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	79 f4       	brne	.+30     	; 0xa8c <__stack+0x62d>
     a6e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <external>
		   break;
		   
		 }
	  }
		 
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <__stack+0x62d>
		 if (tct==13)
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
     a74:	09 97       	sbiw	r24, 0x09	; 9
     a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x61b>
     a78:	22 cd       	rjmp	.-1468   	; 0x4be <__stack+0x5f>
     a7a:	17 cd       	rjmp	.-1490   	; 0x4aa <__stack+0x4b>
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
			{
				temp_ID|=((external)&(0b1));
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
     a7c:	ef 2b       	or	r30, r31
     a7e:	09 f4       	brne	.+2      	; 0xa82 <__stack+0x623>
     a80:	a0 ce       	rjmp	.-704    	; 0x7c2 <__stack+0x363>
     a82:	e3 ce       	rjmp	.-570    	; 0x84a <__stack+0x3eb>
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
			    {
				 temp_ID|=((receivemode)&(0b1));
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
     a84:	67 2b       	or	r22, r23
     a86:	09 f4       	brne	.+2      	; 0xa8a <__stack+0x62b>
     a88:	01 cf       	rjmp	.-510    	; 0x88c <__stack+0x42d>
     a8a:	63 cf       	rjmp	.-314    	; 0x952 <__stack+0x4f3>
		   break;
		   
		 }
	  }
		 
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <Omega_slave>:

 #include "Omega.h"
 void Omega_slave() {
 
 
 PORTD|= (1 <<PD1); // Вспомогательная строб-индикация состояния 
     a92:	91 9a       	sbi	0x12, 1	; 18
 stats=(PINB & 0b0000001); //Чтение состояния входа
     a94:	26 b3       	in	r18, 0x16	; 22
     a96:	82 2f       	mov	r24, r18
     a98:	81 70       	andi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <stats+0x1>
     aa0:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <stats>

 if (( stats ==1)&&(bit_flag==0))
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	91 05       	cpc	r25, r1
     aa8:	09 f0       	breq	.+2      	; 0xaac <Omega_slave+0x1a>
     aaa:	29 c1       	rjmp	.+594    	; 0xcfe <Omega_slave+0x26c>
     aac:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <bit_flag>
     ab0:	81 11       	cpse	r24, r1
     ab2:	5d c1       	rjmp	.+698    	; 0xd6e <Omega_slave+0x2dc>
 {
	 
	 if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
     ab4:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <low>
     ab8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <low+0x1>
     abc:	9c 01       	movw	r18, r24
     abe:	29 50       	subi	r18, 0x09	; 9
     ac0:	31 09       	sbc	r19, r1
     ac2:	22 30       	cpi	r18, 0x02	; 2
     ac4:	31 05       	cpc	r19, r1
     ac6:	28 f4       	brcc	.+10     	; 0xad2 <Omega_slave+0x40>
     ac8:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <low+0x1>
     acc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <low>
     ad0:	2e c0       	rjmp	.+92     	; 0xb2e <Omega_slave+0x9c>
	 if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
     ad2:	42 97       	sbiw	r24, 0x12	; 18
     ad4:	03 97       	sbiw	r24, 0x03	; 3
     ad6:	38 f4       	brcc	.+14     	; 0xae6 <Omega_slave+0x54>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <low+0x1>
     ae0:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <low>
     ae4:	42 c0       	rjmp	.+132    	; 0xb6a <Omega_slave+0xd8>
	 if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
     ae6:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <low>
     aea:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <low+0x1>
     aee:	4b 97       	sbiw	r24, 0x1b	; 27
     af0:	08 97       	sbiw	r24, 0x08	; 8
     af2:	e8 f4       	brcc	.+58     	; 0xb2e <Omega_slave+0x9c>
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <low+0x1>
     afc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <low>
     b00:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <tct+0x1>
     b04:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct>
     b08:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <input_bit+0x1>
     b0c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <input_bit>
     b10:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <adress_t+0x1>
     b14:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <adress_t>
     b18:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <directive+0x1>
     b1c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <directive>
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
	 detect[tct]=low;
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <detect+0x1>
     b28:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <detect>
     b2c:	82 c0       	rjmp	.+260    	; 0xc32 <Omega_slave+0x1a0>
 {
	 
	 if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
	 if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
	 if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
     b2e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <low>
     b32:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <low+0x1>
     b36:	89 3e       	cpi	r24, 0xE9	; 233
     b38:	93 40       	sbci	r25, 0x03	; 3
     b3a:	bc f0       	brlt	.+46     	; 0xb6a <Omega_slave+0xd8>
     b3c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <tct+0x1>
     b40:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct>
     b44:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <input_bit+0x1>
     b48:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <input_bit>
     b4c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <adress_t+0x1>
     b50:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <adress_t>
     b54:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <directive+0x1>
     b58:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <directive>
     b5c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <external>
	 detect[tct]=low;
     b60:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <detect+0x1>
     b64:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <detect>
     b68:	73 c0       	rjmp	.+230    	; 0xc50 <Omega_slave+0x1be>
     b6a:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <tct>
     b6e:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <tct+0x1>
     b72:	f9 01       	movw	r30, r18
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e9 5e       	subi	r30, 0xE9	; 233
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <low>
     b80:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <low+0x1>
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
	 
	 if (tct==8)
     b88:	28 30       	cpi	r18, 0x08	; 8
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <Omega_slave+0xfe>
     b8e:	51 c0       	rjmp	.+162    	; 0xc32 <Omega_slave+0x1a0>
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
     b90:	e7 e1       	ldi	r30, 0x17	; 23
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	20 89       	ldd	r18, Z+16	; 0x10
     b96:	31 89       	ldd	r19, Z+17	; 0x11
     b98:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <adress_t>
     b9c:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <adress_t+0x1>
     ba0:	82 2b       	or	r24, r18
     ba2:	93 2b       	or	r25, r19
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	00 24       	eor	r0, r0
     baa:	36 95       	lsr	r19
     bac:	27 95       	ror	r18
     bae:	07 94       	ror	r0
     bb0:	36 95       	lsr	r19
     bb2:	27 95       	ror	r18
     bb4:	07 94       	ror	r0
     bb6:	32 2f       	mov	r19, r18
     bb8:	20 2d       	mov	r18, r0
     bba:	82 2b       	or	r24, r18
     bbc:	93 2b       	or	r25, r19
     bbe:	26 81       	ldd	r18, Z+6	; 0x06
     bc0:	37 81       	ldd	r19, Z+7	; 0x07
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	22 95       	swap	r18
     bc8:	32 95       	swap	r19
     bca:	30 7f       	andi	r19, 0xF0	; 240
     bcc:	32 27       	eor	r19, r18
     bce:	20 7f       	andi	r18, 0xF0	; 240
     bd0:	32 27       	eor	r19, r18
     bd2:	82 2b       	or	r24, r18
     bd4:	93 2b       	or	r25, r19
     bd6:	20 85       	ldd	r18, Z+8	; 0x08
     bd8:	31 85       	ldd	r19, Z+9	; 0x09
     bda:	22 95       	swap	r18
     bdc:	32 95       	swap	r19
     bde:	30 7f       	andi	r19, 0xF0	; 240
     be0:	32 27       	eor	r19, r18
     be2:	20 7f       	andi	r18, 0xF0	; 240
     be4:	32 27       	eor	r19, r18
     be6:	82 2b       	or	r24, r18
     be8:	93 2b       	or	r25, r19
     bea:	22 85       	ldd	r18, Z+10	; 0x0a
     bec:	33 85       	ldd	r19, Z+11	; 0x0b
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	82 2b       	or	r24, r18
     bfc:	93 2b       	or	r25, r19
     bfe:	24 85       	ldd	r18, Z+12	; 0x0c
     c00:	35 85       	ldd	r19, Z+13	; 0x0d
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	22 0f       	add	r18, r18
     c08:	33 1f       	adc	r19, r19
     c0a:	82 2b       	or	r24, r18
     c0c:	93 2b       	or	r25, r19
     c0e:	26 85       	ldd	r18, Z+14	; 0x0e
     c10:	37 85       	ldd	r19, Z+15	; 0x0f
     c12:	22 0f       	add	r18, r18
     c14:	33 1f       	adc	r19, r19
     c16:	82 2b       	or	r24, r18
     c18:	93 2b       	or	r25, r19
     c1a:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <adress_t+0x1>
     c1e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <adress_t>
		 if(adress_t==0){adres_call=0;}
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	09 f0       	breq	.+2      	; 0xc28 <Omega_slave+0x196>
     c26:	9a c0       	rjmp	.+308    	; 0xd5c <Omega_slave+0x2ca>
     c28:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <adres_call+0x1>
     c2c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <adres_call>
     c30:	95 c0       	rjmp	.+298    	; 0xd5c <Omega_slave+0x2ca>
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
     c32:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <adress_t>
     c36:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <adress_t+0x1>
     c3a:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <adress>
     c3e:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <adress+0x1>
     c42:	48 17       	cp	r20, r24
     c44:	59 07       	cpc	r21, r25
     c46:	21 f4       	brne	.+8      	; 0xc50 <Omega_slave+0x1be>
     c48:	28 30       	cpi	r18, 0x08	; 8
     c4a:	31 05       	cpc	r19, r1
     c4c:	0c f0       	brlt	.+2      	; 0xc50 <Omega_slave+0x1be>
     c4e:	fc db       	rcall	.-2056   	; 0x448 <protocol>
	 
	   
	 bit_flag=1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <bit_flag>
	 hi_flag=0;
     c56:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <hi_flag>
	 low=0;
     c5a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <low+0x1>
     c5e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <low>
	 temp_ID=0;
     c62:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <temp_ID+0x1>
     c66:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <temp_ID>
	 if((detect[1]==1)&&(detect[2]==0)&&(tct==2))
     c6a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <detect+0x2>
     c6e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <detect+0x3>
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	11 f5       	brne	.+68     	; 0xcba <Omega_slave+0x228>
     c76:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <detect+0x4>
     c7a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <detect+0x5>
     c7e:	89 2b       	or	r24, r25
     c80:	e1 f4       	brne	.+56     	; 0xcba <Omega_slave+0x228>
     c82:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     c86:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     c8a:	02 97       	sbiw	r24, 0x02	; 2
     c8c:	b1 f4       	brne	.+44     	; 0xcba <Omega_slave+0x228>
	  {
		 adres_call=adres_call+1;
     c8e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <adres_call>
     c92:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <adres_call+0x1>
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <adres_call+0x1>
     c9c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <adres_call>
		 if(adres_call==adress)
     ca0:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <adress>
     ca4:	30 91 ea 00 	lds	r19, 0x00EA	; 0x8000ea <adress+0x1>
     ca8:	82 17       	cp	r24, r18
     caa:	93 07       	cpc	r25, r19
     cac:	31 f4       	brne	.+12     	; 0xcba <Omega_slave+0x228>
		    {
			 adress_t=adres_call;{  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);} 	          
     cae:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <adress_t+0x1>
     cb2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <adress_t>
     cb6:	c1 9a       	sbi	0x18, 1	; 24
     cb8:	ad 9a       	sbi	0x15, 5	; 21
		    }
	  }
		 tct=tct+1;
     cba:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tct>
     cbe:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <tct+0x1>
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <tct+0x1>
     cc8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <tct>
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
     ccc:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <stats>
     cd0:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <stats+0x1>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <Omega_slave+0x24a>
     cda:	49 c0       	rjmp	.+146    	; 0xd6e <Omega_slave+0x2dc>
     cdc:	10 c0       	rjmp	.+32     	; 0xcfe <Omega_slave+0x26c>
	 {
		 active =active+1;	 
     cde:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <active>
     ce2:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <active+0x1>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <active+0x1>
     cec:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <active>
		 bit_flag=0;
		 active=0;
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
     cf0:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <stats>
     cf4:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <stats+0x1>
     cf8:	89 2b       	or	r24, r25
     cfa:	e9 f0       	breq	.+58     	; 0xd36 <Omega_slave+0x2a4>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <Omega_slave+0x2c6>
	 {
		 active =active+1;	 
	 }
	 
	 
	 if (( stats ==0)&&(hi_flag==0))
     cfe:	89 2b       	or	r24, r25
     d00:	59 f5       	brne	.+86     	; 0xd58 <Omega_slave+0x2c6>
     d02:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <hi_flag>
     d06:	81 11       	cpse	r24, r1
     d08:	16 c0       	rjmp	.+44     	; 0xd36 <Omega_slave+0x2a4>
	 {
		  PORTB &=~ (1 <<PB1);                // digitalWrite(13,LOW);
     d0a:	c1 98       	cbi	0x18, 1	; 24
		  PORTC&=~ (1 <<PC5);
     d0c:	ad 98       	cbi	0x15, 5	; 21
		 hi_flag=1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <hi_flag>
		 bit_flag=0;
     d14:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <bit_flag>
		 active=0;
     d18:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <active+0x1>
     d1c:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <active>
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     d20:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <input_bit+0x1>
     d24:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <input_bit>
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
     d28:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <stats>
     d2c:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <stats+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	29 f0       	breq	.+10     	; 0xd3e <Omega_slave+0x2ac>
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <Omega_slave+0x2c6>
     d36:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <hi_flag>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	69 f4       	brne	.+26     	; 0xd58 <Omega_slave+0x2c6>
	 {	 
		 active=0;
     d3e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <active+0x1>
     d42:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <active>
		 low=low+1;
     d46:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <low>
     d4a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <low+0x1>
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <low+0x1>
     d54:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <low>
	 }

	 PORTD &=~(1 <<PD1);  // Вспомогательная строб-индикация состояния 
     d58:	91 98       	cbi	0x12, 1	; 18
	 
	 }
     d5a:	08 95       	ret
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
		 if(adress_t==0){adres_call=0;}
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
     d5c:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <adress>
     d60:	30 91 ea 00 	lds	r19, 0x00EA	; 0x8000ea <adress+0x1>
     d64:	82 17       	cp	r24, r18
     d66:	93 07       	cpc	r25, r19
     d68:	09 f0       	breq	.+2      	; 0xd6c <Omega_slave+0x2da>
     d6a:	72 cf       	rjmp	.-284    	; 0xc50 <Omega_slave+0x1be>
     d6c:	70 cf       	rjmp	.-288    	; 0xc4e <Omega_slave+0x1bc>
	  }
		 tct=tct+1;
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
     d6e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <bit_flag>
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	09 f4       	brne	.+2      	; 0xd78 <Omega_slave+0x2e6>
     d76:	b3 cf       	rjmp	.-154    	; 0xcde <Omega_slave+0x24c>
     d78:	ef cf       	rjmp	.-34     	; 0xd58 <Omega_slave+0x2c6>

00000d7a <__subsf3>:
     d7a:	50 58       	subi	r21, 0x80	; 128

00000d7c <__addsf3>:
     d7c:	bb 27       	eor	r27, r27
     d7e:	aa 27       	eor	r26, r26
     d80:	0e d0       	rcall	.+28     	; 0xd9e <__addsf3x>
     d82:	b4 c0       	rjmp	.+360    	; 0xeec <__fp_round>
     d84:	a5 d0       	rcall	.+330    	; 0xed0 <__fp_pscA>
     d86:	30 f0       	brcs	.+12     	; 0xd94 <__addsf3+0x18>
     d88:	aa d0       	rcall	.+340    	; 0xede <__fp_pscB>
     d8a:	20 f0       	brcs	.+8      	; 0xd94 <__addsf3+0x18>
     d8c:	31 f4       	brne	.+12     	; 0xd9a <__addsf3+0x1e>
     d8e:	9f 3f       	cpi	r25, 0xFF	; 255
     d90:	11 f4       	brne	.+4      	; 0xd96 <__addsf3+0x1a>
     d92:	1e f4       	brtc	.+6      	; 0xd9a <__addsf3+0x1e>
     d94:	9a c0       	rjmp	.+308    	; 0xeca <__fp_nan>
     d96:	0e f4       	brtc	.+2      	; 0xd9a <__addsf3+0x1e>
     d98:	e0 95       	com	r30
     d9a:	e7 fb       	bst	r30, 7
     d9c:	90 c0       	rjmp	.+288    	; 0xebe <__fp_inf>

00000d9e <__addsf3x>:
     d9e:	e9 2f       	mov	r30, r25
     da0:	b6 d0       	rcall	.+364    	; 0xf0e <__fp_split3>
     da2:	80 f3       	brcs	.-32     	; 0xd84 <__addsf3+0x8>
     da4:	ba 17       	cp	r27, r26
     da6:	62 07       	cpc	r22, r18
     da8:	73 07       	cpc	r23, r19
     daa:	84 07       	cpc	r24, r20
     dac:	95 07       	cpc	r25, r21
     dae:	18 f0       	brcs	.+6      	; 0xdb6 <__addsf3x+0x18>
     db0:	71 f4       	brne	.+28     	; 0xdce <__addsf3x+0x30>
     db2:	9e f5       	brtc	.+102    	; 0xe1a <__addsf3x+0x7c>
     db4:	ce c0       	rjmp	.+412    	; 0xf52 <__fp_zero>
     db6:	0e f4       	brtc	.+2      	; 0xdba <__addsf3x+0x1c>
     db8:	e0 95       	com	r30
     dba:	0b 2e       	mov	r0, r27
     dbc:	ba 2f       	mov	r27, r26
     dbe:	a0 2d       	mov	r26, r0
     dc0:	0b 01       	movw	r0, r22
     dc2:	b9 01       	movw	r22, r18
     dc4:	90 01       	movw	r18, r0
     dc6:	0c 01       	movw	r0, r24
     dc8:	ca 01       	movw	r24, r20
     dca:	a0 01       	movw	r20, r0
     dcc:	11 24       	eor	r1, r1
     dce:	ff 27       	eor	r31, r31
     dd0:	59 1b       	sub	r21, r25
     dd2:	99 f0       	breq	.+38     	; 0xdfa <__addsf3x+0x5c>
     dd4:	59 3f       	cpi	r21, 0xF9	; 249
     dd6:	50 f4       	brcc	.+20     	; 0xdec <__addsf3x+0x4e>
     dd8:	50 3e       	cpi	r21, 0xE0	; 224
     dda:	68 f1       	brcs	.+90     	; 0xe36 <__addsf3x+0x98>
     ddc:	1a 16       	cp	r1, r26
     dde:	f0 40       	sbci	r31, 0x00	; 0
     de0:	a2 2f       	mov	r26, r18
     de2:	23 2f       	mov	r18, r19
     de4:	34 2f       	mov	r19, r20
     de6:	44 27       	eor	r20, r20
     de8:	58 5f       	subi	r21, 0xF8	; 248
     dea:	f3 cf       	rjmp	.-26     	; 0xdd2 <__addsf3x+0x34>
     dec:	46 95       	lsr	r20
     dee:	37 95       	ror	r19
     df0:	27 95       	ror	r18
     df2:	a7 95       	ror	r26
     df4:	f0 40       	sbci	r31, 0x00	; 0
     df6:	53 95       	inc	r21
     df8:	c9 f7       	brne	.-14     	; 0xdec <__addsf3x+0x4e>
     dfa:	7e f4       	brtc	.+30     	; 0xe1a <__addsf3x+0x7c>
     dfc:	1f 16       	cp	r1, r31
     dfe:	ba 0b       	sbc	r27, r26
     e00:	62 0b       	sbc	r22, r18
     e02:	73 0b       	sbc	r23, r19
     e04:	84 0b       	sbc	r24, r20
     e06:	ba f0       	brmi	.+46     	; 0xe36 <__addsf3x+0x98>
     e08:	91 50       	subi	r25, 0x01	; 1
     e0a:	a1 f0       	breq	.+40     	; 0xe34 <__addsf3x+0x96>
     e0c:	ff 0f       	add	r31, r31
     e0e:	bb 1f       	adc	r27, r27
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	c2 f7       	brpl	.-16     	; 0xe08 <__addsf3x+0x6a>
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <__addsf3x+0x98>
     e1a:	ba 0f       	add	r27, r26
     e1c:	62 1f       	adc	r22, r18
     e1e:	73 1f       	adc	r23, r19
     e20:	84 1f       	adc	r24, r20
     e22:	48 f4       	brcc	.+18     	; 0xe36 <__addsf3x+0x98>
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f7 95       	ror	r31
     e2e:	9e 3f       	cpi	r25, 0xFE	; 254
     e30:	08 f0       	brcs	.+2      	; 0xe34 <__addsf3x+0x96>
     e32:	b3 cf       	rjmp	.-154    	; 0xd9a <__addsf3+0x1e>
     e34:	93 95       	inc	r25
     e36:	88 0f       	add	r24, r24
     e38:	08 f0       	brcs	.+2      	; 0xe3c <__addsf3x+0x9e>
     e3a:	99 27       	eor	r25, r25
     e3c:	ee 0f       	add	r30, r30
     e3e:	97 95       	ror	r25
     e40:	87 95       	ror	r24
     e42:	08 95       	ret

00000e44 <__floatunsisf>:
     e44:	e8 94       	clt
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <__floatsisf+0x12>

00000e48 <__floatsisf>:
     e48:	97 fb       	bst	r25, 7
     e4a:	3e f4       	brtc	.+14     	; 0xe5a <__floatsisf+0x12>
     e4c:	90 95       	com	r25
     e4e:	80 95       	com	r24
     e50:	70 95       	com	r23
     e52:	61 95       	neg	r22
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	8f 4f       	sbci	r24, 0xFF	; 255
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	99 23       	and	r25, r25
     e5c:	a9 f0       	breq	.+42     	; 0xe88 <__floatsisf+0x40>
     e5e:	f9 2f       	mov	r31, r25
     e60:	96 e9       	ldi	r25, 0x96	; 150
     e62:	bb 27       	eor	r27, r27
     e64:	93 95       	inc	r25
     e66:	f6 95       	lsr	r31
     e68:	87 95       	ror	r24
     e6a:	77 95       	ror	r23
     e6c:	67 95       	ror	r22
     e6e:	b7 95       	ror	r27
     e70:	f1 11       	cpse	r31, r1
     e72:	f8 cf       	rjmp	.-16     	; 0xe64 <__floatsisf+0x1c>
     e74:	fa f4       	brpl	.+62     	; 0xeb4 <__floatsisf+0x6c>
     e76:	bb 0f       	add	r27, r27
     e78:	11 f4       	brne	.+4      	; 0xe7e <__floatsisf+0x36>
     e7a:	60 ff       	sbrs	r22, 0
     e7c:	1b c0       	rjmp	.+54     	; 0xeb4 <__floatsisf+0x6c>
     e7e:	6f 5f       	subi	r22, 0xFF	; 255
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <__floatsisf+0x6c>
     e88:	88 23       	and	r24, r24
     e8a:	11 f0       	breq	.+4      	; 0xe90 <__floatsisf+0x48>
     e8c:	96 e9       	ldi	r25, 0x96	; 150
     e8e:	11 c0       	rjmp	.+34     	; 0xeb2 <__floatsisf+0x6a>
     e90:	77 23       	and	r23, r23
     e92:	21 f0       	breq	.+8      	; 0xe9c <__floatsisf+0x54>
     e94:	9e e8       	ldi	r25, 0x8E	; 142
     e96:	87 2f       	mov	r24, r23
     e98:	76 2f       	mov	r23, r22
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <__floatsisf+0x5e>
     e9c:	66 23       	and	r22, r22
     e9e:	71 f0       	breq	.+28     	; 0xebc <__floatsisf+0x74>
     ea0:	96 e8       	ldi	r25, 0x86	; 134
     ea2:	86 2f       	mov	r24, r22
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	2a f0       	brmi	.+10     	; 0xeb4 <__floatsisf+0x6c>
     eaa:	9a 95       	dec	r25
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	da f7       	brpl	.-10     	; 0xeaa <__floatsisf+0x62>
     eb4:	88 0f       	add	r24, r24
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	97 f9       	bld	r25, 7
     ebc:	08 95       	ret

00000ebe <__fp_inf>:
     ebe:	97 f9       	bld	r25, 7
     ec0:	9f 67       	ori	r25, 0x7F	; 127
     ec2:	80 e8       	ldi	r24, 0x80	; 128
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	08 95       	ret

00000eca <__fp_nan>:
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	80 ec       	ldi	r24, 0xC0	; 192
     ece:	08 95       	ret

00000ed0 <__fp_pscA>:
     ed0:	00 24       	eor	r0, r0
     ed2:	0a 94       	dec	r0
     ed4:	16 16       	cp	r1, r22
     ed6:	17 06       	cpc	r1, r23
     ed8:	18 06       	cpc	r1, r24
     eda:	09 06       	cpc	r0, r25
     edc:	08 95       	ret

00000ede <__fp_pscB>:
     ede:	00 24       	eor	r0, r0
     ee0:	0a 94       	dec	r0
     ee2:	12 16       	cp	r1, r18
     ee4:	13 06       	cpc	r1, r19
     ee6:	14 06       	cpc	r1, r20
     ee8:	05 06       	cpc	r0, r21
     eea:	08 95       	ret

00000eec <__fp_round>:
     eec:	09 2e       	mov	r0, r25
     eee:	03 94       	inc	r0
     ef0:	00 0c       	add	r0, r0
     ef2:	11 f4       	brne	.+4      	; 0xef8 <__fp_round+0xc>
     ef4:	88 23       	and	r24, r24
     ef6:	52 f0       	brmi	.+20     	; 0xf0c <__fp_round+0x20>
     ef8:	bb 0f       	add	r27, r27
     efa:	40 f4       	brcc	.+16     	; 0xf0c <__fp_round+0x20>
     efc:	bf 2b       	or	r27, r31
     efe:	11 f4       	brne	.+4      	; 0xf04 <__fp_round+0x18>
     f00:	60 ff       	sbrs	r22, 0
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <__fp_round+0x20>
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	08 95       	ret

00000f0e <__fp_split3>:
     f0e:	57 fd       	sbrc	r21, 7
     f10:	90 58       	subi	r25, 0x80	; 128
     f12:	44 0f       	add	r20, r20
     f14:	55 1f       	adc	r21, r21
     f16:	59 f0       	breq	.+22     	; 0xf2e <__fp_splitA+0x10>
     f18:	5f 3f       	cpi	r21, 0xFF	; 255
     f1a:	71 f0       	breq	.+28     	; 0xf38 <__fp_splitA+0x1a>
     f1c:	47 95       	ror	r20

00000f1e <__fp_splitA>:
     f1e:	88 0f       	add	r24, r24
     f20:	97 fb       	bst	r25, 7
     f22:	99 1f       	adc	r25, r25
     f24:	61 f0       	breq	.+24     	; 0xf3e <__fp_splitA+0x20>
     f26:	9f 3f       	cpi	r25, 0xFF	; 255
     f28:	79 f0       	breq	.+30     	; 0xf48 <__fp_splitA+0x2a>
     f2a:	87 95       	ror	r24
     f2c:	08 95       	ret
     f2e:	12 16       	cp	r1, r18
     f30:	13 06       	cpc	r1, r19
     f32:	14 06       	cpc	r1, r20
     f34:	55 1f       	adc	r21, r21
     f36:	f2 cf       	rjmp	.-28     	; 0xf1c <__fp_split3+0xe>
     f38:	46 95       	lsr	r20
     f3a:	f1 df       	rcall	.-30     	; 0xf1e <__fp_splitA>
     f3c:	08 c0       	rjmp	.+16     	; 0xf4e <__fp_splitA+0x30>
     f3e:	16 16       	cp	r1, r22
     f40:	17 06       	cpc	r1, r23
     f42:	18 06       	cpc	r1, r24
     f44:	99 1f       	adc	r25, r25
     f46:	f1 cf       	rjmp	.-30     	; 0xf2a <__fp_splitA+0xc>
     f48:	86 95       	lsr	r24
     f4a:	71 05       	cpc	r23, r1
     f4c:	61 05       	cpc	r22, r1
     f4e:	08 94       	sec
     f50:	08 95       	ret

00000f52 <__fp_zero>:
     f52:	e8 94       	clt

00000f54 <__fp_szero>:
     f54:	bb 27       	eor	r27, r27
     f56:	66 27       	eor	r22, r22
     f58:	77 27       	eor	r23, r23
     f5a:	cb 01       	movw	r24, r22
     f5c:	97 f9       	bld	r25, 7
     f5e:	08 95       	ret

00000f60 <__gesf2>:
     f60:	66 d0       	rcall	.+204    	; 0x102e <__fp_cmp>
     f62:	08 f4       	brcc	.+2      	; 0xf66 <__gesf2+0x6>
     f64:	8f ef       	ldi	r24, 0xFF	; 255
     f66:	08 95       	ret

00000f68 <__mulsf3>:
     f68:	0b d0       	rcall	.+22     	; 0xf80 <__mulsf3x>
     f6a:	c0 cf       	rjmp	.-128    	; 0xeec <__fp_round>
     f6c:	b1 df       	rcall	.-158    	; 0xed0 <__fp_pscA>
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <__mulsf3+0x12>
     f70:	b6 df       	rcall	.-148    	; 0xede <__fp_pscB>
     f72:	18 f0       	brcs	.+6      	; 0xf7a <__mulsf3+0x12>
     f74:	95 23       	and	r25, r21
     f76:	09 f0       	breq	.+2      	; 0xf7a <__mulsf3+0x12>
     f78:	a2 cf       	rjmp	.-188    	; 0xebe <__fp_inf>
     f7a:	a7 cf       	rjmp	.-178    	; 0xeca <__fp_nan>
     f7c:	11 24       	eor	r1, r1
     f7e:	ea cf       	rjmp	.-44     	; 0xf54 <__fp_szero>

00000f80 <__mulsf3x>:
     f80:	c6 df       	rcall	.-116    	; 0xf0e <__fp_split3>
     f82:	a0 f3       	brcs	.-24     	; 0xf6c <__mulsf3+0x4>

00000f84 <__mulsf3_pse>:
     f84:	95 9f       	mul	r25, r21
     f86:	d1 f3       	breq	.-12     	; 0xf7c <__mulsf3+0x14>
     f88:	95 0f       	add	r25, r21
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	55 1f       	adc	r21, r21
     f8e:	62 9f       	mul	r22, r18
     f90:	f0 01       	movw	r30, r0
     f92:	72 9f       	mul	r23, r18
     f94:	bb 27       	eor	r27, r27
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	63 9f       	mul	r22, r19
     f9c:	aa 27       	eor	r26, r26
     f9e:	f0 0d       	add	r31, r0
     fa0:	b1 1d       	adc	r27, r1
     fa2:	aa 1f       	adc	r26, r26
     fa4:	64 9f       	mul	r22, r20
     fa6:	66 27       	eor	r22, r22
     fa8:	b0 0d       	add	r27, r0
     faa:	a1 1d       	adc	r26, r1
     fac:	66 1f       	adc	r22, r22
     fae:	82 9f       	mul	r24, r18
     fb0:	22 27       	eor	r18, r18
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	73 9f       	mul	r23, r19
     fba:	b0 0d       	add	r27, r0
     fbc:	a1 1d       	adc	r26, r1
     fbe:	62 1f       	adc	r22, r18
     fc0:	83 9f       	mul	r24, r19
     fc2:	a0 0d       	add	r26, r0
     fc4:	61 1d       	adc	r22, r1
     fc6:	22 1f       	adc	r18, r18
     fc8:	74 9f       	mul	r23, r20
     fca:	33 27       	eor	r19, r19
     fcc:	a0 0d       	add	r26, r0
     fce:	61 1d       	adc	r22, r1
     fd0:	23 1f       	adc	r18, r19
     fd2:	84 9f       	mul	r24, r20
     fd4:	60 0d       	add	r22, r0
     fd6:	21 1d       	adc	r18, r1
     fd8:	82 2f       	mov	r24, r18
     fda:	76 2f       	mov	r23, r22
     fdc:	6a 2f       	mov	r22, r26
     fde:	11 24       	eor	r1, r1
     fe0:	9f 57       	subi	r25, 0x7F	; 127
     fe2:	50 40       	sbci	r21, 0x00	; 0
     fe4:	8a f0       	brmi	.+34     	; 0x1008 <__mulsf3_pse+0x84>
     fe6:	e1 f0       	breq	.+56     	; 0x1020 <__mulsf3_pse+0x9c>
     fe8:	88 23       	and	r24, r24
     fea:	4a f0       	brmi	.+18     	; 0xffe <__mulsf3_pse+0x7a>
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	bb 1f       	adc	r27, r27
     ff2:	66 1f       	adc	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	91 50       	subi	r25, 0x01	; 1
     ffa:	50 40       	sbci	r21, 0x00	; 0
     ffc:	a9 f7       	brne	.-22     	; 0xfe8 <__mulsf3_pse+0x64>
     ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    1000:	51 05       	cpc	r21, r1
    1002:	70 f0       	brcs	.+28     	; 0x1020 <__mulsf3_pse+0x9c>
    1004:	5c cf       	rjmp	.-328    	; 0xebe <__fp_inf>
    1006:	a6 cf       	rjmp	.-180    	; 0xf54 <__fp_szero>
    1008:	5f 3f       	cpi	r21, 0xFF	; 255
    100a:	ec f3       	brlt	.-6      	; 0x1006 <__mulsf3_pse+0x82>
    100c:	98 3e       	cpi	r25, 0xE8	; 232
    100e:	dc f3       	brlt	.-10     	; 0x1006 <__mulsf3_pse+0x82>
    1010:	86 95       	lsr	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f7 95       	ror	r31
    101a:	e7 95       	ror	r30
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	c1 f7       	brne	.-16     	; 0x1010 <__mulsf3_pse+0x8c>
    1020:	fe 2b       	or	r31, r30
    1022:	88 0f       	add	r24, r24
    1024:	91 1d       	adc	r25, r1
    1026:	96 95       	lsr	r25
    1028:	87 95       	ror	r24
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret

0000102e <__fp_cmp>:
    102e:	99 0f       	add	r25, r25
    1030:	00 08       	sbc	r0, r0
    1032:	55 0f       	add	r21, r21
    1034:	aa 0b       	sbc	r26, r26
    1036:	e0 e8       	ldi	r30, 0x80	; 128
    1038:	fe ef       	ldi	r31, 0xFE	; 254
    103a:	16 16       	cp	r1, r22
    103c:	17 06       	cpc	r1, r23
    103e:	e8 07       	cpc	r30, r24
    1040:	f9 07       	cpc	r31, r25
    1042:	c0 f0       	brcs	.+48     	; 0x1074 <__fp_cmp+0x46>
    1044:	12 16       	cp	r1, r18
    1046:	13 06       	cpc	r1, r19
    1048:	e4 07       	cpc	r30, r20
    104a:	f5 07       	cpc	r31, r21
    104c:	98 f0       	brcs	.+38     	; 0x1074 <__fp_cmp+0x46>
    104e:	62 1b       	sub	r22, r18
    1050:	73 0b       	sbc	r23, r19
    1052:	84 0b       	sbc	r24, r20
    1054:	95 0b       	sbc	r25, r21
    1056:	39 f4       	brne	.+14     	; 0x1066 <__fp_cmp+0x38>
    1058:	0a 26       	eor	r0, r26
    105a:	61 f0       	breq	.+24     	; 0x1074 <__fp_cmp+0x46>
    105c:	23 2b       	or	r18, r19
    105e:	24 2b       	or	r18, r20
    1060:	25 2b       	or	r18, r21
    1062:	21 f4       	brne	.+8      	; 0x106c <__fp_cmp+0x3e>
    1064:	08 95       	ret
    1066:	0a 26       	eor	r0, r26
    1068:	09 f4       	brne	.+2      	; 0x106c <__fp_cmp+0x3e>
    106a:	a1 40       	sbci	r26, 0x01	; 1
    106c:	a6 95       	lsr	r26
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	81 1d       	adc	r24, r1
    1072:	81 1d       	adc	r24, r1
    1074:	08 95       	ret

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
