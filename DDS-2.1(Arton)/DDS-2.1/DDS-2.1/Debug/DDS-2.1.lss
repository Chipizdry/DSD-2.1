
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000be8  00000c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b4  00800062  00800062  00000c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001995  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  00002719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9a  00000000  00000000  00002e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  000040f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00004242  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ee       	ldi	r30, 0xE8	; 232
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 31       	cpi	r26, 0x16	; 22
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	35 d0       	rcall	.+106    	; 0xc4 <main>
  5a:	c4 c5       	rjmp	.+2952   	; 0xbe4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  5e:	e1 99       	sbic	0x1c, 1	; 28
  60:	fe cf       	rjmp	.-4      	; 0x5e <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  62:	9f bb       	out	0x1f, r25	; 31
  64:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  66:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
  68:	8d b3       	in	r24, 0x1d	; 29
}
  6a:	08 95       	ret

0000006c <__vector_6>:


  //----------------Работа прерывателя таймера------------------------------------

 ISR (TIMER1_COMPA_vect)
 {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
	  timing++;
  8e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <timing>
  92:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <timing+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <timing+0x1>
  9c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <timing>
	  Omega_slave(); 
  a0:	21 d4       	rcall	.+2114   	; 0x8e4 <Omega_slave>
  }
  a2:	ff 91       	pop	r31
  a4:	ef 91       	pop	r30
  a6:	bf 91       	pop	r27
  a8:	af 91       	pop	r26
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	7f 91       	pop	r23
  b0:	6f 91       	pop	r22
  b2:	5f 91       	pop	r21
  b4:	4f 91       	pop	r20
  b6:	3f 91       	pop	r19
  b8:	2f 91       	pop	r18
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
  c4:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем внешнее  опорное напряжение
  ca:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8f 6d       	ori	r24, 0xDF	; 223
  d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(0<<ADPS1)|(0<<ADPS2)|(0<<ADFR); //частота предделителя
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	86 b9       	out	0x06, r24	; 6
   // ACSR |= (1 << ACD);//отключаем аналоговый компаратор
    // Настройка портов ввода/вывода
    DDRC = 0b00000000;
  d6:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00111010;
  d8:	8a e3       	ldi	r24, 0x3A	; 58
  da:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
  dc:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	81 bb       	out	0x11, r24	; 17
	PORTC= 0b00000000;
  e2:	15 ba       	out	0x15, r1	; 21
	PORTD= 0b00000000;
  e4:	12 ba       	out	0x12, r1	; 18
//_________________________________________________________________________________________________
    
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  ec:	89 b7       	in	r24, 0x39	; 57
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	89 bf       	out	0x39, r24	; 57
	OCR1A = 100;  //записываем в регистр число для сравнения
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9b bd       	out	0x2b, r25	; 43
  f8:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	
	adress=19;
 100:	83 e1       	ldi	r24, 0x13	; 19
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <adress+0x1>
 108:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <adress>
	device_ID=25;// 157-блок коммутации ,89-СПРА ,108-БСА, 25 -СПДОТА
 10c:	89 e1       	ldi	r24, 0x19	; 25
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <device_ID+0x1>
 114:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <device_ID>
//===================================================================================================================================================	
 
 
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a0 df       	rcall	.-192    	; 0x5e <EEPROM_read>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 
 delta_U=EEPROM_read(0x08);	 
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	98 df       	rcall	.-208    	; 0x5e <EEPROM_read>
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <delta_U+0x1>
 134:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
 138:	8b 97       	sbiw	r24, 0x2b	; 43
 13a:	34 f0       	brlt	.+12     	; 0x148 <main+0x84>
 13c:	89 e2       	ldi	r24, 0x29	; 41
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <delta_U+0x1>
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <delta_U>
 delta_F=EEPROM_read(0x09);
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	88 df       	rcall	.-240    	; 0x5e <EEPROM_read>
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <delta_F+0x1>
 154:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <delta_F>
 if(delta_F>42){delta_F=41;}
 158:	8b 97       	sbiw	r24, 0x2b	; 43
 15a:	34 f0       	brlt	.+12     	; 0x168 <main+0xa4>
 15c:	89 e2       	ldi	r24, 0x29	; 41
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <delta_F+0x1>
 164:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <delta_F>
  // fire=read_adc(0); //Чтение состояния входа ПОЖАР
// preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ



  sei();
 168:	78 94       	sei
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0xa6>

0000016c <protocol>:
	PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 // PORTB&=~(1<<PB3);
	 }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
	 void protocol(void)
	 {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
		 if (tct==13)
 170:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 174:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 178:	0d 97       	sbiw	r24, 0x0d	; 13
 17a:	41 f5       	brne	.+80     	; 0x1cc <protocol+0x60>
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
 17c:	ca ee       	ldi	r28, 0xEA	; 234
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	2a 8d       	ldd	r18, Y+26	; 0x1a
 182:	3b 8d       	ldd	r19, Y+27	; 0x1b
 184:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <directive>
 188:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <directive+0x1>
 18c:	82 2b       	or	r24, r18
 18e:	93 2b       	or	r25, r19
 190:	2c 89       	ldd	r18, Y+20	; 0x14
 192:	3d 89       	ldd	r19, Y+21	; 0x15
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	82 2b       	or	r24, r18
 1a2:	93 2b       	or	r25, r19
 1a4:	2e 89       	ldd	r18, Y+22	; 0x16
 1a6:	3f 89       	ldd	r19, Y+23	; 0x17
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	82 2b       	or	r24, r18
 1b2:	93 2b       	or	r25, r19
 1b4:	28 8d       	ldd	r18, Y+24	; 0x18
 1b6:	39 8d       	ldd	r19, Y+25	; 0x19
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	82 2b       	or	r24, r18
 1be:	93 2b       	or	r25, r19
 1c0:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <directive+0x1>
 1c4:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <directive>
		 }
		 
		//if(tct==9) {  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}   //OWR в активном состоянии при запросе от ППКП  
		if(tct==13){PORTB|=(1<<PB1); PORTB|=(1<<PB4);}   //OWR в активном состоянии при запросе от программатора/ППКП
 1c8:	c1 9a       	sbi	0x18, 1	; 24
 1ca:	c4 9a       	sbi	0x18, 4	; 24
		if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}   //СОСТОЯНИЕ ТРЕВОГИ 
 1cc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 1d0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 1d4:	0e 97       	sbiw	r24, 0x0e	; 14
 1d6:	61 f4       	brne	.+24     	; 0x1f0 <protocol+0x84>
 1d8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <stat>
 1dc:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <stat+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	21 f0       	breq	.+8      	; 0x1ec <protocol+0x80>
 1e4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	b1 f4       	brne	.+44     	; 0x218 <protocol+0xac>
 1ec:	c1 9a       	sbi	0x18, 1	; 24
 1ee:	c4 9a       	sbi	0x18, 4	; 24
		 
		 
		if(tct>=13)
 1f0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 1f4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 1f8:	8d 30       	cpi	r24, 0x0D	; 13
 1fa:	91 05       	cpc	r25, r1
 1fc:	0c f4       	brge	.+2      	; 0x200 <protocol+0x94>
 1fe:	6f c3       	rjmp	.+1758   	; 0x8de <__stack+0x47f>
		{ 
			
			if(tct==22){  PORTB |= (1 <<PB1); PORTB|= (1 <<PB4);}                  // Импульс синхронизации
 200:	46 97       	sbiw	r24, 0x16	; 22
 202:	11 f4       	brne	.+4      	; 0x208 <protocol+0x9c>
 204:	c1 9a       	sbi	0x18, 1	; 24
 206:	c4 9a       	sbi	0x18, 4	; 24
			if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 208:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 20c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 210:	4f 97       	sbiw	r24, 0x1f	; 31
 212:	11 f4       	brne	.+4      	; 0x218 <protocol+0xac>
 214:	c1 9a       	sbi	0x18, 1	; 24
 216:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 218:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 21c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 220:	88 97       	sbiw	r24, 0x28	; 40
 222:	11 f4       	brne	.+4      	; 0x228 <protocol+0xbc>
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 228:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 22c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 230:	c1 97       	sbiw	r24, 0x31	; 49
 232:	11 f4       	brne	.+4      	; 0x238 <protocol+0xcc>
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 238:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 23c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 240:	ca 97       	sbiw	r24, 0x3a	; 58
 242:	11 f4       	brne	.+4      	; 0x248 <protocol+0xdc>
 244:	c1 9a       	sbi	0x18, 1	; 24
 246:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 248:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 24c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 250:	83 34       	cpi	r24, 0x43	; 67
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <protocol+0xee>
 256:	c1 9a       	sbi	0x18, 1	; 24
 258:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 25a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 25e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 262:	8c 34       	cpi	r24, 0x4C	; 76
 264:	91 05       	cpc	r25, r1
 266:	59 f4       	brne	.+22     	; 0x27e <protocol+0x112>
 268:	c1 9a       	sbi	0x18, 1	; 24
 26a:	ad 9a       	sbi	0x15, 5	; 21
		    if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 26c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 270:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 274:	8c 34       	cpi	r24, 0x4C	; 76
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <protocol+0x112>
 27a:	c1 9a       	sbi	0x18, 1	; 24
 27c:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==85){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 27e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 282:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 286:	85 35       	cpi	r24, 0x55	; 85
 288:	91 05       	cpc	r25, r1
 28a:	11 f4       	brne	.+4      	; 0x290 <protocol+0x124>
 28c:	c1 9a       	sbi	0x18, 1	; 24
 28e:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==94){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 290:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 294:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 298:	8e 35       	cpi	r24, 0x5E	; 94
 29a:	91 05       	cpc	r25, r1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <protocol+0x136>
 29e:	c1 9a       	sbi	0x18, 1	; 24
 2a0:	ad 9a       	sbi	0x15, 5	; 21
						
							
				
		  switch(directive)
 2a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <directive>
 2a6:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <directive+0x1>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	91 05       	cpc	r25, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <protocol+0x146>
 2b0:	62 c0       	rjmp	.+196    	; 0x376 <protocol+0x20a>
 2b2:	1c f4       	brge	.+6      	; 0x2ba <protocol+0x14e>
 2b4:	89 2b       	or	r24, r25
 2b6:	49 f0       	breq	.+18     	; 0x2ca <protocol+0x15e>
 2b8:	12 c3       	rjmp	.+1572   	; 0x8de <__stack+0x47f>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	91 05       	cpc	r25, r1
 2be:	09 f4       	brne	.+2      	; 0x2c2 <protocol+0x156>
 2c0:	77 c0       	rjmp	.+238    	; 0x3b0 <protocol+0x244>
 2c2:	0e 97       	sbiw	r24, 0x0e	; 14
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <protocol+0x15c>
 2c6:	aa c2       	rjmp	.+1364   	; 0x81c <__stack+0x3bd>
 2c8:	0a c3       	rjmp	.+1556   	; 0x8de <__stack+0x47f>
		   {
			   
		   case 0 :
		 //  if(tct==9) {  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}                 //OWR в активном состоянии при запросе от ППКП
		   if(tct==13){  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}                  //OWR в активном состоянии при запросе от программатора/ППКП   
 2ca:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 2ce:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 2d2:	0d 97       	sbiw	r24, 0x0d	; 13
 2d4:	11 f4       	brne	.+4      	; 0x2da <protocol+0x16e>
 2d6:	c1 9a       	sbi	0x18, 1	; 24
 2d8:	c4 9a       	sbi	0x18, 4	; 24
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 2da:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 2de:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 2e2:	0e 97       	sbiw	r24, 0x0e	; 14
 2e4:	61 f4       	brne	.+24     	; 0x2fe <protocol+0x192>
 2e6:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <stat>
 2ea:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <stat+0x1>
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	21 f0       	breq	.+8      	; 0x2fa <protocol+0x18e>
 2f2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	91 f4       	brne	.+36     	; 0x31e <protocol+0x1b2>
 2fa:	c1 9a       	sbi	0x18, 1	; 24
 2fc:	ad 9a       	sbi	0x15, 5	; 21
			   
			   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 302:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 306:	46 97       	sbiw	r24, 0x16	; 22
 308:	11 f4       	brne	.+4      	; 0x30e <protocol+0x1a2>
 30a:	c1 9a       	sbi	0x18, 1	; 24
 30c:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 30e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 312:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 316:	4f 97       	sbiw	r24, 0x1f	; 31
 318:	11 f4       	brne	.+4      	; 0x31e <protocol+0x1b2>
 31a:	c1 9a       	sbi	0x18, 1	; 24
 31c:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 31e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 322:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 326:	88 97       	sbiw	r24, 0x28	; 40
 328:	11 f4       	brne	.+4      	; 0x32e <protocol+0x1c2>
 32a:	c1 9a       	sbi	0x18, 1	; 24
 32c:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 32e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 332:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 336:	c1 97       	sbiw	r24, 0x31	; 49
 338:	11 f4       	brne	.+4      	; 0x33e <protocol+0x1d2>
 33a:	c1 9a       	sbi	0x18, 1	; 24
 33c:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 33e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 342:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 346:	ca 97       	sbiw	r24, 0x3a	; 58
 348:	11 f4       	brne	.+4      	; 0x34e <protocol+0x1e2>
 34a:	c1 9a       	sbi	0x18, 1	; 24
 34c:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 34e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 352:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 356:	83 34       	cpi	r24, 0x43	; 67
 358:	91 05       	cpc	r25, r1
 35a:	11 f4       	brne	.+4      	; 0x360 <protocol+0x1f4>
 35c:	c1 9a       	sbi	0x18, 1	; 24
 35e:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 360:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 364:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 368:	8c 34       	cpi	r24, 0x4C	; 76
 36a:	91 05       	cpc	r25, r1
 36c:	09 f0       	breq	.+2      	; 0x370 <protocol+0x204>
 36e:	b7 c2       	rjmp	.+1390   	; 0x8de <__stack+0x47f>
 370:	c1 9a       	sbi	0x18, 1	; 24
 372:	ad 9a       	sbi	0x15, 5	; 21
 374:	b4 c2       	rjmp	.+1384   	; 0x8de <__stack+0x47f>
			   
		   break;
		   
		   case 2 :
		  
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 376:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 37a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 37e:	0d 97       	sbiw	r24, 0x0d	; 13
 380:	11 f4       	brne	.+4      	; 0x386 <protocol+0x21a>
 382:	c1 9a       	sbi	0x18, 1	; 24
 384:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 386:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 38a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 38e:	0e 97       	sbiw	r24, 0x0e	; 14
 390:	09 f0       	breq	.+2      	; 0x394 <protocol+0x228>
 392:	a5 c2       	rjmp	.+1354   	; 0x8de <__stack+0x47f>
 394:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <stat>
 398:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <stat+0x1>
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	29 f0       	breq	.+10     	; 0x3aa <protocol+0x23e>
 3a0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	09 f0       	breq	.+2      	; 0x3aa <protocol+0x23e>
 3a8:	9a c2       	rjmp	.+1332   	; 0x8de <__stack+0x47f>
 3aa:	c1 9a       	sbi	0x18, 1	; 24
 3ac:	ad 9a       	sbi	0x15, 5	; 21
 3ae:	97 c2       	rjmp	.+1326   	; 0x8de <__stack+0x47f>
		   break;
		   
		   case 3 :
		 
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 3b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3b8:	0d 97       	sbiw	r24, 0x0d	; 13
 3ba:	11 f4       	brne	.+4      	; 0x3c0 <protocol+0x254>
 3bc:	c1 9a       	sbi	0x18, 1	; 24
 3be:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 3c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3c4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3c8:	0e 97       	sbiw	r24, 0x0e	; 14
 3ca:	61 f4       	brne	.+24     	; 0x3e4 <protocol+0x278>
 3cc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <stat>
 3d0:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <stat+0x1>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	21 f0       	breq	.+8      	; 0x3e0 <protocol+0x274>
 3d8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	91 f4       	brne	.+36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e0:	c1 9a       	sbi	0x18, 1	; 24
 3e2:	ad 9a       	sbi	0x15, 5	; 21
		
		   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации 
 3e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3e8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3ec:	46 97       	sbiw	r24, 0x16	; 22
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <protocol+0x288>
 3f0:	c1 9a       	sbi	0x18, 1	; 24
 3f2:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3f4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 3f8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 3fc:	4f 97       	sbiw	r24, 0x1f	; 31
 3fe:	11 f4       	brne	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	c1 9a       	sbi	0x18, 1	; 24
 402:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 404:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 408:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 40c:	88 97       	sbiw	r24, 0x28	; 40
 40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	c1 9a       	sbi	0x18, 1	; 24
 412:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 414:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 418:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 41c:	c1 97       	sbiw	r24, 0x31	; 49
 41e:	11 f4       	brne	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	c1 9a       	sbi	0x18, 1	; 24
 422:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 424:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 428:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 42c:	ca 97       	sbiw	r24, 0x3a	; 58
 42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	c1 9a       	sbi	0x18, 1	; 24
 432:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 434:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 438:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 43c:	83 34       	cpi	r24, 0x43	; 67
 43e:	91 05       	cpc	r25, r1
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	c1 9a       	sbi	0x18, 1	; 24
 444:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 446:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 44a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 44e:	8c 34       	cpi	r24, 0x4C	; 76
 450:	91 05       	cpc	r25, r1
 452:	11 f4       	brne	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	c1 9a       	sbi	0x18, 1	; 24
 456:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==85){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 458:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 45c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 460:	85 35       	cpi	r24, 0x55	; 85
 462:	91 05       	cpc	r25, r1
 464:	11 f4       	brne	.+4      	; 0x46a <__stack+0xb>
 466:	c1 9a       	sbi	0x18, 1	; 24
 468:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==95){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);trigg=0;}                  // Импульс синхронизации
 46a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 46e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 472:	8f 35       	cpi	r24, 0x5F	; 95
 474:	91 05       	cpc	r25, r1
 476:	31 f4       	brne	.+12     	; 0x484 <__stack+0x25>
 478:	c1 9a       	sbi	0x18, 1	; 24
 47a:	ad 9a       	sbi	0x15, 5	; 21
 47c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <trigg+0x1>
 480:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <trigg>
		
	   	   if((tct>=14)&&(tct<22))   //индентификатор устройства
 484:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 488:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 48c:	9c 01       	movw	r18, r24
 48e:	2e 50       	subi	r18, 0x0E	; 14
 490:	31 09       	sbc	r19, r1
 492:	28 30       	cpi	r18, 0x08	; 8
 494:	31 05       	cpc	r19, r1
 496:	20 f5       	brcc	.+72     	; 0x4e0 <__stack+0x81>
			    {
				 temp_ID|=(device_ID>>(21-tct))&(0b1);
 498:	25 e1       	ldi	r18, 0x15	; 21
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	28 1b       	sub	r18, r24
 49e:	39 0b       	sbc	r19, r25
 4a0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <device_ID>
 4a4:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <device_ID+0x1>
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
 4aa:	95 95       	asr	r25
 4ac:	87 95       	ror	r24
 4ae:	2a 95       	dec	r18
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
 4b2:	81 70       	andi	r24, 0x01	; 1
 4b4:	99 27       	eor	r25, r25
 4b6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 4ba:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 4be:	82 2b       	or	r24, r18
 4c0:	93 2b       	or	r25, r19
 4c2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 4c6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__stack+0x73>
 4ce:	c1 9a       	sbi	0x18, 1	; 24
 4d0:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 4d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 4d6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 4da:	89 2b       	or	r24, r25
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <__stack+0x81>
 4de:	c1 98       	cbi	0x18, 1	; 24
			    }  
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
 4e0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 4e4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 4e8:	4e 97       	sbiw	r24, 0x1e	; 30
 4ea:	e1 f4       	brne	.+56     	; 0x524 <__stack+0xc5>
			{
				temp_ID|=((external)&(0b1));
 4ec:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 4f0:	e8 2f       	mov	r30, r24
 4f2:	e1 70       	andi	r30, 0x01	; 1
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 4fa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 4fe:	e8 2b       	or	r30, r24
 500:	f9 2b       	or	r31, r25
 502:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <temp_ID+0x1>
 506:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 50a:	e1 30       	cpi	r30, 0x01	; 1
 50c:	f1 05       	cpc	r31, r1
 50e:	09 f0       	breq	.+2      	; 0x512 <__stack+0xb3>
 510:	de c1       	rjmp	.+956    	; 0x8ce <__stack+0x46f>
 512:	c1 9a       	sbi	0x18, 1	; 24
 514:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 516:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 51a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 51e:	89 2b       	or	r24, r25
 520:	09 f4       	brne	.+2      	; 0x524 <__stack+0xc5>
 522:	c1 98       	cbi	0x18, 1	; 24
			}	
				
				
				
		   if((tct>=34)&&(tct<36))  //ручной режим (НЕ АВТО)
 524:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 528:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 52c:	82 97       	sbiw	r24, 0x22	; 34
 52e:	02 97       	sbiw	r24, 0x02	; 2
 530:	d0 f4       	brcc	.+52     	; 0x566 <__stack+0x107>
			    {
				 temp_ID|=((mode)&(0b1));
 532:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <mode>
 536:	a8 2f       	mov	r26, r24
 538:	a1 70       	andi	r26, 0x01	; 1
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 540:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 544:	a8 2b       	or	r26, r24
 546:	b9 2b       	or	r27, r25
 548:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <temp_ID+0x1>
 54c:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	11 f4       	brne	.+4      	; 0x558 <__stack+0xf9>
 554:	c1 9a       	sbi	0x18, 1	; 24
 556:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 558:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 55c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 560:	89 2b       	or	r24, r25
 562:	09 f4       	brne	.+2      	; 0x566 <__stack+0x107>
 564:	c1 98       	cbi	0x18, 1	; 24
			    }
       ///////////////////////////////////////////////////////////////////////////// 
			if((tct>=36)&&(tct<40))  //Активация выхода -тревога
 566:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 56a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 56e:	84 97       	sbiw	r24, 0x24	; 36
 570:	04 97       	sbiw	r24, 0x04	; 4
 572:	d8 f4       	brcc	.+54     	; 0x5aa <__stack+0x14b>
			{
				temp_ID|=((external)&(0b1));
 574:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <external>
 578:	48 2f       	mov	r20, r24
 57a:	41 70       	andi	r20, 0x01	; 1
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 582:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 586:	48 2b       	or	r20, r24
 588:	59 2b       	or	r21, r25
 58a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <temp_ID+0x1>
 58e:	40 93 79 00 	sts	0x0079, r20	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 592:	41 30       	cpi	r20, 0x01	; 1
 594:	51 05       	cpc	r21, r1
 596:	11 f4       	brne	.+4      	; 0x59c <__stack+0x13d>
 598:	c1 9a       	sbi	0x18, 1	; 24
 59a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 59c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 5a0:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 5a4:	89 2b       	or	r24, r25
 5a6:	09 f4       	brne	.+2      	; 0x5aa <__stack+0x14b>
 5a8:	c1 98       	cbi	0x18, 1	; 24
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
			}
		*/	
				 
		   if((tct>=39)&&(tct<40))  //авария 
 5aa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 5ae:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 5b2:	87 97       	sbiw	r24, 0x27	; 39
 5b4:	e1 f4       	brne	.+56     	; 0x5ee <__stack+0x18f>
			    {
				 temp_ID|=((receivemode)&(0b1));
 5b6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <receivemode>
 5ba:	68 2f       	mov	r22, r24
 5bc:	61 70       	andi	r22, 0x01	; 1
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 5c4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 5c8:	68 2b       	or	r22, r24
 5ca:	79 2b       	or	r23, r25
 5cc:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <temp_ID+0x1>
 5d0:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 5d4:	61 30       	cpi	r22, 0x01	; 1
 5d6:	71 05       	cpc	r23, r1
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__stack+0x17d>
 5da:	7d c1       	rjmp	.+762    	; 0x8d6 <__stack+0x477>
 5dc:	c1 9a       	sbi	0x18, 1	; 24
 5de:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 5e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 5e4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 5e8:	89 2b       	or	r24, r25
 5ea:	09 f4       	brne	.+2      	; 0x5ee <__stack+0x18f>
 5ec:	c1 98       	cbi	0x18, 1	; 24
			    }   
			 
			 if((tct>=42)&&(tct<49))  // Уровень задымлённости
 5ee:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 5f2:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 5f6:	c9 01       	movw	r24, r18
 5f8:	8a 97       	sbiw	r24, 0x2a	; 42
 5fa:	07 97       	sbiw	r24, 0x07	; 7
 5fc:	30 f5       	brcc	.+76     	; 0x64a <__stack+0x1eb>
			 {
				 temp_ID|=((fire-512)>>(48-tct))&(0b1);
 5fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <fire>
 602:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <fire+0x1>
 606:	92 50       	subi	r25, 0x02	; 2
 608:	40 e3       	ldi	r20, 0x30	; 48
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	ba 01       	movw	r22, r20
 60e:	62 1b       	sub	r22, r18
 610:	73 0b       	sbc	r23, r19
 612:	02 c0       	rjmp	.+4      	; 0x618 <__stack+0x1b9>
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <__stack+0x1b5>
 61c:	81 70       	andi	r24, 0x01	; 1
 61e:	99 27       	eor	r25, r25
 620:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 624:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 628:	82 2b       	or	r24, r18
 62a:	93 2b       	or	r25, r19
 62c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 630:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	11 f4       	brne	.+4      	; 0x63c <__stack+0x1dd>
 638:	c1 9a       	sbi	0x18, 1	; 24
 63a:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 63c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 640:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 644:	89 2b       	or	r24, r25
 646:	09 f4       	brne	.+2      	; 0x64a <__stack+0x1eb>
 648:	c1 98       	cbi	0x18, 1	; 24
			 } 
			 
			 
			 
			 
		   if((tct>=51)&&(tct<58))  // Уровень фона датчика 
 64a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 64e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 652:	9c 01       	movw	r18, r24
 654:	23 53       	subi	r18, 0x33	; 51
 656:	31 09       	sbc	r19, r1
 658:	27 30       	cpi	r18, 0x07	; 7
 65a:	31 05       	cpc	r19, r1
 65c:	20 f5       	brcc	.+72     	; 0x6a6 <__stack+0x247>
			    {
				  temp_ID|=((smoke)>>(57-tct))&(0b1);
 65e:	29 e3       	ldi	r18, 0x39	; 57
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	28 1b       	sub	r18, r24
 664:	39 0b       	sbc	r19, r25
 666:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <smoke>
 66a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <smoke+0x1>
 66e:	02 c0       	rjmp	.+4      	; 0x674 <__stack+0x215>
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	2a 95       	dec	r18
 676:	e2 f7       	brpl	.-8      	; 0x670 <__stack+0x211>
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	99 27       	eor	r25, r25
 67c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 680:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 684:	82 2b       	or	r24, r18
 686:	93 2b       	or	r25, r19
 688:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 68c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	11 f4       	brne	.+4      	; 0x698 <__stack+0x239>
 694:	c1 9a       	sbi	0x18, 1	; 24
 696:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}          
 698:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 69c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 6a0:	89 2b       	or	r24, r25
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <__stack+0x247>
 6a4:	c1 98       	cbi	0x18, 1	; 24
			    }
				
		   if((tct>=60)&&(tct<67)) // Смещение (компенсатор)
 6a6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 6aa:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 6ae:	9c 01       	movw	r18, r24
 6b0:	2c 53       	subi	r18, 0x3C	; 60
 6b2:	31 09       	sbc	r19, r1
 6b4:	27 30       	cpi	r18, 0x07	; 7
 6b6:	31 05       	cpc	r19, r1
 6b8:	20 f5       	brcc	.+72     	; 0x702 <__stack+0x2a3>
				{
				  temp_ID|=(smoke>>(66-tct))&(0b1);
 6ba:	22 e4       	ldi	r18, 0x42	; 66
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	28 1b       	sub	r18, r24
 6c0:	39 0b       	sbc	r19, r25
 6c2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <smoke>
 6c6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <smoke+0x1>
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <__stack+0x271>
 6cc:	95 95       	asr	r25
 6ce:	87 95       	ror	r24
 6d0:	2a 95       	dec	r18
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <__stack+0x26d>
 6d4:	81 70       	andi	r24, 0x01	; 1
 6d6:	99 27       	eor	r25, r25
 6d8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 6dc:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 6e0:	82 2b       	or	r24, r18
 6e2:	93 2b       	or	r25, r19
 6e4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 6e8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <__stack+0x295>
 6f0:	c1 9a       	sbi	0x18, 1	; 24
 6f2:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}                
 6f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 6f8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 6fc:	89 2b       	or	r24, r25
 6fe:	09 f4       	brne	.+2      	; 0x702 <__stack+0x2a3>
 700:	c1 98       	cbi	0x18, 1	; 24
				}
		   if((tct>=69)&&(tct<76))  //Температура 
 702:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 706:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 70a:	9c 01       	movw	r18, r24
 70c:	25 54       	subi	r18, 0x45	; 69
 70e:	31 09       	sbc	r19, r1
 710:	27 30       	cpi	r18, 0x07	; 7
 712:	31 05       	cpc	r19, r1
 714:	10 f5       	brcc	.+68     	; 0x75a <__stack+0x2fb>
			    {
				temp_ID|=((26)>>(75-tct))&(0b1);
 716:	2b e4       	ldi	r18, 0x4B	; 75
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	28 1b       	sub	r18, r24
 71c:	39 0b       	sbc	r19, r25
 71e:	8a e1       	ldi	r24, 0x1A	; 26
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <__stack+0x2c9>
 724:	95 95       	asr	r25
 726:	87 95       	ror	r24
 728:	2a 95       	dec	r18
 72a:	e2 f7       	brpl	.-8      	; 0x724 <__stack+0x2c5>
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	99 27       	eor	r25, r25
 730:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 734:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 738:	82 2b       	or	r24, r18
 73a:	93 2b       	or	r25, r19
 73c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 740:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	11 f4       	brne	.+4      	; 0x74c <__stack+0x2ed>
 748:	c1 9a       	sbi	0x18, 1	; 24
 74a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~ (1 <<PB1);}               
 74c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 750:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 754:	89 2b       	or	r24, r25
 756:	09 f4       	brne	.+2      	; 0x75a <__stack+0x2fb>
 758:	c1 98       	cbi	0x18, 1	; 24
			    } 
				
				
		  if((tct>=78)&&(tct<86))  //Ток светодиода
 75a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 75e:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 762:	c9 01       	movw	r24, r18
 764:	8e 54       	subi	r24, 0x4E	; 78
 766:	91 09       	sbc	r25, r1
 768:	08 97       	sbiw	r24, 0x08	; 8
 76a:	30 f5       	brcc	.+76     	; 0x7b8 <__stack+0x359>
			    {
					
					current=26;
 76c:	8a e1       	ldi	r24, 0x1A	; 26
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <current+0x1>
 774:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <current>
				    temp_ID|=((current)>>(84-tct))&(0b1);
 778:	44 e5       	ldi	r20, 0x54	; 84
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	ba 01       	movw	r22, r20
 77e:	62 1b       	sub	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	02 c0       	rjmp	.+4      	; 0x788 <__stack+0x329>
 784:	95 95       	asr	r25
 786:	87 95       	ror	r24
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <__stack+0x325>
 78c:	81 70       	andi	r24, 0x01	; 1
 78e:	99 27       	eor	r25, r25
 790:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 794:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 798:	82 2b       	or	r24, r18
 79a:	93 2b       	or	r25, r19
 79c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 7a0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
				    if(temp_ID==1){  PORTB |= (1 <<PB1);}
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	09 f4       	brne	.+2      	; 0x7aa <__stack+0x34b>
 7a8:	c1 9a       	sbi	0x18, 1	; 24
				    if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 7aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 7ae:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 7b2:	89 2b       	or	r24, r25
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__stack+0x359>
 7b6:	c1 98       	cbi	0x18, 1	; 24
			    }
			
			
		         if((tct>=86)&&(tct<95))  //Напряжение питания
 7b8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 7bc:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 7c0:	c9 01       	movw	r24, r18
 7c2:	86 55       	subi	r24, 0x56	; 86
 7c4:	91 09       	sbc	r25, r1
 7c6:	09 97       	sbiw	r24, 0x09	; 9
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__stack+0x36d>
 7ca:	89 c0       	rjmp	.+274    	; 0x8de <__stack+0x47f>
		         {   
				    volts=27;
 7cc:	8b e1       	ldi	r24, 0x1B	; 27
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 7d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			        temp_ID|=((volts)>>(94-tct))&(0b1);
 7d8:	4e e5       	ldi	r20, 0x5E	; 94
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	ba 01       	movw	r22, r20
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__stack+0x389>
 7e4:	95 95       	asr	r25
 7e6:	87 95       	ror	r24
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <__stack+0x385>
 7ec:	81 70       	andi	r24, 0x01	; 1
 7ee:	99 27       	eor	r25, r25
 7f0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <temp_ID>
 7f4:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <temp_ID+0x1>
 7f8:	82 2b       	or	r24, r18
 7fa:	93 2b       	or	r25, r19
 7fc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <temp_ID+0x1>
 800:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <temp_ID>
			        if(temp_ID==1){PORTB |= (1 <<PB1);}
 804:	01 97       	sbiw	r24, 0x01	; 1
 806:	09 f4       	brne	.+2      	; 0x80a <__stack+0x3ab>
 808:	c1 9a       	sbi	0x18, 1	; 24
			        if(temp_ID==0){PORTB &=~ (1 <<PB1);}
 80a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <temp_ID>
 80e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <temp_ID+0x1>
 812:	89 2b       	or	r24, r25
 814:	09 f0       	breq	.+2      	; 0x818 <__stack+0x3b9>
 816:	63 c0       	rjmp	.+198    	; 0x8de <__stack+0x47f>
 818:	c1 98       	cbi	0x18, 1	; 24
 81a:	61 c0       	rjmp	.+194    	; 0x8de <__stack+0x47f>
		         }	
				 
		   break;
		   
		   case 14 :
		   if(tct==13){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                 
 81c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 820:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 824:	0d 97       	sbiw	r24, 0x0d	; 13
 826:	11 f4       	brne	.+4      	; 0x82c <__stack+0x3cd>
 828:	c1 9a       	sbi	0x18, 1	; 24
 82a:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==30){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 82c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 830:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 834:	4e 97       	sbiw	r24, 0x1e	; 30
 836:	11 f4       	brne	.+4      	; 0x83c <__stack+0x3dd>
 838:	c1 9a       	sbi	0x18, 1	; 24
 83a:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==45){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 83c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 840:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 844:	8d 97       	sbiw	r24, 0x2d	; 45
 846:	11 f4       	brne	.+4      	; 0x84c <__stack+0x3ed>
 848:	c1 9a       	sbi	0x18, 1	; 24
 84a:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==46)
 84c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 850:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 854:	8e 97       	sbiw	r24, 0x2e	; 46
 856:	09 f0       	breq	.+2      	; 0x85a <__stack+0x3fb>
 858:	42 c0       	rjmp	.+132    	; 0x8de <__stack+0x47f>
		   {
			   if((detect[35]==1)&&(detect[42]==1)) {external=0;}
 85a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <detect+0x46>
 85e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <detect+0x47>
 862:	01 97       	sbiw	r24, 0x01	; 1
 864:	41 f4       	brne	.+16     	; 0x876 <__stack+0x417>
 866:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <detect+0x54>
 86a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <detect+0x55>
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	11 f4       	brne	.+4      	; 0x876 <__stack+0x417>
 872:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <external>
			   if((detect[36]==1)&&(detect[43]==1)) {external=0;}
 876:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <detect+0x48>
 87a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <detect+0x49>
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	41 f4       	brne	.+16     	; 0x892 <__stack+0x433>
 882:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <detect+0x56>
 886:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <detect+0x57>
 88a:	01 97       	sbiw	r24, 0x01	; 1
 88c:	11 f4       	brne	.+4      	; 0x892 <__stack+0x433>
 88e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <external>
			   if((detect[38]==1)&&(detect[45]==1)) {external=1;}
 892:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <detect+0x4c>
 896:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <detect+0x4d>
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	49 f4       	brne	.+18     	; 0x8b0 <__stack+0x451>
 89e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <detect+0x5a>
 8a2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <detect+0x5b>
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	19 f4       	brne	.+6      	; 0x8b0 <__stack+0x451>
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <external>
			   if((detect[37]==1)&&(detect[44]==1)) {external=0;}
 8b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <detect+0x4a>
 8b4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <detect+0x4b>
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	89 f4       	brne	.+34     	; 0x8de <__stack+0x47f>
 8bc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <detect+0x58>
 8c0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <detect+0x59>
 8c4:	01 97       	sbiw	r24, 0x01	; 1
 8c6:	59 f4       	brne	.+22     	; 0x8de <__stack+0x47f>
 8c8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <external>
		   break;
		   
		 }
	  }
		 
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <__stack+0x47f>
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
			{
				temp_ID|=((external)&(0b1));
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 8ce:	ef 2b       	or	r30, r31
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <__stack+0x475>
 8d2:	27 ce       	rjmp	.-946    	; 0x522 <__stack+0xc3>
 8d4:	6a ce       	rjmp	.-812    	; 0x5aa <__stack+0x14b>
				 
		   if((tct>=39)&&(tct<40))  //авария 
			    {
				 temp_ID|=((receivemode)&(0b1));
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 8d6:	67 2b       	or	r22, r23
 8d8:	09 f4       	brne	.+2      	; 0x8dc <__stack+0x47d>
 8da:	88 ce       	rjmp	.-752    	; 0x5ec <__stack+0x18d>
 8dc:	e4 ce       	rjmp	.-568    	; 0x6a6 <__stack+0x247>
		   break;
		   
		 }
	  }
		 
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <Omega_slave>:

 #include "Omega.h"
 void Omega_slave() {
 
 
  PORTD|= (1 <<PD0);// PORTB|=(1<<PB3); // Вспомогательная строб-индикация состояния 
 8e4:	90 9a       	sbi	0x12, 0	; 18
 stats= (PINB & 0b0000001); //Чтение состояния входа
 8e6:	86 b3       	in	r24, 0x16	; 22
 8e8:	28 2f       	mov	r18, r24
 8ea:	21 70       	andi	r18, 0x01	; 1
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <stats+0x1>
 8f2:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <stats>
 stats1=(PINB & 0b0000100);
 8f6:	86 b3       	in	r24, 0x16	; 22
 8f8:	84 70       	andi	r24, 0x04	; 4
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <stats1+0x1>
 900:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <stats1>
 if ((stats==1)&&(bit_flag==0))
 904:	21 30       	cpi	r18, 0x01	; 1
 906:	31 05       	cpc	r19, r1
 908:	09 f0       	breq	.+2      	; 0x90c <Omega_slave+0x28>
 90a:	2d c1       	rjmp	.+602    	; 0xb66 <Omega_slave+0x282>
 90c:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <bit_flag>
 910:	81 11       	cpse	r24, r1
 912:	62 c1       	rjmp	.+708    	; 0xbd8 <Omega_slave+0x2f4>
	// if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
	// if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
	// if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
		 
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
 914:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 918:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 91c:	9c 01       	movw	r18, r24
 91e:	25 50       	subi	r18, 0x05	; 5
 920:	31 09       	sbc	r19, r1
 922:	23 30       	cpi	r18, 0x03	; 3
 924:	31 05       	cpc	r19, r1
 926:	28 f4       	brcc	.+10     	; 0x932 <Omega_slave+0x4e>
 928:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <low+0x1>
 92c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <low>
 930:	32 c0       	rjmp	.+100    	; 0x996 <Omega_slave+0xb2>
	  if((10<=low)&& (low<=12)){low=1;}   // интерпритация единицы
 932:	0a 97       	sbiw	r24, 0x0a	; 10
 934:	03 97       	sbiw	r24, 0x03	; 3
 936:	38 f4       	brcc	.+14     	; 0x946 <Omega_slave+0x62>
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 940:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
 944:	46 c0       	rjmp	.+140    	; 0x9d2 <Omega_slave+0xee>
	  if((14<=low)&& (low<17)){low=2;tct=0;trigg=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
 946:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 94a:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 94e:	0e 97       	sbiw	r24, 0x0e	; 14
 950:	03 97       	sbiw	r24, 0x03	; 3
 952:	08 f5       	brcc	.+66     	; 0x996 <Omega_slave+0xb2>
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 95c:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
 960:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tct+0x1>
 964:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <tct>
 968:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <trigg+0x1>
 96c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <trigg>
 970:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 974:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
 978:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <adress_t+0x1>
 97c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <adress_t>
 980:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <directive+0x1>
 984:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <directive>
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
	 detect[tct]=low;
 988:	20 e0       	ldi	r18, 0x00	; 0
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <detect+0x1>
 990:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <detect>
 994:	82 c0       	rjmp	.+260    	; 0xa9a <Omega_slave+0x1b6>
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
	  if((10<=low)&& (low<=12)){low=1;}   // интерпритация единицы
	  if((14<=low)&& (low<17)){low=2;tct=0;trigg=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
 996:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 99a:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 99e:	89 3e       	cpi	r24, 0xE9	; 233
 9a0:	93 40       	sbci	r25, 0x03	; 3
 9a2:	bc f0       	brlt	.+46     	; 0x9d2 <Omega_slave+0xee>
 9a4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <tct+0x1>
 9a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <tct>
 9ac:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 9b0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
 9b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <adress_t+0x1>
 9b8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <adress_t>
 9bc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <directive+0x1>
 9c0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <directive>
 9c4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <external>
	 detect[tct]=low;
 9c8:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <detect+0x1>
 9cc:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <detect>
 9d0:	73 c0       	rjmp	.+230    	; 0xab8 <Omega_slave+0x1d4>
 9d2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <tct>
 9d6:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <tct+0x1>
 9da:	f9 01       	movw	r30, r18
 9dc:	ee 0f       	add	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	e6 51       	subi	r30, 0x16	; 22
 9e2:	ff 4f       	sbci	r31, 0xFF	; 255
 9e4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 9e8:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 9ec:	91 83       	std	Z+1, r25	; 0x01
 9ee:	80 83       	st	Z, r24
	 
	// if((tct==0)&&(trigg==0)) {volts =read_adc(7);current=read_adc(6);trigg=1;} // Чтение напряжения питания }
	 
	 if (tct==8)
 9f0:	28 30       	cpi	r18, 0x08	; 8
 9f2:	31 05       	cpc	r19, r1
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <Omega_slave+0x114>
 9f6:	51 c0       	rjmp	.+162    	; 0xa9a <Omega_slave+0x1b6>
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
 9f8:	ea ee       	ldi	r30, 0xEA	; 234
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	20 89       	ldd	r18, Z+16	; 0x10
 9fe:	31 89       	ldd	r19, Z+17	; 0x11
 a00:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <adress_t>
 a04:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <adress_t+0x1>
 a08:	82 2b       	or	r24, r18
 a0a:	93 2b       	or	r25, r19
 a0c:	24 81       	ldd	r18, Z+4	; 0x04
 a0e:	35 81       	ldd	r19, Z+5	; 0x05
 a10:	00 24       	eor	r0, r0
 a12:	36 95       	lsr	r19
 a14:	27 95       	ror	r18
 a16:	07 94       	ror	r0
 a18:	36 95       	lsr	r19
 a1a:	27 95       	ror	r18
 a1c:	07 94       	ror	r0
 a1e:	32 2f       	mov	r19, r18
 a20:	20 2d       	mov	r18, r0
 a22:	82 2b       	or	r24, r18
 a24:	93 2b       	or	r25, r19
 a26:	26 81       	ldd	r18, Z+6	; 0x06
 a28:	37 81       	ldd	r19, Z+7	; 0x07
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	22 95       	swap	r18
 a30:	32 95       	swap	r19
 a32:	30 7f       	andi	r19, 0xF0	; 240
 a34:	32 27       	eor	r19, r18
 a36:	20 7f       	andi	r18, 0xF0	; 240
 a38:	32 27       	eor	r19, r18
 a3a:	82 2b       	or	r24, r18
 a3c:	93 2b       	or	r25, r19
 a3e:	20 85       	ldd	r18, Z+8	; 0x08
 a40:	31 85       	ldd	r19, Z+9	; 0x09
 a42:	22 95       	swap	r18
 a44:	32 95       	swap	r19
 a46:	30 7f       	andi	r19, 0xF0	; 240
 a48:	32 27       	eor	r19, r18
 a4a:	20 7f       	andi	r18, 0xF0	; 240
 a4c:	32 27       	eor	r19, r18
 a4e:	82 2b       	or	r24, r18
 a50:	93 2b       	or	r25, r19
 a52:	22 85       	ldd	r18, Z+10	; 0x0a
 a54:	33 85       	ldd	r19, Z+11	; 0x0b
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	22 0f       	add	r18, r18
 a60:	33 1f       	adc	r19, r19
 a62:	82 2b       	or	r24, r18
 a64:	93 2b       	or	r25, r19
 a66:	24 85       	ldd	r18, Z+12	; 0x0c
 a68:	35 85       	ldd	r19, Z+13	; 0x0d
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	82 2b       	or	r24, r18
 a74:	93 2b       	or	r25, r19
 a76:	26 85       	ldd	r18, Z+14	; 0x0e
 a78:	37 85       	ldd	r19, Z+15	; 0x0f
 a7a:	22 0f       	add	r18, r18
 a7c:	33 1f       	adc	r19, r19
 a7e:	82 2b       	or	r24, r18
 a80:	93 2b       	or	r25, r19
 a82:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <adress_t+0x1>
 a86:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <adress_t>
		 if(adress_t==0){adres_call=0;}
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	09 f0       	breq	.+2      	; 0xa90 <Omega_slave+0x1ac>
 a8e:	9b c0       	rjmp	.+310    	; 0xbc6 <Omega_slave+0x2e2>
 a90:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <adres_call+0x1>
 a94:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <adres_call>
 a98:	96 c0       	rjmp	.+300    	; 0xbc6 <Omega_slave+0x2e2>
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 a9a:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <adress_t>
 a9e:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <adress_t+0x1>
 aa2:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <adress>
 aa6:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <adress+0x1>
 aaa:	48 17       	cp	r20, r24
 aac:	59 07       	cpc	r21, r25
 aae:	21 f4       	brne	.+8      	; 0xab8 <Omega_slave+0x1d4>
 ab0:	28 30       	cpi	r18, 0x08	; 8
 ab2:	31 05       	cpc	r19, r1
 ab4:	0c f0       	brlt	.+2      	; 0xab8 <Omega_slave+0x1d4>
 ab6:	5a db       	rcall	.-2380   	; 0x16c <protocol>
	   
	 bit_flag=1;
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <bit_flag>
	 hi_flag=0;
 abe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <hi_flag>
	 low=0;
 ac2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <low+0x1>
 ac6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <low>
	 temp_ID=0;
 aca:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <temp_ID+0x1>
 ace:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <temp_ID>
	 if((detect[1]==1)&&(detect[2]==0)&&(tct==2))
 ad2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <detect+0x2>
 ad6:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <detect+0x3>
 ada:	01 97       	sbiw	r24, 0x01	; 1
 adc:	11 f5       	brne	.+68     	; 0xb22 <Omega_slave+0x23e>
 ade:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <detect+0x4>
 ae2:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <detect+0x5>
 ae6:	89 2b       	or	r24, r25
 ae8:	e1 f4       	brne	.+56     	; 0xb22 <Omega_slave+0x23e>
 aea:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 aee:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 af2:	02 97       	sbiw	r24, 0x02	; 2
 af4:	b1 f4       	brne	.+44     	; 0xb22 <Omega_slave+0x23e>
	  {
		 adres_call=adres_call+1;
 af6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <adres_call>
 afa:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <adres_call+0x1>
 afe:	01 96       	adiw	r24, 0x01	; 1
 b00:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <adres_call+0x1>
 b04:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <adres_call>
		 if(adres_call==adress)
 b08:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <adress>
 b0c:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <adress+0x1>
 b10:	82 17       	cp	r24, r18
 b12:	93 07       	cpc	r25, r19
 b14:	31 f4       	brne	.+12     	; 0xb22 <Omega_slave+0x23e>
		    {
			 adress_t=adres_call;{PORTB|=(1 <<PB1); PORTB|=(1 <<PB4);} 	          
 b16:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <adress_t+0x1>
 b1a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <adress_t>
 b1e:	c1 9a       	sbi	0x18, 1	; 24
 b20:	c4 9a       	sbi	0x18, 4	; 24
		    }
	  }
		 tct=tct+1;
 b22:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tct>
 b26:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tct+0x1>
 b2a:	01 96       	adiw	r24, 0x01	; 1
 b2c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <tct+0x1>
 b30:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tct>
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 b34:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <stats>
 b38:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <stats+0x1>
 b3c:	21 30       	cpi	r18, 0x01	; 1
 b3e:	31 05       	cpc	r19, r1
 b40:	09 f4       	brne	.+2      	; 0xb44 <Omega_slave+0x260>
 b42:	4a c0       	rjmp	.+148    	; 0xbd8 <Omega_slave+0x2f4>
 b44:	10 c0       	rjmp	.+32     	; 0xb66 <Omega_slave+0x282>
	 {
		 active =active+1;	 
 b46:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <active>
 b4a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <active+0x1>
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <active+0x1>
 b54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <active>
		 bit_flag=0;
		 active=0;
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 b58:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stats>
 b5c:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stats+0x1>
 b60:	89 2b       	or	r24, r25
 b62:	f1 f0       	breq	.+60     	; 0xba0 <Omega_slave+0x2bc>
 b64:	2e c0       	rjmp	.+92     	; 0xbc2 <Omega_slave+0x2de>
	 {
		 active =active+1;	 
	 }
	 
	 
	 if (( stats ==0)&&(hi_flag==0))
 b66:	23 2b       	or	r18, r19
 b68:	61 f5       	brne	.+88     	; 0xbc2 <Omega_slave+0x2de>
 b6a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <hi_flag>
 b6e:	81 11       	cpse	r24, r1
 b70:	17 c0       	rjmp	.+46     	; 0xba0 <Omega_slave+0x2bc>
	 {
		  PORTB &=~ (1 <<PB1);                // digitalWrite(13,LOW);
 b72:	c1 98       	cbi	0x18, 1	; 24
		  PORTB&=~ (1 <<PB4);
 b74:	c4 98       	cbi	0x18, 4	; 24
		   PORTB&=~ (1 <<PB5);
 b76:	c5 98       	cbi	0x18, 5	; 24
		 hi_flag=1;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <hi_flag>
		 bit_flag=0;
 b7e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <bit_flag>
		 active=0;
 b82:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <active+0x1>
 b86:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <active>
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 b8a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <input_bit+0x1>
 b8e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <input_bit>
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 b92:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <stats>
 b96:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <stats+0x1>
 b9a:	89 2b       	or	r24, r25
 b9c:	29 f0       	breq	.+10     	; 0xba8 <Omega_slave+0x2c4>
 b9e:	11 c0       	rjmp	.+34     	; 0xbc2 <Omega_slave+0x2de>
 ba0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <hi_flag>
 ba4:	81 30       	cpi	r24, 0x01	; 1
 ba6:	69 f4       	brne	.+26     	; 0xbc2 <Omega_slave+0x2de>
	 {	 
		 active=0;
 ba8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <active+0x1>
 bac:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <active>
		 low=low+1;
 bb0:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 bb4:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 bb8:	01 96       	adiw	r24, 0x01	; 1
 bba:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 bbe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
	 }

	PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
 bc2:	90 98       	cbi	0x12, 0	; 18
	 // PORTB&=~(1<<PB3);
	 }
 bc4:	08 95       	ret
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
		 if(adress_t==0){adres_call=0;}
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 bc6:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <adress>
 bca:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <adress+0x1>
 bce:	82 17       	cp	r24, r18
 bd0:	93 07       	cpc	r25, r19
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <Omega_slave+0x2f2>
 bd4:	71 cf       	rjmp	.-286    	; 0xab8 <Omega_slave+0x1d4>
 bd6:	6f cf       	rjmp	.-290    	; 0xab6 <Omega_slave+0x1d2>
	  }
		 tct=tct+1;
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 bd8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <bit_flag>
 bdc:	81 30       	cpi	r24, 0x01	; 1
 bde:	09 f4       	brne	.+2      	; 0xbe2 <Omega_slave+0x2fe>
 be0:	b2 cf       	rjmp	.-156    	; 0xb46 <Omega_slave+0x262>
 be2:	ef cf       	rjmp	.-34     	; 0xbc2 <Omega_slave+0x2de>

00000be4 <_exit>:
 be4:	f8 94       	cli

00000be6 <__stop_program>:
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <__stop_program>
