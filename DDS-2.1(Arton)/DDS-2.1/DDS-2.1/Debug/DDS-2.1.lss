
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b26  00000bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  00800062  00800062  00000bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001978  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb7  00000000  00000000  00002ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00003a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  000040e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000422d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e2       	ldi	r30, 0x26	; 38
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 31       	cpi	r26, 0x12	; 18
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	42 d0       	rcall	.+132    	; 0xde <main>
  5a:	63 c5       	rjmp	.+2758   	; 0xb22 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_adc>:
#include "ADConverter.h"

// Функция чтения АЦП
int read_adc (unsigned char ch)
{
	ADMUX = ch; // Выбираем канал АЦП
  5e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // Запускаем преобразование
  60:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADSC))); // Ждем окончания преобразования
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <read_adc+0x4>
	ADC=(ADCL|ADCH<<8);
  66:	84 b1       	in	r24, 0x04	; 4
  68:	25 b1       	in	r18, 0x05	; 5
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	92 2b       	or	r25, r18
  6e:	95 b9       	out	0x05, r25	; 5
  70:	84 b9       	out	0x04, r24	; 4
	return(ADC); // Возвращаем значение АЦП
  72:	84 b1       	in	r24, 0x04	; 4
  74:	95 b1       	in	r25, 0x05	; 5
}
  76:	08 95       	ret

00000078 <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  78:	e1 99       	sbic	0x1c, 1	; 28
  7a:	fe cf       	rjmp	.-4      	; 0x78 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  7c:	9f bb       	out	0x1f, r25	; 31
  7e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  80:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
  82:	8d b3       	in	r24, 0x1d	; 29
}
  84:	08 95       	ret

00000086 <__vector_6>:


  //----------------Работа прерывателя таймера------------------------------------

 ISR (TIMER1_COMPA_vect)
 {
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	4f 93       	push	r20
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	  timing++;
  a8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timing>
  ac:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timing+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <timing+0x1>
  b6:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timing>
	  Omega_slave(); 
  ba:	b9 d3       	rcall	.+1906   	; 0x82e <Omega_slave>
  }
  bc:	ff 91       	pop	r31
  be:	ef 91       	pop	r30
  c0:	bf 91       	pop	r27
  c2:	af 91       	pop	r26
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	7f 91       	pop	r23
  ca:	6f 91       	pop	r22
  cc:	5f 91       	pop	r21
  ce:	4f 91       	pop	r20
  d0:	3f 91       	pop	r19
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
  de:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем внешнее  опорное напряжение
  e4:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8f 6d       	ori	r24, 0xDF	; 223
  ea:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(0<<ADFR); //частота предделителя
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	86 60       	ori	r24, 0x06	; 6
  f0:	86 b9       	out	0x06, r24	; 6
   // ACSR |= (1 << ACD);//отключаем аналоговый компаратор
    // Настройка портов ввода/вывода
    DDRC = 0b00000010;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	84 bb       	out	0x14, r24	; 20
	DDRB = 0b00111010;
  f6:	8a e3       	ldi	r24, 0x3A	; 58
  f8:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
  fa:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	81 bb       	out	0x11, r24	; 17
	PORTC= 0b00000000;
 100:	15 ba       	out	0x15, r1	; 21
	PORTD= 0b00000000;
 102:	12 ba       	out	0x12, r1	; 18
//_________________________________________________________________________________________________
    
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	88 60       	ori	r24, 0x08	; 8
 108:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 10a:	89 b7       	in	r24, 0x39	; 57
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	89 bf       	out	0x39, r24	; 57
	OCR1A = 100;  //записываем в регистр число для сравнения
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9b bd       	out	0x2b, r25	; 43
 116:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
 118:	8e b5       	in	r24, 0x2e	; 46
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8e bd       	out	0x2e, r24	; 46
	
	
	
	
	
	adress=19;
 11e:	83 e1       	ldi	r24, 0x13	; 19
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <adress+0x1>
 126:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <adress>
	device_ID=25;// 157-блок коммутации ,89-СПРА ,108-БСА, 25 -СПДОТА
 12a:	89 e1       	ldi	r24, 0x19	; 25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <device_ID+0x1>
 132:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <device_ID>
//===================================================================================================================================================	
 
 
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9e df       	rcall	.-196    	; 0x78 <EEPROM_read>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 142:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 
 delta_U=EEPROM_read(0x08);	 
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	96 df       	rcall	.-212    	; 0x78 <EEPROM_read>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <delta_U+0x1>
 152:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
 156:	8b 97       	sbiw	r24, 0x2b	; 43
 158:	34 f0       	brlt	.+12     	; 0x166 <main+0x88>
 15a:	89 e2       	ldi	r24, 0x29	; 41
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <delta_U+0x1>
 162:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <delta_U>
 delta_F=EEPROM_read(0x09);
 166:	89 e0       	ldi	r24, 0x09	; 9
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	86 df       	rcall	.-244    	; 0x78 <EEPROM_read>
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <delta_F+0x1>
 172:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <delta_F>
 if(delta_F>42){delta_F=41;}
 176:	8b 97       	sbiw	r24, 0x2b	; 43
 178:	34 f0       	brlt	.+12     	; 0x186 <main+0xa8>
 17a:	89 e2       	ldi	r24, 0x29	; 41
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <delta_F+0x1>
 182:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <delta_F>
  // fire=read_adc(0); //Чтение состояния входа ПОЖАР
// preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ



  sei();
 186:	78 94       	sei

    while (1) 
	
  {
	  
	PORTB|=(1<<PB3);
 188:	c3 9a       	sbi	0x18, 3	; 24
	fire=read_adc(0); //Чтение состояния входа ПОЖАР
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	68 df       	rcall	.-304    	; 0x5e <read_adc>
 18e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <fire+0x1>
 192:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <fire>
	PORTC|=(1<<PC1);
 196:	a9 9a       	sbi	0x15, 1	; 21
	fire=read_adc(0); //Чтение состояния входа ПОЖАР
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	61 df       	rcall	.-318    	; 0x5e <read_adc>
 19c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <fire+0x1>
 1a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <fire>
	PORTC&=~(1<<PC1);
 1a4:	a9 98       	cbi	0x15, 1	; 21
	
	volts =read_adc(7); // Чтение напряжения питания 
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	5a df       	rcall	.-332    	; 0x5e <read_adc>
 1aa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <volts+0x1>
 1ae:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <volts>
	current=read_adc(6); //Ток светодиода
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	54 df       	rcall	.-344    	; 0x5e <read_adc>
 1b6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 1ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	PORTB&=~(1<<PB3);
 1be:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	89 ee       	ldi	r24, 0xE9	; 233
 1c2:	95 e4       	ldi	r25, 0x45	; 69
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0xe6>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xec>
 1ca:	de cf       	rjmp	.-68     	; 0x188 <main+0xaa>

000001cc <protocol>:
	// PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 
	 }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
	 void protocol(void)
	 {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
		 if (tct==13)
 1d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 1d4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 1d8:	8d 30       	cpi	r24, 0x0D	; 13
 1da:	91 05       	cpc	r25, r1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <protocol+0x14>
 1de:	18 c3       	rjmp	.+1584   	; 0x810 <__stack+0x3b1>
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
 1e0:	c8 ee       	ldi	r28, 0xE8	; 232
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	2a 8d       	ldd	r18, Y+26	; 0x1a
 1e6:	3b 8d       	ldd	r19, Y+27	; 0x1b
 1e8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <directive>
 1ec:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <directive+0x1>
 1f0:	82 2b       	or	r24, r18
 1f2:	93 2b       	or	r25, r19
 1f4:	2c 89       	ldd	r18, Y+20	; 0x14
 1f6:	3d 89       	ldd	r19, Y+21	; 0x15
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	82 2b       	or	r24, r18
 206:	93 2b       	or	r25, r19
 208:	2e 89       	ldd	r18, Y+22	; 0x16
 20a:	3f 89       	ldd	r19, Y+23	; 0x17
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	82 2b       	or	r24, r18
 216:	93 2b       	or	r25, r19
 218:	28 8d       	ldd	r18, Y+24	; 0x18
 21a:	39 8d       	ldd	r19, Y+25	; 0x19
 21c:	22 0f       	add	r18, r18
 21e:	33 1f       	adc	r19, r19
 220:	82 2b       	or	r24, r18
 222:	93 2b       	or	r25, r19
 224:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <directive+0x1>
 228:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <directive>
 22c:	08 c0       	rjmp	.+16     	; 0x23e <protocol+0x72>
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 22e:	c1 9a       	sbi	0x18, 1	; 24
 230:	ad 9a       	sbi	0x15, 5	; 21
		if(tct==13){  PORTB|= (1 <<PB1); PORTB|= (1 <<PB4);}   //OWR в активном состоянии при запросе от программатора/ППКП
 232:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 236:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 23a:	0d 97       	sbiw	r24, 0x0d	; 13
 23c:	11 f4       	brne	.+4      	; 0x242 <protocol+0x76>
 23e:	c1 9a       	sbi	0x18, 1	; 24
 240:	c4 9a       	sbi	0x18, 4	; 24
		if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ 
 242:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 246:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 24a:	0e 97       	sbiw	r24, 0x0e	; 14
 24c:	61 f4       	brne	.+24     	; 0x266 <protocol+0x9a>
 24e:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <stat>
 252:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <stat+0x1>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	21 f0       	breq	.+8      	; 0x262 <protocol+0x96>
 25a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	b1 f4       	brne	.+44     	; 0x28e <protocol+0xc2>
 262:	c1 9a       	sbi	0x18, 1	; 24
 264:	ad 9a       	sbi	0x15, 5	; 21
		 
		 
		if(tct>=13)
 266:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 26a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 26e:	8d 30       	cpi	r24, 0x0D	; 13
 270:	91 05       	cpc	r25, r1
 272:	0c f4       	brge	.+2      	; 0x276 <protocol+0xaa>
 274:	d9 c2       	rjmp	.+1458   	; 0x828 <__stack+0x3c9>
		{ 
			
			if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PB4);}                  // Импульс синхронизации
 276:	46 97       	sbiw	r24, 0x16	; 22
 278:	11 f4       	brne	.+4      	; 0x27e <protocol+0xb2>
 27a:	c1 9a       	sbi	0x18, 1	; 24
 27c:	ac 9a       	sbi	0x15, 4	; 21
			if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 27e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 282:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 286:	4f 97       	sbiw	r24, 0x1f	; 31
 288:	11 f4       	brne	.+4      	; 0x28e <protocol+0xc2>
 28a:	c1 9a       	sbi	0x18, 1	; 24
 28c:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 28e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 292:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 296:	88 97       	sbiw	r24, 0x28	; 40
 298:	11 f4       	brne	.+4      	; 0x29e <protocol+0xd2>
 29a:	c1 9a       	sbi	0x18, 1	; 24
 29c:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 29e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2a2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2a6:	c1 97       	sbiw	r24, 0x31	; 49
 2a8:	11 f4       	brne	.+4      	; 0x2ae <protocol+0xe2>
 2aa:	c1 9a       	sbi	0x18, 1	; 24
 2ac:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2ae:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2b2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2b6:	ca 97       	sbiw	r24, 0x3a	; 58
 2b8:	11 f4       	brne	.+4      	; 0x2be <protocol+0xf2>
 2ba:	c1 9a       	sbi	0x18, 1	; 24
 2bc:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2c2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2c6:	83 34       	cpi	r24, 0x43	; 67
 2c8:	91 05       	cpc	r25, r1
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <protocol+0x104>
 2cc:	c1 9a       	sbi	0x18, 1	; 24
 2ce:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2d0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2d4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2d8:	8c 34       	cpi	r24, 0x4C	; 76
 2da:	91 05       	cpc	r25, r1
 2dc:	59 f4       	brne	.+22     	; 0x2f4 <protocol+0x128>
 2de:	c1 9a       	sbi	0x18, 1	; 24
 2e0:	ad 9a       	sbi	0x15, 5	; 21
		    if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2e2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2e6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2ea:	8c 34       	cpi	r24, 0x4C	; 76
 2ec:	91 05       	cpc	r25, r1
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <protocol+0x128>
 2f0:	c1 9a       	sbi	0x18, 1	; 24
 2f2:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==85){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 2f4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 2f8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 2fc:	85 35       	cpi	r24, 0x55	; 85
 2fe:	91 05       	cpc	r25, r1
 300:	11 f4       	brne	.+4      	; 0x306 <protocol+0x13a>
 302:	c1 9a       	sbi	0x18, 1	; 24
 304:	ad 9a       	sbi	0x15, 5	; 21
			if(tct==94){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 306:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 30a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 30e:	8e 35       	cpi	r24, 0x5E	; 94
 310:	91 05       	cpc	r25, r1
 312:	11 f4       	brne	.+4      	; 0x318 <protocol+0x14c>
 314:	c1 9a       	sbi	0x18, 1	; 24
 316:	ad 9a       	sbi	0x15, 5	; 21
						
							
				
		  switch(directive)
 318:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <directive>
 31c:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <directive+0x1>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	91 05       	cpc	r25, r1
 324:	09 f4       	brne	.+2      	; 0x328 <protocol+0x15c>
 326:	6a c0       	rjmp	.+212    	; 0x3fc <protocol+0x230>
 328:	1c f4       	brge	.+6      	; 0x330 <protocol+0x164>
 32a:	89 2b       	or	r24, r25
 32c:	49 f0       	breq	.+18     	; 0x340 <protocol+0x174>
 32e:	7c c2       	rjmp	.+1272   	; 0x828 <__stack+0x3c9>
 330:	83 30       	cpi	r24, 0x03	; 3
 332:	91 05       	cpc	r25, r1
 334:	09 f4       	brne	.+2      	; 0x338 <protocol+0x16c>
 336:	7f c0       	rjmp	.+254    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 338:	0e 97       	sbiw	r24, 0x0e	; 14
 33a:	09 f4       	brne	.+2      	; 0x33e <protocol+0x172>
 33c:	10 c2       	rjmp	.+1056   	; 0x75e <__stack+0x2ff>
 33e:	74 c2       	rjmp	.+1256   	; 0x828 <__stack+0x3c9>
		   {
			   
		   case 0 :
		   if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                 //OWR в активном состоянии при запросе от ППКП
 340:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 344:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 348:	09 97       	sbiw	r24, 0x09	; 9
 34a:	11 f4       	brne	.+4      	; 0x350 <protocol+0x184>
 34c:	c1 9a       	sbi	0x18, 1	; 24
 34e:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП   
 350:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 354:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 358:	0d 97       	sbiw	r24, 0x0d	; 13
 35a:	11 f4       	brne	.+4      	; 0x360 <protocol+0x194>
 35c:	c1 9a       	sbi	0x18, 1	; 24
 35e:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 360:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 364:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 368:	0e 97       	sbiw	r24, 0x0e	; 14
 36a:	61 f4       	brne	.+24     	; 0x384 <protocol+0x1b8>
 36c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <stat>
 370:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <stat+0x1>
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	21 f0       	breq	.+8      	; 0x380 <protocol+0x1b4>
 378:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 f4       	brne	.+36     	; 0x3a4 <protocol+0x1d8>
 380:	c1 9a       	sbi	0x18, 1	; 24
 382:	ad 9a       	sbi	0x15, 5	; 21
			   
			   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 384:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 388:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 38c:	46 97       	sbiw	r24, 0x16	; 22
 38e:	11 f4       	brne	.+4      	; 0x394 <protocol+0x1c8>
 390:	c1 9a       	sbi	0x18, 1	; 24
 392:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 394:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 398:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 39c:	4f 97       	sbiw	r24, 0x1f	; 31
 39e:	11 f4       	brne	.+4      	; 0x3a4 <protocol+0x1d8>
 3a0:	c1 9a       	sbi	0x18, 1	; 24
 3a2:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3ac:	88 97       	sbiw	r24, 0x28	; 40
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <protocol+0x1e8>
 3b0:	c1 9a       	sbi	0x18, 1	; 24
 3b2:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3b8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3bc:	c1 97       	sbiw	r24, 0x31	; 49
 3be:	11 f4       	brne	.+4      	; 0x3c4 <protocol+0x1f8>
 3c0:	c1 9a       	sbi	0x18, 1	; 24
 3c2:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3c8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3cc:	ca 97       	sbiw	r24, 0x3a	; 58
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <protocol+0x208>
 3d0:	c1 9a       	sbi	0x18, 1	; 24
 3d2:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3d8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	91 05       	cpc	r25, r1
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <protocol+0x21a>
 3e2:	c1 9a       	sbi	0x18, 1	; 24
 3e4:	ad 9a       	sbi	0x15, 5	; 21
			   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 3e6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 3ea:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 3ee:	8c 34       	cpi	r24, 0x4C	; 76
 3f0:	91 05       	cpc	r25, r1
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <protocol+0x22a>
 3f4:	19 c2       	rjmp	.+1074   	; 0x828 <__stack+0x3c9>
 3f6:	c1 9a       	sbi	0x18, 1	; 24
 3f8:	ad 9a       	sbi	0x15, 5	; 21
 3fa:	16 c2       	rjmp	.+1068   	; 0x828 <__stack+0x3c9>
			   
		   break;
		   
		   case 2 :
		  
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 3fc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 400:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 404:	0d 97       	sbiw	r24, 0x0d	; 13
 406:	11 f4       	brne	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	c1 9a       	sbi	0x18, 1	; 24
 40a:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 40c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 410:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 414:	0e 97       	sbiw	r24, 0x0e	; 14
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	07 c2       	rjmp	.+1038   	; 0x828 <__stack+0x3c9>
 41a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <stat>
 41e:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <stat+0x1>
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	29 f0       	breq	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	fc c1       	rjmp	.+1016   	; 0x828 <__stack+0x3c9>
 430:	c1 9a       	sbi	0x18, 1	; 24
 432:	ad 9a       	sbi	0x15, 5	; 21
 434:	f9 c1       	rjmp	.+1010   	; 0x828 <__stack+0x3c9>
		   break;
		   
		   case 3 :
		 
		   if(tct==13){  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}                  //OWR в активном состоянии при запросе от программатора/ППКП
 436:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 43a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 43e:	0d 97       	sbiw	r24, 0x0d	; 13
 440:	11 f4       	brne	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	c1 9a       	sbi	0x18, 1	; 24
 444:	ad 9a       	sbi	0x15, 5	; 21
		   if((tct==14)&&((stat[0]==1)||(external==2)))   {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //СОСТОЯНИЕ ТРЕВОГИ
 446:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 44a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 44e:	0e 97       	sbiw	r24, 0x0e	; 14
 450:	61 f4       	brne	.+24     	; 0x46a <__stack+0xb>
 452:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <stat>
 456:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <stat+0x1>
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	21 f0       	breq	.+8      	; 0x466 <__stack+0x7>
 45e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	91 f4       	brne	.+36     	; 0x48a <__stack+0x2b>
 466:	c1 9a       	sbi	0x18, 1	; 24
 468:	ad 9a       	sbi	0x15, 5	; 21
		
		   if(tct==22){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации 
 46a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 46e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 472:	46 97       	sbiw	r24, 0x16	; 22
 474:	11 f4       	brne	.+4      	; 0x47a <__stack+0x1b>
 476:	c1 9a       	sbi	0x18, 1	; 24
 478:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==31){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 47a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 47e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 482:	4f 97       	sbiw	r24, 0x1f	; 31
 484:	11 f4       	brne	.+4      	; 0x48a <__stack+0x2b>
 486:	c1 9a       	sbi	0x18, 1	; 24
 488:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==40){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 48a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 48e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 492:	88 97       	sbiw	r24, 0x28	; 40
 494:	11 f4       	brne	.+4      	; 0x49a <__stack+0x3b>
 496:	c1 9a       	sbi	0x18, 1	; 24
 498:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==49){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 49a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 49e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4a2:	c1 97       	sbiw	r24, 0x31	; 49
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__stack+0x4b>
 4a6:	c1 9a       	sbi	0x18, 1	; 24
 4a8:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==58){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 4aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4ae:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4b2:	ca 97       	sbiw	r24, 0x3a	; 58
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__stack+0x5b>
 4b6:	c1 9a       	sbi	0x18, 1	; 24
 4b8:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==67){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 4ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4be:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	91 05       	cpc	r25, r1
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__stack+0x6d>
 4c8:	c1 9a       	sbi	0x18, 1	; 24
 4ca:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==76){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  // Импульс синхронизации
 4cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4d0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4d4:	8c 34       	cpi	r24, 0x4C	; 76
 4d6:	91 05       	cpc	r25, r1
 4d8:	11 f4       	brne	.+4      	; 0x4de <__stack+0x7f>
 4da:	c1 9a       	sbi	0x18, 1	; 24
 4dc:	ad 9a       	sbi	0x15, 5	; 21
		
	   	   if((tct>=14)&&(tct<22))   //индентификатор устройства
 4de:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 4e2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 4e6:	9c 01       	movw	r18, r24
 4e8:	2e 50       	subi	r18, 0x0E	; 14
 4ea:	31 09       	sbc	r19, r1
 4ec:	28 30       	cpi	r18, 0x08	; 8
 4ee:	31 05       	cpc	r19, r1
 4f0:	20 f5       	brcc	.+72     	; 0x53a <__stack+0xdb>
			    {
				 temp_ID|=(device_ID>>(21-tct))&(0b1);
 4f2:	25 e1       	ldi	r18, 0x15	; 21
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	28 1b       	sub	r18, r24
 4f8:	39 0b       	sbc	r19, r25
 4fa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <device_ID>
 4fe:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <device_ID+0x1>
 502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0xa9>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	2a 95       	dec	r18
 50a:	e2 f7       	brpl	.-8      	; 0x504 <__stack+0xa5>
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	99 27       	eor	r25, r25
 510:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <temp_ID>
 514:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <temp_ID+0x1>
 518:	82 2b       	or	r24, r18
 51a:	93 2b       	or	r25, r19
 51c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <temp_ID+0x1>
 520:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	11 f4       	brne	.+4      	; 0x52c <__stack+0xcd>
 528:	c1 9a       	sbi	0x18, 1	; 24
 52a:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 52c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 530:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 534:	89 2b       	or	r24, r25
 536:	09 f4       	brne	.+2      	; 0x53a <__stack+0xdb>
 538:	c1 98       	cbi	0x18, 1	; 24
			    }  
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
 53a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 53e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 542:	4e 97       	sbiw	r24, 0x1e	; 30
 544:	e1 f4       	brne	.+56     	; 0x57e <__stack+0x11f>
			{
				temp_ID|=((external)&(0b1));
 546:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 54a:	e8 2f       	mov	r30, r24
 54c:	e1 70       	andi	r30, 0x01	; 1
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 554:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 558:	e8 2b       	or	r30, r24
 55a:	f9 2b       	or	r31, r25
 55c:	f0 93 7c 00 	sts	0x007C, r31	; 0x80007c <temp_ID+0x1>
 560:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 564:	e1 30       	cpi	r30, 0x01	; 1
 566:	f1 05       	cpc	r31, r1
 568:	09 f0       	breq	.+2      	; 0x56c <__stack+0x10d>
 56a:	56 c1       	rjmp	.+684    	; 0x818 <__stack+0x3b9>
 56c:	c1 9a       	sbi	0x18, 1	; 24
 56e:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 570:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 574:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 578:	89 2b       	or	r24, r25
 57a:	09 f4       	brne	.+2      	; 0x57e <__stack+0x11f>
 57c:	c1 98       	cbi	0x18, 1	; 24
			}	
				
				
				
		   if((tct>=34)&&(tct<36))  //ручной режим (НЕ АВТО)
 57e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 582:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 586:	82 97       	sbiw	r24, 0x22	; 34
 588:	02 97       	sbiw	r24, 0x02	; 2
 58a:	d0 f4       	brcc	.+52     	; 0x5c0 <__stack+0x161>
			    {
				 temp_ID|=((mode)&(0b1));
 58c:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <mode>
 590:	a8 2f       	mov	r26, r24
 592:	a1 70       	andi	r26, 0x01	; 1
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 59a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 59e:	a8 2b       	or	r26, r24
 5a0:	b9 2b       	or	r27, r25
 5a2:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <temp_ID+0x1>
 5a6:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 5aa:	11 97       	sbiw	r26, 0x01	; 1
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__stack+0x153>
 5ae:	c1 9a       	sbi	0x18, 1	; 24
 5b0:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~ (1 <<PB1);}
 5b2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 5b6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 5ba:	89 2b       	or	r24, r25
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <__stack+0x161>
 5be:	c1 98       	cbi	0x18, 1	; 24
			    }
       ///////////////////////////////////////////////////////////////////////////// 
			if((tct>=36)&&(tct<40))  //Активация выхода -тревога
 5c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 5c4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 5c8:	84 97       	sbiw	r24, 0x24	; 36
 5ca:	04 97       	sbiw	r24, 0x04	; 4
 5cc:	d8 f4       	brcc	.+54     	; 0x604 <__stack+0x1a5>
			{
				temp_ID|=((external)&(0b1));
 5ce:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <external>
 5d2:	48 2f       	mov	r20, r24
 5d4:	41 70       	andi	r20, 0x01	; 1
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 5dc:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 5e0:	48 2b       	or	r20, r24
 5e2:	59 2b       	or	r21, r25
 5e4:	50 93 7c 00 	sts	0x007C, r21	; 0x80007c <temp_ID+0x1>
 5e8:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	51 05       	cpc	r21, r1
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__stack+0x197>
 5f2:	c1 9a       	sbi	0x18, 1	; 24
 5f4:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 5f6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 5fa:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 5fe:	89 2b       	or	r24, r25
 600:	09 f4       	brne	.+2      	; 0x604 <__stack+0x1a5>
 602:	c1 98       	cbi	0x18, 1	; 24
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
			}
		*/	
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
 604:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 608:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 60c:	87 97       	sbiw	r24, 0x27	; 39
 60e:	e1 f4       	brne	.+56     	; 0x648 <__stack+0x1e9>
			    {
				 temp_ID|=((receivemode)&(0b1));
 610:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <receivemode>
 614:	68 2f       	mov	r22, r24
 616:	61 70       	andi	r22, 0x01	; 1
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 61e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 622:	68 2b       	or	r22, r24
 624:	79 2b       	or	r23, r25
 626:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <temp_ID+0x1>
 62a:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <temp_ID>
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 62e:	61 30       	cpi	r22, 0x01	; 1
 630:	71 05       	cpc	r23, r1
 632:	09 f0       	breq	.+2      	; 0x636 <__stack+0x1d7>
 634:	f5 c0       	rjmp	.+490    	; 0x820 <__stack+0x3c1>
 636:	c1 9a       	sbi	0x18, 1	; 24
 638:	ad 9a       	sbi	0x15, 5	; 21
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 63a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 63e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 642:	89 2b       	or	r24, r25
 644:	09 f4       	brne	.+2      	; 0x648 <__stack+0x1e9>
 646:	c1 98       	cbi	0x18, 1	; 24
			    }   
			 
		   if((tct>=51)&&(tct<57))  // Уровень фона датчика 
 648:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <tct>
 64c:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <tct+0x1>
 650:	c9 01       	movw	r24, r18
 652:	c3 97       	sbiw	r24, 0x33	; 51
 654:	06 97       	sbiw	r24, 0x06	; 6
 656:	30 f5       	brcc	.+76     	; 0x6a4 <__stack+0x245>
			    {
				  temp_ID|=((fire-512)>>(57-tct))&(0b1);
 658:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <fire>
 65c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <fire+0x1>
 660:	92 50       	subi	r25, 0x02	; 2
 662:	49 e3       	ldi	r20, 0x39	; 57
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	ba 01       	movw	r22, r20
 668:	62 1b       	sub	r22, r18
 66a:	73 0b       	sbc	r23, r19
 66c:	02 c0       	rjmp	.+4      	; 0x672 <__stack+0x213>
 66e:	95 95       	asr	r25
 670:	87 95       	ror	r24
 672:	6a 95       	dec	r22
 674:	e2 f7       	brpl	.-8      	; 0x66e <__stack+0x20f>
 676:	81 70       	andi	r24, 0x01	; 1
 678:	99 27       	eor	r25, r25
 67a:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <temp_ID>
 67e:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <temp_ID+0x1>
 682:	82 2b       	or	r24, r18
 684:	93 2b       	or	r25, r19
 686:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <temp_ID+0x1>
 68a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	11 f4       	brne	.+4      	; 0x696 <__stack+0x237>
 692:	c1 9a       	sbi	0x18, 1	; 24
 694:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}          
 696:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 69a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 69e:	89 2b       	or	r24, r25
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <__stack+0x245>
 6a2:	c1 98       	cbi	0x18, 1	; 24
			    }
				
		   if((tct>=60)&&(tct<67)) // Смещение (компенсатор)
 6a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 6a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 6ac:	9c 01       	movw	r18, r24
 6ae:	2c 53       	subi	r18, 0x3C	; 60
 6b0:	31 09       	sbc	r19, r1
 6b2:	27 30       	cpi	r18, 0x07	; 7
 6b4:	31 05       	cpc	r19, r1
 6b6:	20 f5       	brcc	.+72     	; 0x700 <__stack+0x2a1>
				{
				  temp_ID|=(tmp>>(66-tct))&(0b1);
 6b8:	22 e4       	ldi	r18, 0x42	; 66
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	28 1b       	sub	r18, r24
 6be:	39 0b       	sbc	r19, r25
 6c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tmp>
 6c4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <tmp+0x1>
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <__stack+0x26f>
 6ca:	95 95       	asr	r25
 6cc:	87 95       	ror	r24
 6ce:	2a 95       	dec	r18
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <__stack+0x26b>
 6d2:	81 70       	andi	r24, 0x01	; 1
 6d4:	99 27       	eor	r25, r25
 6d6:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <temp_ID>
 6da:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <temp_ID+0x1>
 6de:	82 2b       	or	r24, r18
 6e0:	93 2b       	or	r25, r19
 6e2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <temp_ID+0x1>
 6e6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <temp_ID>
				  if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                  
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__stack+0x293>
 6ee:	c1 9a       	sbi	0x18, 1	; 24
 6f0:	ad 9a       	sbi	0x15, 5	; 21
				  if(temp_ID==0){  PORTB &=~ (1 <<PB1);}                
 6f2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 6f6:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 6fa:	89 2b       	or	r24, r25
 6fc:	09 f4       	brne	.+2      	; 0x700 <__stack+0x2a1>
 6fe:	c1 98       	cbi	0x18, 1	; 24
				}
		   if((tct>=69)&&(tct<76))  //Температура 
 700:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 704:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 708:	9c 01       	movw	r18, r24
 70a:	25 54       	subi	r18, 0x45	; 69
 70c:	31 09       	sbc	r19, r1
 70e:	27 30       	cpi	r18, 0x07	; 7
 710:	31 05       	cpc	r19, r1
 712:	08 f0       	brcs	.+2      	; 0x716 <__stack+0x2b7>
 714:	89 c0       	rjmp	.+274    	; 0x828 <__stack+0x3c9>
			    {
				temp_ID|=((25)>>(75-tct))&(0b1);
 716:	2b e4       	ldi	r18, 0x4B	; 75
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	28 1b       	sub	r18, r24
 71c:	39 0b       	sbc	r19, r25
 71e:	89 e1       	ldi	r24, 0x19	; 25
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <__stack+0x2c9>
 724:	95 95       	asr	r25
 726:	87 95       	ror	r24
 728:	2a 95       	dec	r18
 72a:	e2 f7       	brpl	.-8      	; 0x724 <__stack+0x2c5>
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	99 27       	eor	r25, r25
 730:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <temp_ID>
 734:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <temp_ID+0x1>
 738:	82 2b       	or	r24, r18
 73a:	93 2b       	or	r25, r19
 73c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <temp_ID+0x1>
 740:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <temp_ID>
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	11 f4       	brne	.+4      	; 0x74c <__stack+0x2ed>
 748:	c1 9a       	sbi	0x18, 1	; 24
 74a:	ad 9a       	sbi	0x15, 5	; 21
				if(temp_ID==0){  PORTB &=~ (1 <<PB1);}               
 74c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <temp_ID>
 750:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <temp_ID+0x1>
 754:	89 2b       	or	r24, r25
 756:	09 f0       	breq	.+2      	; 0x75a <__stack+0x2fb>
 758:	67 c0       	rjmp	.+206    	; 0x828 <__stack+0x3c9>
 75a:	c1 98       	cbi	0x18, 1	; 24
 75c:	65 c0       	rjmp	.+202    	; 0x828 <__stack+0x3c9>
			    } 
			   
		   break;
		   
		   case 14 :
		   if(tct==13){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}                 
 75e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 762:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 766:	0d 97       	sbiw	r24, 0x0d	; 13
 768:	11 f4       	brne	.+4      	; 0x76e <__stack+0x30f>
 76a:	c1 9a       	sbi	0x18, 1	; 24
 76c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==30){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 76e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 772:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 776:	4e 97       	sbiw	r24, 0x1e	; 30
 778:	11 f4       	brne	.+4      	; 0x77e <__stack+0x31f>
 77a:	c1 9a       	sbi	0x18, 1	; 24
 77c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==45){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
 77e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 782:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 786:	8d 97       	sbiw	r24, 0x2d	; 45
 788:	11 f4       	brne	.+4      	; 0x78e <__stack+0x32f>
 78a:	c1 9a       	sbi	0x18, 1	; 24
 78c:	ad 9a       	sbi	0x15, 5	; 21
		   if(tct==46)
 78e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 792:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 796:	8e 97       	sbiw	r24, 0x2e	; 46
 798:	09 f0       	breq	.+2      	; 0x79c <__stack+0x33d>
 79a:	46 c0       	rjmp	.+140    	; 0x828 <__stack+0x3c9>
		   {
			   if((detect[35]==1)&&(detect[42]==1)) {external=0;}
 79c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <detect+0x46>
 7a0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <detect+0x47>
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	41 f4       	brne	.+16     	; 0x7b8 <__stack+0x359>
 7a8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <detect+0x54>
 7ac:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <detect+0x55>
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__stack+0x359>
 7b4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <external>
			   if((detect[36]==1)&&(detect[43]==1)) {external=0;}
 7b8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <detect+0x48>
 7bc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <detect+0x49>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	41 f4       	brne	.+16     	; 0x7d4 <__stack+0x375>
 7c4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <detect+0x56>
 7c8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <detect+0x57>
 7cc:	01 97       	sbiw	r24, 0x01	; 1
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__stack+0x375>
 7d0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <external>
			   if((detect[38]==1)&&(detect[45]==1)) {external=1;}
 7d4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <detect+0x4c>
 7d8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <detect+0x4d>
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	49 f4       	brne	.+18     	; 0x7f2 <__stack+0x393>
 7e0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <detect+0x5a>
 7e4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <detect+0x5b>
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	19 f4       	brne	.+6      	; 0x7f2 <__stack+0x393>
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <external>
			   if((detect[37]==1)&&(detect[44]==1)) {external=0;}
 7f2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <detect+0x4a>
 7f6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <detect+0x4b>
 7fa:	01 97       	sbiw	r24, 0x01	; 1
 7fc:	a9 f4       	brne	.+42     	; 0x828 <__stack+0x3c9>
 7fe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <detect+0x58>
 802:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <detect+0x59>
 806:	01 97       	sbiw	r24, 0x01	; 1
 808:	79 f4       	brne	.+30     	; 0x828 <__stack+0x3c9>
 80a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <external>
		   break;
		   
		 }
	  }
		 
 80e:	0c c0       	rjmp	.+24     	; 0x828 <__stack+0x3c9>
		 if (tct==13)
		 {
			 directive|=(detect[10]<<3)|(detect[11]<<2)|(detect[12]<<1)|(detect[13]) ; //Определение типа запроса 
		 }
		 
		if(tct==9) {  PORTB|= (1 <<PB1); PORTC|= (1 <<PC5);}   //OWR в активном состоянии при запросе от ППКП  
 810:	09 97       	sbiw	r24, 0x09	; 9
 812:	09 f0       	breq	.+2      	; 0x816 <__stack+0x3b7>
 814:	16 cd       	rjmp	.-1492   	; 0x242 <protocol+0x76>
 816:	0b cd       	rjmp	.-1514   	; 0x22e <protocol+0x62>
				
			if((tct==30)&&(tct<32))  //Активация выхода -тревога
			{
				temp_ID|=((external)&(0b1));
				if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 818:	ef 2b       	or	r30, r31
 81a:	09 f4       	brne	.+2      	; 0x81e <__stack+0x3bf>
 81c:	af ce       	rjmp	.-674    	; 0x57c <__stack+0x11d>
 81e:	f2 ce       	rjmp	.-540    	; 0x604 <__stack+0x1a5>
				 
		   if((tct>=39)&&(tct<40))  //авария датчика DHT
			    {
				 temp_ID|=((receivemode)&(0b1));
				 if(temp_ID==1){  PORTB |= (1 <<PB1); PORTC|= (1 <<PC5);}
				 if(temp_ID==0){  PORTB &=~(1 <<PB1);}
 820:	67 2b       	or	r22, r23
 822:	09 f4       	brne	.+2      	; 0x826 <__stack+0x3c7>
 824:	10 cf       	rjmp	.-480    	; 0x646 <__stack+0x1e7>
 826:	6c cf       	rjmp	.-296    	; 0x700 <__stack+0x2a1>
		   break;
		   
		 }
	  }
		 
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <Omega_slave>:
 #include "Omega.h"
 void Omega_slave() {
 
 
// PORTD|= (1 <<PD0); // Вспомогательная строб-индикация состояния 
 stats= (PINB & 0b0000001); //Чтение состояния входа
 82e:	86 b3       	in	r24, 0x16	; 22
 830:	28 2f       	mov	r18, r24
 832:	21 70       	andi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <stats+0x1>
 83a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <stats>
 stats1=(PINB & 0b0000100);
 83e:	86 b3       	in	r24, 0x16	; 22
 840:	84 70       	andi	r24, 0x04	; 4
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <stats1+0x1>
 848:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <stats1>
 if (( stats ==1)&&(bit_flag==0))
 84c:	21 30       	cpi	r18, 0x01	; 1
 84e:	31 05       	cpc	r19, r1
 850:	09 f0       	breq	.+2      	; 0x854 <Omega_slave+0x26>
 852:	29 c1       	rjmp	.+594    	; 0xaa6 <Omega_slave+0x278>
 854:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <bit_flag>
 858:	81 11       	cpse	r24, r1
 85a:	5d c1       	rjmp	.+698    	; 0xb16 <Omega_slave+0x2e8>
	// if((8<low)&& (low<11)){low=0;}    // интерпритация нуля
	// if((17<low)&& (low<21)){low=1;}   // интерпритация единицы
	// if((26<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма 
		 
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
 85c:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 860:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 864:	9c 01       	movw	r18, r24
 866:	25 50       	subi	r18, 0x05	; 5
 868:	31 09       	sbc	r19, r1
 86a:	23 30       	cpi	r18, 0x03	; 3
 86c:	31 05       	cpc	r19, r1
 86e:	28 f4       	brcc	.+10     	; 0x87a <Omega_slave+0x4c>
 870:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <low+0x1>
 874:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <low>
 878:	2e c0       	rjmp	.+92     	; 0x8d6 <Omega_slave+0xa8>
	  if((10<=low)&& (low<12)){low=1;}   // интерпритация единицы
 87a:	0a 97       	sbiw	r24, 0x0a	; 10
 87c:	02 97       	sbiw	r24, 0x02	; 2
 87e:	38 f4       	brcc	.+14     	; 0x88e <Omega_slave+0x60>
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 888:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
 88c:	42 c0       	rjmp	.+132    	; 0x912 <Omega_slave+0xe4>
	  if((14<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
 88e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 892:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 896:	0f 97       	sbiw	r24, 0x0f	; 15
 898:	44 97       	sbiw	r24, 0x14	; 20
 89a:	e8 f4       	brcc	.+58     	; 0x8d6 <Omega_slave+0xa8>
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 8a4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
 8a8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct+0x1>
 8ac:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tct>
 8b0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <input_bit+0x1>
 8b4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <input_bit>
 8b8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <adress_t+0x1>
 8bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <adress_t>
 8c0:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <directive+0x1>
 8c4:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <directive>
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
	 detect[tct]=low;
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <detect+0x1>
 8d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <detect>
 8d4:	82 c0       	rjmp	.+260    	; 0x9da <Omega_slave+0x1ac>
		 
	  if((5<=low)&& (low<=7)){low=0;}    // интерпритация нуля
	  if((10<=low)&& (low<12)){low=1;}   // интерпритация единицы
	  if((14<low)&& (low<35)){low=2;tct=0; input_bit=0;adress_t=0;directive=0;}  // команда начала приёма	 
		 
	 if(low>1000){tct=0; input_bit=0;adress_t=0;directive=0;low=0;external=0;}
 8d6:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 8da:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 8de:	89 3e       	cpi	r24, 0xE9	; 233
 8e0:	93 40       	sbci	r25, 0x03	; 3
 8e2:	bc f0       	brlt	.+46     	; 0x912 <Omega_slave+0xe4>
 8e4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <tct+0x1>
 8e8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tct>
 8ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <input_bit+0x1>
 8f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <input_bit>
 8f4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <adress_t+0x1>
 8f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <adress_t>
 8fc:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <directive+0x1>
 900:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <directive>
 904:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <external>
	 detect[tct]=low;
 908:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <detect+0x1>
 90c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <detect>
 910:	73 c0       	rjmp	.+230    	; 0x9f8 <Omega_slave+0x1ca>
 912:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <tct>
 916:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <tct+0x1>
 91a:	f9 01       	movw	r30, r18
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	e8 51       	subi	r30, 0x18	; 24
 922:	ff 4f       	sbci	r31, 0xFF	; 255
 924:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 928:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 92c:	91 83       	std	Z+1, r25	; 0x01
 92e:	80 83       	st	Z, r24
	 
	 if (tct==8)
 930:	28 30       	cpi	r18, 0x08	; 8
 932:	31 05       	cpc	r19, r1
 934:	09 f0       	breq	.+2      	; 0x938 <Omega_slave+0x10a>
 936:	51 c0       	rjmp	.+162    	; 0x9da <Omega_slave+0x1ac>
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
 938:	e8 ee       	ldi	r30, 0xE8	; 232
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	20 89       	ldd	r18, Z+16	; 0x10
 93e:	31 89       	ldd	r19, Z+17	; 0x11
 940:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <adress_t>
 944:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <adress_t+0x1>
 948:	82 2b       	or	r24, r18
 94a:	93 2b       	or	r25, r19
 94c:	24 81       	ldd	r18, Z+4	; 0x04
 94e:	35 81       	ldd	r19, Z+5	; 0x05
 950:	00 24       	eor	r0, r0
 952:	36 95       	lsr	r19
 954:	27 95       	ror	r18
 956:	07 94       	ror	r0
 958:	36 95       	lsr	r19
 95a:	27 95       	ror	r18
 95c:	07 94       	ror	r0
 95e:	32 2f       	mov	r19, r18
 960:	20 2d       	mov	r18, r0
 962:	82 2b       	or	r24, r18
 964:	93 2b       	or	r25, r19
 966:	26 81       	ldd	r18, Z+6	; 0x06
 968:	37 81       	ldd	r19, Z+7	; 0x07
 96a:	22 0f       	add	r18, r18
 96c:	33 1f       	adc	r19, r19
 96e:	22 95       	swap	r18
 970:	32 95       	swap	r19
 972:	30 7f       	andi	r19, 0xF0	; 240
 974:	32 27       	eor	r19, r18
 976:	20 7f       	andi	r18, 0xF0	; 240
 978:	32 27       	eor	r19, r18
 97a:	82 2b       	or	r24, r18
 97c:	93 2b       	or	r25, r19
 97e:	20 85       	ldd	r18, Z+8	; 0x08
 980:	31 85       	ldd	r19, Z+9	; 0x09
 982:	22 95       	swap	r18
 984:	32 95       	swap	r19
 986:	30 7f       	andi	r19, 0xF0	; 240
 988:	32 27       	eor	r19, r18
 98a:	20 7f       	andi	r18, 0xF0	; 240
 98c:	32 27       	eor	r19, r18
 98e:	82 2b       	or	r24, r18
 990:	93 2b       	or	r25, r19
 992:	22 85       	ldd	r18, Z+10	; 0x0a
 994:	33 85       	ldd	r19, Z+11	; 0x0b
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	22 0f       	add	r18, r18
 9a0:	33 1f       	adc	r19, r19
 9a2:	82 2b       	or	r24, r18
 9a4:	93 2b       	or	r25, r19
 9a6:	24 85       	ldd	r18, Z+12	; 0x0c
 9a8:	35 85       	ldd	r19, Z+13	; 0x0d
 9aa:	22 0f       	add	r18, r18
 9ac:	33 1f       	adc	r19, r19
 9ae:	22 0f       	add	r18, r18
 9b0:	33 1f       	adc	r19, r19
 9b2:	82 2b       	or	r24, r18
 9b4:	93 2b       	or	r25, r19
 9b6:	26 85       	ldd	r18, Z+14	; 0x0e
 9b8:	37 85       	ldd	r19, Z+15	; 0x0f
 9ba:	22 0f       	add	r18, r18
 9bc:	33 1f       	adc	r19, r19
 9be:	82 2b       	or	r24, r18
 9c0:	93 2b       	or	r25, r19
 9c2:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <adress_t+0x1>
 9c6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <adress_t>
		 if(adress_t==0){adres_call=0;}
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <Omega_slave+0x1a2>
 9ce:	9a c0       	rjmp	.+308    	; 0xb04 <Omega_slave+0x2d6>
 9d0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <adres_call+0x1>
 9d4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <adres_call>
 9d8:	95 c0       	rjmp	.+298    	; 0xb04 <Omega_slave+0x2d6>
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 9da:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <adress_t>
 9de:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <adress_t+0x1>
 9e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <adress>
 9e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <adress+0x1>
 9ea:	48 17       	cp	r20, r24
 9ec:	59 07       	cpc	r21, r25
 9ee:	21 f4       	brne	.+8      	; 0x9f8 <Omega_slave+0x1ca>
 9f0:	28 30       	cpi	r18, 0x08	; 8
 9f2:	31 05       	cpc	r19, r1
 9f4:	0c f0       	brlt	.+2      	; 0x9f8 <Omega_slave+0x1ca>
 9f6:	ea db       	rcall	.-2092   	; 0x1cc <protocol>
	 
	   
	 bit_flag=1;
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <bit_flag>
	 hi_flag=0;
 9fe:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <hi_flag>
	 low=0;
 a02:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <low+0x1>
 a06:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <low>
	 temp_ID=0;
 a0a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <temp_ID+0x1>
 a0e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <temp_ID>
	 if((detect[1]==1)&&(detect[2]==0)&&(tct==2))
 a12:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <detect+0x2>
 a16:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <detect+0x3>
 a1a:	01 97       	sbiw	r24, 0x01	; 1
 a1c:	11 f5       	brne	.+68     	; 0xa62 <Omega_slave+0x234>
 a1e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <detect+0x4>
 a22:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <detect+0x5>
 a26:	89 2b       	or	r24, r25
 a28:	e1 f4       	brne	.+56     	; 0xa62 <Omega_slave+0x234>
 a2a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 a2e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 a32:	02 97       	sbiw	r24, 0x02	; 2
 a34:	b1 f4       	brne	.+44     	; 0xa62 <Omega_slave+0x234>
	  {
		 adres_call=adres_call+1;
 a36:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <adres_call>
 a3a:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <adres_call+0x1>
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <adres_call+0x1>
 a44:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <adres_call>
		 if(adres_call==adress)
 a48:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <adress>
 a4c:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <adress+0x1>
 a50:	82 17       	cp	r24, r18
 a52:	93 07       	cpc	r25, r19
 a54:	31 f4       	brne	.+12     	; 0xa62 <Omega_slave+0x234>
		    {
			 adress_t=adres_call;{  PORTB |= (1 <<PB1); PORTB|= (1 <<PB4);} 	          
 a56:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <adress_t+0x1>
 a5a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <adress_t>
 a5e:	c1 9a       	sbi	0x18, 1	; 24
 a60:	c4 9a       	sbi	0x18, 4	; 24
		    }
	  }
		 tct=tct+1;
 a62:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tct>
 a66:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <tct+0x1>
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <tct+0x1>
 a70:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tct>
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 a74:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <stats>
 a78:	30 91 cf 00 	lds	r19, 0x00CF	; 0x8000cf <stats+0x1>
 a7c:	21 30       	cpi	r18, 0x01	; 1
 a7e:	31 05       	cpc	r19, r1
 a80:	09 f4       	brne	.+2      	; 0xa84 <Omega_slave+0x256>
 a82:	49 c0       	rjmp	.+146    	; 0xb16 <Omega_slave+0x2e8>
 a84:	10 c0       	rjmp	.+32     	; 0xaa6 <Omega_slave+0x278>
	 {
		 active =active+1;	 
 a86:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <active>
 a8a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <active+0x1>
 a8e:	01 96       	adiw	r24, 0x01	; 1
 a90:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <active+0x1>
 a94:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <active>
		 bit_flag=0;
		 active=0;
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 a98:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <stats>
 a9c:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <stats+0x1>
 aa0:	89 2b       	or	r24, r25
 aa2:	f1 f0       	breq	.+60     	; 0xae0 <Omega_slave+0x2b2>
 aa4:	08 95       	ret
	 {
		 active =active+1;	 
	 }
	 
	 
	 if (( stats ==0)&&(hi_flag==0))
 aa6:	23 2b       	or	r18, r19
 aa8:	d9 f5       	brne	.+118    	; 0xb20 <Omega_slave+0x2f2>
 aaa:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <hi_flag>
 aae:	81 11       	cpse	r24, r1
 ab0:	17 c0       	rjmp	.+46     	; 0xae0 <Omega_slave+0x2b2>
	 {
		  PORTB &=~ (1 <<PB1);                // digitalWrite(13,LOW);
 ab2:	c1 98       	cbi	0x18, 1	; 24
		  PORTB&=~ (1 <<PB4);
 ab4:	c4 98       	cbi	0x18, 4	; 24
		   PORTB&=~ (1 <<PB5);
 ab6:	c5 98       	cbi	0x18, 5	; 24
		 hi_flag=1;
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <hi_flag>
		 bit_flag=0;
 abe:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <bit_flag>
		 active=0;
 ac2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <active+0x1>
 ac6:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <active>
		 input_bit=0;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 aca:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <input_bit+0x1>
 ace:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <input_bit>
	 }
	 
	 if (( stats ==0)&&(hi_flag==1))
 ad2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <stats>
 ad6:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <stats+0x1>
 ada:	89 2b       	or	r24, r25
 adc:	29 f0       	breq	.+10     	; 0xae8 <Omega_slave+0x2ba>
 ade:	08 95       	ret
 ae0:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <hi_flag>
 ae4:	81 30       	cpi	r24, 0x01	; 1
 ae6:	e1 f4       	brne	.+56     	; 0xb20 <Omega_slave+0x2f2>
	 {	 
		 active=0;
 ae8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <active+0x1>
 aec:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <active>
		 low=low+1;
 af0:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <low>
 af4:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <low+0x1>
 af8:	01 96       	adiw	r24, 0x01	; 1
 afa:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <low+0x1>
 afe:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <low>
	 }

	// PORTD &=~(1 <<PD0);  // Вспомогательная строб-индикация состояния 
	 
	 }
 b02:	08 95       	ret
	 {
		 adress_t|= (detect[2]<<6)|(detect[3]<<5)|(detect[4]<<4)|(detect[5]<<3)|(detect[6]<<2)|(detect[7]<<1)|(detect[8]) ;
		 if(adress_t==0){adres_call=0;}
	 }

	 if((adress_t==adress)&&(tct>=8)) {protocol();}
 b04:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <adress>
 b08:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <adress+0x1>
 b0c:	82 17       	cp	r24, r18
 b0e:	93 07       	cpc	r25, r19
 b10:	09 f0       	breq	.+2      	; 0xb14 <Omega_slave+0x2e6>
 b12:	72 cf       	rjmp	.-284    	; 0x9f8 <Omega_slave+0x1ca>
 b14:	70 cf       	rjmp	.-288    	; 0x9f6 <Omega_slave+0x1c8>
	  }
		 tct=tct+1;
	 }
	 
	 
	 if (( stats ==1)&&(bit_flag==1))
 b16:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <bit_flag>
 b1a:	81 30       	cpi	r24, 0x01	; 1
 b1c:	09 f4       	brne	.+2      	; 0xb20 <Omega_slave+0x2f2>
 b1e:	b3 cf       	rjmp	.-154    	; 0xa86 <Omega_slave+0x258>
 b20:	08 95       	ret

00000b22 <_exit>:
 b22:	f8 94       	cli

00000b24 <__stop_program>:
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__stop_program>
