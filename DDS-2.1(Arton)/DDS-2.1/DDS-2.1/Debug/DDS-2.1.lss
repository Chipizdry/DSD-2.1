
DDS-2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001cd  00800062  00800062  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001619  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fc  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ef  00000000  00000000  00002b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 32       	cpi	r26, 0x2F	; 47
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3c d0       	rcall	.+120    	; 0xd2 <main>
  5a:	b6 c0       	rjmp	.+364    	; 0x1c8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_adc>:
#include "ADConverter.h"

// Функция чтения АЦП
int read_adc (unsigned char ch)
{
	ADMUX = ch; // Выбираем канал АЦП
  5e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); // Запускаем преобразование
  60:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADSC))); // Ждем окончания преобразования
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <read_adc+0x4>
	ADC=(ADCL|ADCH<<8);
  66:	84 b1       	in	r24, 0x04	; 4
  68:	25 b1       	in	r18, 0x05	; 5
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	92 2b       	or	r25, r18
  6e:	95 b9       	out	0x05, r25	; 5
  70:	84 b9       	out	0x04, r24	; 4
	return(ADC); // Возвращаем значение АЦП
  72:	84 b1       	in	r24, 0x04	; 4
  74:	95 b1       	in	r25, 0x05	; 5
}
  76:	08 95       	ret

00000078 <EEPROM_read>:


//Чтение из EEPROM
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  78:	e1 99       	sbic	0x1c, 1	; 28
  7a:	fe cf       	rjmp	.-4      	; 0x78 <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
  7c:	9f bb       	out	0x1f, r25	; 31
  7e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
  80:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //Возвращаем результат
  82:	8d b3       	in	r24, 0x1d	; 29
}
  84:	08 95       	ret

00000086 <__vector_6>:


  //----------------Работа прерывателя таймера------------------------------------

 ISR (TIMER1_COMPA_vect)
 {
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	2f 93       	push	r18
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
	  PORTD=0b00000001; // Вспомогательная строб-индикация состояния 
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	82 bb       	out	0x12, r24	; 18
	  timing++;
  9a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timing>
  9e:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <timing+0x1>
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <timing+0x1>
  a8:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timing>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	84 e3       	ldi	r24, 0x34	; 52
  b0:	9c e0       	ldi	r25, 0x0C	; 12
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <__vector_6+0x2c>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <__vector_6+0x36>
  bc:	00 00       	nop
	  
	 // Omega_slave();
	  _delay_ms(250);
	  PORTD=~0b00000001;  // Вспомогательная строб-индикация состояния  
  be:	8e ef       	ldi	r24, 0xFE	; 254
  c0:	82 bb       	out	0x12, r24	; 18
  }
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:
int main(void)
{  
	
	
	
	ADCSRA|=(1<<ADEN);// разрешаем работу АЦП
  d2:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= (0 << REFS1);
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	17 b8       	out	0x07, r1	; 7
	ADMUX|=(1 << REFS0); //выставляем опорное напряжение
  d8:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ~(1 <<ADLAR);//Правостороннее выравнивание
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	8f 6d       	ori	r24, 0xDF	; 223
  de:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(0<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADFR); //частота предделителя
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	86 62       	ori	r24, 0x26	; 38
  e4:	86 b9       	out	0x06, r24	; 6
    ACSR |= (1 << ACD);//отключаем аналоговый компаратор
  e6:	47 9a       	sbi	0x08, 7	; 8
    // Настройка портов ввода/вывода
    DDRC = 0b00000000;
  e8:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00111010;
  ea:	8a e3       	ldi	r24, 0x3A	; 58
  ec:	87 bb       	out	0x17, r24	; 23
	PORTB= 0b00000000;
  ee:	18 ba       	out	0x18, r1	; 24
    DDRD = 0b11111111;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	81 bb       	out	0x11, r24	; 17
	PORTC= 0b00000000;
  f4:	15 ba       	out	0x15, r1	; 21
	PORTD= 0b00000000;
  f6:	12 ba       	out	0x12, r1	; 18
//_________________________________________________________________________________________________
    
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  f8:	8e b5       	in	r24, 0x2e	; 46
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  fe:	89 b7       	in	r24, 0x39	; 57
 100:	80 61       	ori	r24, 0x10	; 16
 102:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b01111010; //записываем в регистр число для сравнения
 104:	8a e7       	ldi	r24, 0x7A	; 122
 106:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00010010;
 108:	82 e1       	ldi	r24, 0x12	; 18
 10a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12);//установим делитель.
 10c:	8e b5       	in	r24, 0x2e	; 46
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	8e bd       	out	0x2e, r24	; 46
	
	
	adress=19;
 112:	83 e1       	ldi	r24, 0x13	; 19
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <adress+0x1>
 11a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <adress>
	device_ID=157;// 157-блок коммутации ,89-СПРА ,108-БСА
 11e:	8d e9       	ldi	r24, 0x9D	; 157
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <device_ID+0x1>
 126:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <device_ID>
//===================================================================================================================================================	
 
 interval=EEPROM_read(0x02);   // Время ВЫХОДА НА РЕЖИМ
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a4 df       	rcall	.-184    	; 0x78 <EEPROM_read>
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <interval+0x1>
 136:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <interval>
 k=EEPROM_read(0x03);          // ОТКЛОНЕНИЕ НАПРЯЯЖЕНИЙ
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9c df       	rcall	.-200    	; 0x78 <EEPROM_read>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 
 delta_U=EEPROM_read(0x08);	 
 14a:	88 e0       	ldi	r24, 0x08	; 8
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	94 df       	rcall	.-216    	; 0x78 <EEPROM_read>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <delta_U+0x1>
 156:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <delta_U>
 if(delta_U>42){delta_U=41;}       // Определение значений по умолчанию
 15a:	8b 97       	sbiw	r24, 0x2b	; 43
 15c:	34 f0       	brlt	.+12     	; 0x16a <main+0x98>
 15e:	89 e2       	ldi	r24, 0x29	; 41
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <delta_U+0x1>
 166:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <delta_U>
 delta_F=EEPROM_read(0x09);
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	84 df       	rcall	.-248    	; 0x78 <EEPROM_read>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <delta_F+0x1>
 176:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <delta_F>
 if(delta_F>42){delta_F=41;}
 17a:	8b 97       	sbiw	r24, 0x2b	; 43
 17c:	34 f0       	brlt	.+12     	; 0x18a <main+0xb8>
 17e:	89 e2       	ldi	r24, 0x29	; 41
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <delta_F+0x1>
 186:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <delta_F>
 adress=EEPROM_read(0x10);
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	74 df       	rcall	.-280    	; 0x78 <EEPROM_read>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <adress+0x1>
 196:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <adress>
 if(adress>128){adress=0;}
 19a:	81 38       	cpi	r24, 0x81	; 129
 19c:	91 05       	cpc	r25, r1
 19e:	24 f0       	brlt	.+8      	; 0x1a8 <main+0xd6>
 1a0:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <adress+0x1>
 1a4:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <adress>
 
 
 
 
 fire=read_adc(0); //Чтение состояния входа ПОЖАР
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	59 df       	rcall	.-334    	; 0x5e <read_adc>
 1ac:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <fire+0x1>
 1b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <fire>
 preasure=read_adc(1); // Состояние входа ВЫХОД НА РЕЖИМ
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	53 df       	rcall	.-346    	; 0x5e <read_adc>
 1b8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 1bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>



sei();
 1c0:	78 94       	sei

    while (1) 
	
  {
	
	PORTD= 0b00000001;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <main+0xf2>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
